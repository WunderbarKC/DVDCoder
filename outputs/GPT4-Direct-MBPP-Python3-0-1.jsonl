{"name": "mbpp_234_volume_cube", "language": "Python3", "prompt": "def volume_cube(l: int) -> int:\n    \"\"\"\n\tWrite a function to find the volume of a cube given its side length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "volume_cube", "test": "def check(candidate):\n    assert candidate(3) == 27\n    assert candidate(2) == 8\n    assert candidate(5) == 125\n\ndef test_check():\n    check(volume_cube)\n\ntest_check()\n", "sample_io": ["assert volume_cube(3) == 27"], "source_codes": ["\ndef volume_cube(l: int) -> int:\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    return l ** 3\n\n\n"], "responses": ["```python\ndef volume_cube(l: int) -> int:\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    return l ** 3\n```"], "prompt_tokens": [48], "completion_tokens": [41], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_234_volume_cube"}
{"name": "mbpp_89_closest_num", "language": "Python3", "prompt": "def closest_num(N: int) -> int:\n    \"\"\"\n\tWrite a function to find the closest smaller number than n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "closest_num", "test": "def check(candidate):\n    assert candidate(11) == 10\n    assert candidate(7) == 6\n    assert candidate(12) == 11\n\ndef test_check():\n    check(closest_num)\n\ntest_check()\n", "sample_io": ["assert closest_num(11) == 10"], "source_codes": ["\ndef closest_num(N: int) -> int:\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    return N - 1\n\n\n"], "responses": ["```python\ndef closest_num(N: int) -> int:\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    return N - 1\n```"], "prompt_tokens": [45], "completion_tokens": [38], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_89_closest_num"}
{"name": "mbpp_245_max_sum", "language": "Python3", "prompt": "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sum", "test": "def check(candidate):\n    assert candidate([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n    assert candidate([80, 60, 30, 40, 20, 10]) == 210\n    assert candidate([2, 3, 14, 16, 21, 23, 29, 30]) == 138\n\ndef test_check():\n    check(max_sum)\n\ntest_check()\n", "sample_io": ["assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"], "source_codes": ["\nfrom typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence \n    for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # max sum increasing subsequence ending at each index\n    inc = arr[:]  # at least the element itself\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n\n    # max sum decreasing subsequence starting at each index\n    dec = arr[:]\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[j] < arr[i] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n\n    # Combine the two - subtract arr[i] because it is counted twice\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n\n    return max_bitonic_sum\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence \n    for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # max sum increasing subsequence ending at each index\n    inc = arr[:]  # at least the element itself\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n\n    # max sum decreasing subsequence starting at each index\n    dec = arr[:]\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[j] < arr[i] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n\n    # Combine the two - subtract arr[i] because it is counted twice\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n\n    return max_bitonic_sum\n```"], "prompt_tokens": [77], "completion_tokens": [299], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_245_max_sum"}
{"name": "mbpp_237_check_occurences", "language": "Python3", "prompt": "from typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    \"\"\"\n\tWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_occurences", "test": "def check(candidate):\n    assert candidate([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == { (1, 3): 2, (2, 5): 2, (3, 6): 1 }\n    assert candidate([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]) == { (2, 4): 2, (3, 6): 2, (4, 7): 1 }\n    assert candidate([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]) == { (2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1 }\n\ndef test_check():\n    check(check_occurences)\n\ntest_check()\n", "sample_io": ["assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == { (1, 3): 2, (2, 5): 2, (3, 6): 1 }"], "source_codes": ["\nfrom typing import List, Tuple, Dict\nfrom collections import Counter\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    return dict(Counter(test_list))\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple, Dict\nfrom collections import Counter\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    return dict(Counter(test_list))\n```"], "prompt_tokens": [86], "completion_tokens": [85], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_237_check_occurences"}
{"name": "mbpp_77_is_Diff", "language": "Python3", "prompt": "def is_Diff(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to find whether a number is divisible by 11.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Diff", "test": "def check(candidate):\n    assert candidate(12345) == False\n    assert candidate(1212112) == True\n    assert candidate(1212) == False\n\ndef test_check():\n    check(is_Diff)\n\ntest_check()\n", "sample_io": ["assert is_Diff(12345) == False"], "source_codes": ["\ndef is_Diff(n: int) -> bool:\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    # A number is divisible by 11 if the difference between the sum of its digits in odd positions \n    # and the sum of its digits in even positions is divisible by 11.\n    digits = list(map(int, str(abs(n))))\n    odd_sum = sum(digits[-1::-2])\n    even_sum = sum(digits[-2::-2])\n    return (odd_sum - even_sum) % 11 == 0\n\n\n"], "responses": ["```python\ndef is_Diff(n: int) -> bool:\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    # A number is divisible by 11 if the difference between the sum of its digits in odd positions \n    # and the sum of its digits in even positions is divisible by 11.\n    digits = list(map(int, str(abs(n))))\n    odd_sum = sum(digits[-1::-2])\n    even_sum = sum(digits[-2::-2])\n    return (odd_sum - even_sum) % 11 == 0\n```"], "prompt_tokens": [49], "completion_tokens": [123], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_77_is_Diff"}
{"name": "mbpp_123_amicable_numbers_sum", "language": "Python3", "prompt": "def amicable_numbers_sum(limit: int) -> int:\n    \"\"\"\n\tWrite a function to sum all amicable numbers from 1 to a specified number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "amicable_numbers_sum", "test": "def check(candidate):\n    assert candidate(999) == 504\n    assert candidate(9999) == 31626\n    assert candidate(99) == 0\n\ndef test_check():\n    check(amicable_numbers_sum)\n\ntest_check()\n", "sample_io": ["assert amicable_numbers_sum(999) == 504"], "source_codes": ["\ndef sum_of_proper_divisors(n: int) -> int:\n    total = 1  # 1 is always a divisor (except for n=1)\n    sqrt_n = int(n**0.5)\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total if n != 1 else 0\n\ndef amicable_numbers_sum(limit: int) -> int:\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(2, limit + 1):\n        pair = sum_of_proper_divisors(num)\n        if pair != num and pair <= limit:\n            if sum_of_proper_divisors(pair) == num:\n                amicable_sum += num\n    return amicable_sum\n\n# Example usage:\n# print(amicable_numbers_sum(10000))  # Output: 31626\n\n\n"], "responses": ["```python\ndef sum_of_proper_divisors(n: int) -> int:\n    total = 1  # 1 is always a divisor (except for n=1)\n    sqrt_n = int(n**0.5)\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total if n != 1 else 0\n\ndef amicable_numbers_sum(limit: int) -> int:\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(2, limit + 1):\n        pair = sum_of_proper_divisors(num)\n        if pair != num and pair <= limit:\n            if sum_of_proper_divisors(pair) == num:\n                amicable_sum += num\n    return amicable_sum\n\n# Example usage:\n# print(amicable_numbers_sum(10000))  # Output: 31626\n```\n"], "prompt_tokens": [52], "completion_tokens": [230], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_123_amicable_numbers_sum"}
{"name": "mbpp_420_cube_Sum", "language": "Python3", "prompt": "def cube_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the cube sum of first n even natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cube_Sum", "test": "def check(candidate):\n    assert candidate(2) == 72\n    assert candidate(3) == 288\n    assert candidate(4) == 800\n\ndef test_check():\n    check(cube_Sum)\n\ntest_check()\n", "sample_io": ["assert cube_Sum(2) == 72"], "source_codes": ["\ndef cube_Sum(n: int) -> int:\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # The first n even natural numbers are: 2, 4, 6, ..., 2n\n    # Cube each and sum them\n    return sum((2 * i) ** 3 for i in range(1, n + 1))\n\n\n"], "responses": ["```python\ndef cube_Sum(n: int) -> int:\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # The first n even natural numbers are: 2, 4, 6, ..., 2n\n    # Cube each and sum them\n    return sum((2 * i) ** 3 for i in range(1, n + 1))\n```"], "prompt_tokens": [50], "completion_tokens": [91], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_420_cube_Sum"}
{"name": "mbpp_585_expensive_items", "language": "Python3", "prompt": "from typing import List, Dict, Union\n\ndef expensive_items(items: List[Dict[str, Union[str, float]]], n: int) -> List[Dict[str, Union[str, float]]]:\n    \"\"\"\n\tWrite a function to find the n most expensive items in a given dataset.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "expensive_items", "test": "def check(candidate):\n    assert candidate([{ 'name': 'Item-1', 'price': 101.1 }, { 'name': 'Item-2', 'price': 555.22 }], 1) == [{ 'name': 'Item-2', 'price': 555.22 }]\n    assert candidate([{ 'name': 'Item-1', 'price': 101.1 }, { 'name': 'Item-2', 'price': 555.22 }, { 'name': 'Item-3', 'price': 45.09 }], 2) == [{ 'name': 'Item-2', 'price': 555.22 }, { 'name': 'Item-1', 'price': 101.1 }]\n    assert candidate([{ 'name': 'Item-1', 'price': 101.1 }, { 'name': 'Item-2', 'price': 555.22 }, { 'name': 'Item-3', 'price': 45.09 }, { 'name': 'Item-4', 'price': 22.75 }], 1) == [{ 'name': 'Item-2', 'price': 555.22 }]\n\ndef test_check():\n    check(expensive_items)\n\ntest_check()\n", "sample_io": ["assert expensive_items([{ 'name': 'Item-1', 'price': 101.1 }, { 'name': 'Item-2', 'price': 555.22 }], 1) == [{ 'name': 'Item-2', 'price': 555.22 }]"], "source_codes": ["\nfrom typing import List, Dict, Union\n\ndef expensive_items(items: List[Dict[str, Union[str, float]]], n: int) -> List[Dict[str, Union[str, float]]]:\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n\n    Args:\n        items (List[Dict[str, Union[str, float]]]): A list of dictionaries, \n            each representing an item with at least a 'price' key.\n        n (int): The number of most expensive items to return.\n\n    Returns:\n        List[Dict[str, Union[str, float]]]: A list of the n most expensive items, sorted by price descending.\n    \"\"\"\n    # Sort the items by 'price' key in descending order\n    sorted_items = sorted(items, key=lambda x: x.get('price', 0), reverse=True)\n    # Return the top n items\n    return sorted_items[:n]\n\n\n"], "responses": ["```python\nfrom typing import List, Dict, Union\n\ndef expensive_items(items: List[Dict[str, Union[str, float]]], n: int) -> List[Dict[str, Union[str, float]]]:\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n\n    Args:\n        items (List[Dict[str, Union[str, float]]]): A list of dictionaries, \n            each representing an item with at least a 'price' key.\n        n (int): The number of most expensive items to return.\n\n    Returns:\n        List[Dict[str, Union[str, float]]]: A list of the n most expensive items, sorted by price descending.\n    \"\"\"\n    # Sort the items by 'price' key in descending order\n    sorted_items = sorted(items, key=lambda x: x.get('price', 0), reverse=True)\n    # Return the top n items\n    return sorted_items[:n]\n```"], "prompt_tokens": [79], "completion_tokens": [196], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_585_expensive_items"}
{"name": "mbpp_20_is_woodall", "language": "Python3", "prompt": "def is_woodall(x: int) -> bool:\n    \"\"\"\n\tWrite a function to check if the given number is woodball or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_woodall", "test": "def check(candidate):\n    assert candidate(383) == True\n    assert candidate(254) == False\n    assert candidate(200) == False\n\ndef test_check():\n    check(is_woodall)\n\ntest_check()\n", "sample_io": ["assert is_woodall(383) == True"], "source_codes": ["\ndef is_woodall(x: int) -> bool:\n    \"\"\"\n    Check if the given number x is a Woodall number.\n    \n    A Woodall number is a number of the form n * 2^n - 1 for some positive integer n.\n    \n    Parameters:\n    x (int): The number to check.\n    \n    Returns:\n    bool: True if x is a Woodall number, False otherwise.\n    \"\"\"\n    if x < 0:\n        return False\n\n    n = 1\n    while True:\n        val = n * (2 ** n) - 1\n        if val == x:\n            return True\n        elif val > x:\n            return False\n        n += 1\n\n\n"], "responses": ["```python\ndef is_woodall(x: int) -> bool:\n    \"\"\"\n    Check if the given number x is a Woodall number.\n    \n    A Woodall number is a number of the form n * 2^n - 1 for some positive integer n.\n    \n    Parameters:\n    x (int): The number to check.\n    \n    Returns:\n    bool: True if x is a Woodall number, False otherwise.\n    \"\"\"\n    if x < 0:\n        return False\n\n    n = 1\n    while True:\n        val = n * (2 ** n) - 1\n        if val == x:\n            return True\n        elif val > x:\n            return False\n        n += 1\n```"], "prompt_tokens": [50], "completion_tokens": [153], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_20_is_woodall"}
{"name": "mbpp_805_max_sum_list", "language": "Python3", "prompt": "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sum_list", "test": "def check(candidate):\n    assert candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12]\n    assert candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10]\n    assert candidate([[2, 3, 1]]) == [2, 3, 1]\n\ndef test_check():\n    check(max_sum_list)\n\ntest_check()\n", "sample_io": ["assert max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12]"], "source_codes": ["\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    if not lists:\n        return []\n    return max(lists, key=sum)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    if not lists:\n        return []\n    return max(lists, key=sum)\n```"], "prompt_tokens": [63], "completion_tokens": [66], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_805_max_sum_list"}
{"name": "mbpp_806_max_run_uppercase", "language": "Python3", "prompt": "def max_run_uppercase(test_str: str) -> int:\n    \"\"\"\n\tWrite a function to find maximum run of uppercase characters in the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_run_uppercase", "test": "def check(candidate):\n    assert candidate('GeMKSForGERksISBESt') == 5\n    assert candidate('PrECIOusMOVemENTSYT') == 6\n    assert candidate('GooGLEFluTTER') == 4\n\ndef test_check():\n    check(max_run_uppercase)\n\ntest_check()\n", "sample_io": ["assert max_run_uppercase('GeMKSForGERksISBESt') == 5"], "source_codes": ["\ndef max_run_uppercase(test_str: str) -> int:\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n\n    return max_run\n\n\n"], "responses": ["```python\ndef max_run_uppercase(test_str: str) -> int:\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n\n    return max_run\n```"], "prompt_tokens": [51], "completion_tokens": [97], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_806_max_run_uppercase"}
{"name": "mbpp_455_check_monthnumb_number", "language": "Python3", "prompt": "def check_monthnumb_number(monthnum2: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given month number contains 31 days or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_455_check_monthnumb_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_monthnumb_number", "test": "def check(candidate):\n    assert candidate(5) == True\n    assert candidate(2) == False\n    assert candidate(6) == False\n\ndef test_check():\n    check(check_monthnumb_number)\n\ntest_check()\n", "sample_io": ["assert check_monthnumb_number(5) == True"], "source_codes": ["\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    # Months with 31 days: January(1), March(3), May(5), July(7), August(8), October(10), December(12)\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}\n\n\n"], "responses": ["```python\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    # Months with 31 days: January(1), March(3), May(5), July(7), August(8), October(10), December(12)\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}\n```"], "prompt_tokens": [55], "completion_tokens": [104], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_455_check_monthnumb_number"}
{"name": "mbpp_577_last_Digit_Factorial", "language": "Python3", "prompt": "def last_Digit_Factorial(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the last digit in factorial of a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "last_Digit_Factorial", "test": "def check(candidate):\n    assert candidate(4) == 4\n    assert candidate(21) == 0\n    assert candidate(30) == 0\n\ndef test_check():\n    check(last_Digit_Factorial)\n\ntest_check()\n", "sample_io": ["assert last_Digit_Factorial(4) == 4"], "source_codes": ["\ndef last_Digit_Factorial(n: int) -> int:\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # For n >= 5, factorial ends with at least one zero (due to 5*2 factors)\n    # So, last digit is 0.\n    if n >= 5:\n        return 0\n    \n    # For n < 5, compute factorial and return last digit\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n        \n    return factorial % 10\n\n\n"], "responses": ["```python\ndef last_Digit_Factorial(n: int) -> int:\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # For n >= 5, factorial ends with at least one zero (due to 5*2 factors)\n    # So, last digit is 0.\n    if n >= 5:\n        return 0\n    \n    # For n < 5, compute factorial and return last digit\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n        \n    return factorial % 10\n```"], "prompt_tokens": [53], "completion_tokens": [131], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_577_last_Digit_Factorial"}
{"name": "mbpp_555_difference", "language": "Python3", "prompt": "def difference(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "difference", "test": "def check(candidate):\n    assert candidate(3) == 30\n    assert candidate(5) == 210\n    assert candidate(2) == 6\n\ndef test_check():\n    check(difference)\n\ntest_check()\n", "sample_io": ["assert difference(3) == 30"], "source_codes": ["\ndef difference(n: int) -> int:\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers\n    and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n\n\n"], "responses": ["```python\ndef difference(n: int) -> int:\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers\n    and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n```"], "prompt_tokens": [61], "completion_tokens": [99], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_555_difference"}
{"name": "mbpp_456_reverse_string_list", "language": "Python3", "prompt": "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    \"\"\"\n\tWrite a function to reverse each string in a given list of string values.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "reverse_string_list", "test": "def check(candidate):\n    assert candidate(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    assert candidate(['john', 'amal', 'joel', 'george']) == ['nhoj', 'lama', 'leoj', 'egroeg']\n    assert candidate(['jack', 'john', 'mary']) == ['kcaj', 'nhoj', 'yram']\n\ndef test_check():\n    check(reverse_string_list)\n\ntest_check()\n", "sample_io": ["assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"], "source_codes": ["\nfrom typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    return [s[::-1] for s in stringlist]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    return [s[::-1] for s in stringlist]\n```"], "prompt_tokens": [57], "completion_tokens": [56], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_456_reverse_string_list"}
{"name": "mbpp_587_list_tuple", "language": "Python3", "prompt": "from typing import List, Any\n\ndef list_tuple(listx: List[int]) -> Any:\n    \"\"\"\n\tWrite a function to convert a list to a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_587_list_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "list_tuple", "test": "def check(candidate):\n    assert candidate([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)\n    assert candidate([2, 4, 5, 6, 2, 3, 4, 4, 7]) == (2, 4, 5, 6, 2, 3, 4, 4, 7)\n    assert candidate([58, 44, 56]) == (58, 44, 56)\n\ndef test_check():\n    check(list_tuple)\n\ntest_check()\n", "sample_io": ["assert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)"], "source_codes": ["\nfrom typing import List, Any\n\ndef list_tuple(listx: List[int]) -> Any:\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef list_tuple(listx: List[int]) -> Any:\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)\n```"], "prompt_tokens": [53], "completion_tokens": [45], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_587_list_tuple"}
{"name": "mbpp_612_merge", "language": "Python3", "prompt": "from typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    \"\"\"\n\tWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_612_merge.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "merge", "test": "def check(candidate):\n    assert candidate([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n    assert candidate([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\n    assert candidate([['x', 'y', 'z'], ['a', 'b', 'c'], ['m', 'n', 'o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'], ['z', 'c', 'o']]\n\ndef test_check():\n    check(merge)\n\ntest_check()\n", "sample_io": ["assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"], "source_codes": ["\nfrom typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]\n```"], "prompt_tokens": [87], "completion_tokens": [112], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_612_merge"}
{"name": "mbpp_12_sort_matrix", "language": "Python3", "prompt": "from typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_matrix", "test": "def check(candidate):\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    assert candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n\ndef test_check():\n    check(sort_matrix)\n\ntest_check()\n", "sample_io": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]"], "source_codes": ["\nfrom typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # Sort rows based on the sum of each row\n    return sorted(M, key=sum)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # Sort rows based on the sum of each row\n    return sorted(M, key=sum)\n```"], "prompt_tokens": [61], "completion_tokens": [67], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_12_sort_matrix"}
{"name": "mbpp_584_find_adverbs", "language": "Python3", "prompt": "def find_adverbs(text: str) -> str:\n    \"\"\"\n\tWrite a function to find the first adverb ending with ly and its positions in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_adverbs", "test": "def check(candidate):\n    assert candidate('Clearly, he has no excuse for such behavior.') == '0-7: Clearly'\n    assert candidate('Please handle the situation carefuly') == '28-36: carefuly'\n    assert candidate('Complete the task quickly') == '18-25: quickly'\n\ndef test_check():\n    check(find_adverbs)\n\ntest_check()\n", "sample_io": ["assert find_adverbs('Clearly, he has no excuse for such behavior.') == '0-7: Clearly'"], "source_codes": ["\nimport re\n\ndef find_adverbs(text: str) -> str:\n    \"\"\"\n    Write a function to find the first adverb ending with 'ly' and its positions in a given string.\n    Returns a string describing the first adverb found and its start and end indices.\n    If no such adverb exists, returns a message indicating so.\n    \"\"\"\n    # Use regex to find words ending with 'ly'\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        start, end = match.start(), match.end() - 1\n        return f\"First adverb: '{adverb}', start: {start}, end: {end}\"\n    else:\n        return \"No adverb ending with 'ly' found.\"\n\n\n"], "responses": ["```python\nimport re\n\ndef find_adverbs(text: str) -> str:\n    \"\"\"\n    Write a function to find the first adverb ending with 'ly' and its positions in a given string.\n    Returns a string describing the first adverb found and its start and end indices.\n    If no such adverb exists, returns a message indicating so.\n    \"\"\"\n    # Use regex to find words ending with 'ly'\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        start, end = match.start(), match.end() - 1\n        return f\"First adverb: '{adverb}', start: {start}, end: {end}\"\n    else:\n        return \"No adverb ending with 'ly' found.\"\n```"], "prompt_tokens": [54], "completion_tokens": [173], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_584_find_adverbs"}
{"name": "mbpp_86_centered_hexagonal_number", "language": "Python3", "prompt": "def centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n\tWrite a function to find nth centered hexagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "centered_hexagonal_number", "test": "def check(candidate):\n    assert candidate(10) == 271\n    assert candidate(2) == 7\n    assert candidate(9) == 217\n\ndef test_check():\n    check(centered_hexagonal_number)\n\ntest_check()\n", "sample_io": ["assert centered_hexagonal_number(10) == 271"], "source_codes": ["\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    The formula for the nth centered hexagonal number is:\n    C_n = 3n(n-1) + 1\n    \"\"\"\n    return 3 * n * (n - 1) + 1\n\n\n"], "responses": ["```python\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    The formula for the nth centered hexagonal number is:\n    C_n = 3n(n-1) + 1\n    \"\"\"\n    return 3 * n * (n - 1) + 1\n```"], "prompt_tokens": [46], "completion_tokens": [76], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_86_centered_hexagonal_number"}
{"name": "mbpp_130_max_occurrences", "language": "Python3", "prompt": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_occurrences", "test": "def check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n", "sample_io": ["assert max_occurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2"], "source_codes": ["\nfrom typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    if not nums:\n        return None  # or raise an error depending on requirements\n    \n    count = Counter(nums)\n    max_item = max(count, key=count.get)\n    \n    return max_item\n\n\n"], "responses": ["```python\nfrom typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    if not nums:\n        return None  # or raise an error depending on requirements\n    \n    count = Counter(nums)\n    max_item = max(count, key=count.get)\n    \n    return max_item\n```"], "prompt_tokens": [55], "completion_tokens": [87], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_130_max_occurrences"}
{"name": "mbpp_580_extract_even", "language": "Python3", "prompt": "from typing import Tuple, Any\n\ndef extract_even(test_tuple: Tuple[int, int, Tuple[int, int, Tuple[int, int]], int, int]) -> Any:\n    \"\"\"\n\tWrite a function to remove uneven elements in the nested mixed tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_even", "test": "def check(candidate):\n    assert candidate((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n    assert candidate((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\n    assert candidate((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)\n\ndef test_check():\n    check(extract_even)\n\ntest_check()\n", "sample_io": ["assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)"], "source_codes": ["\nfrom typing import Tuple, Any\n\ndef extract_even(test_tuple: Tuple[int, int, Tuple[int, int, Tuple[int, int]], int, int]) -> Any:\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    \n    def filter_even(t):\n        result = []\n        for elem in t:\n            if isinstance(elem, tuple):\n                filtered = filter_even(elem)\n                result.append(filtered)\n            else:\n                if elem % 2 == 0:\n                    result.append(elem)\n        return tuple(result)\n    \n    return filter_even(test_tuple)\n\n# Example usage:\ntest_tuple = (1, 2, (3, 4, (5, 6)), 7, 8)\nprint(extract_even(test_tuple))  # Output: (2, (4, (6,),), 8)\n\n\n"], "responses": ["```python\nfrom typing import Tuple, Any\n\ndef extract_even(test_tuple: Tuple[int, int, Tuple[int, int, Tuple[int, int]], int, int]) -> Any:\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    \n    def filter_even(t):\n        result = []\n        for elem in t:\n            if isinstance(elem, tuple):\n                filtered = filter_even(elem)\n                result.append(filtered)\n            else:\n                if elem % 2 == 0:\n                    result.append(elem)\n        return tuple(result)\n    \n    return filter_even(test_tuple)\n\n# Example usage:\ntest_tuple = (1, 2, (3, 4, (5, 6)), 7, 8)\nprint(extract_even(test_tuple))  # Output: (2, (4, (6,),), 8)\n```"], "prompt_tokens": [71], "completion_tokens": [179], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_580_extract_even"}
{"name": "mbpp_742_area_tetrahedron", "language": "Python3", "prompt": "def area_tetrahedron(side: int) -> float:\n    \"\"\"\n\tWrite a function to caluclate the area of a tetrahedron.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "area_tetrahedron", "test": "def check(candidate):\n    assert candidate(3) == 15.588457268119894\n    assert candidate(20) == 692.8203230275509\n    assert candidate(10) == 173.20508075688772\n\ndef test_check():\n    check(area_tetrahedron)\n\ntest_check()\n", "sample_io": ["assert area_tetrahedron(3) == 15.588457268119894"], "source_codes": ["\nimport math\n\ndef area_tetrahedron(side: int) -> float:\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron given the length of its side.\n\n    A regular tetrahedron has 4 equilateral triangle faces.\n    Area of one equilateral triangle = (sqrt(3) / 4) * side^2\n    Total surface area = 4 * area of one face = sqrt(3) * side^2\n\n    Parameters:\n    side (int): The length of a side of the tetrahedron.\n\n    Returns:\n    float: The total surface area of the tetrahedron.\n    \"\"\"\n    return math.sqrt(3) * (side ** 2)\n\n# Example usage:\n# print(area_tetrahedron(3))\n\n\n"], "responses": ["```python\nimport math\n\ndef area_tetrahedron(side: int) -> float:\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron given the length of its side.\n\n    A regular tetrahedron has 4 equilateral triangle faces.\n    Area of one equilateral triangle = (sqrt(3) / 4) * side^2\n    Total surface area = 4 * area of one face = sqrt(3) * side^2\n\n    Parameters:\n    side (int): The length of a side of the tetrahedron.\n\n    Returns:\n    float: The total surface area of the tetrahedron.\n    \"\"\"\n    return math.sqrt(3) * (side ** 2)\n\n# Example usage:\n# print(area_tetrahedron(3))\n```"], "prompt_tokens": [54], "completion_tokens": [169], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_742_area_tetrahedron"}
{"name": "mbpp_610_remove_kth_element", "language": "Python3", "prompt": "from typing import List\n\ndef remove_kth_element(list1: List[int], L: int) -> List[int]:\n    \"\"\"\n\tWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_kth_element", "test": "def check(candidate):\n    assert candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 3, 4, 4, 5, 1]\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4) == [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5) == [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]\n\ndef test_check():\n    check(remove_kth_element)\n\ntest_check()\n", "sample_io": ["assert remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 3, 4, 4, 5, 1]"], "source_codes": ["\nfrom typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, \n    but the k'th element removed.\n    \n    Parameters:\n    list1 (List[int]): The input list.\n    k (int): The index (0-based) of the element to remove.\n    \n    Returns:\n    List[int]: A new list with the k'th element removed.\n    \"\"\"\n    if k < 0 or k >= len(list1):\n        # If k is out of range, return the list as is\n        return list1.copy()\n    return list1[:k] + list1[k+1:]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, \n    but the k'th element removed.\n    \n    Parameters:\n    list1 (List[int]): The input list.\n    k (int): The index (0-based) of the element to remove.\n    \n    Returns:\n    List[int]: A new list with the k'th element removed.\n    \"\"\"\n    if k < 0 or k >= len(list1):\n        # If k is out of range, return the list as is\n        return list1.copy()\n    return list1[:k] + list1[k+1:]\n```"], "prompt_tokens": [72], "completion_tokens": [159], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_610_remove_kth_element"}
{"name": "mbpp_394_check_distinct", "language": "Python3", "prompt": "from typing import List\n\ndef check_distinct(test_tup: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check if given list contains no duplicates.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_distinct", "test": "def check(candidate):\n    assert candidate([1, 4, 5, 6, 1, 4]) == False\n    assert candidate([1, 4, 5, 6]) == True\n    assert candidate([2, 3, 4, 5, 6]) == True\n\ndef test_check():\n    check(check_distinct)\n\ntest_check()\n", "sample_io": ["assert check_distinct([1, 4, 5, 6, 1, 4]) == False"], "source_codes": ["\nfrom typing import List\n\ndef check_distinct(test_tup: List[int]) -> bool:\n    \"\"\"\n    Write a function to check if given list contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_distinct(test_tup: List[int]) -> bool:\n    \"\"\"\n    Write a function to check if given list contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))\n```"], "prompt_tokens": [54], "completion_tokens": [54], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_394_check_distinct"}
{"name": "mbpp_793_last", "language": "Python3", "prompt": "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "last", "test": "def check(candidate):\n    assert candidate([1, 2, 3], 1) == 0\n    assert candidate([1, 1, 1, 2, 3, 4], 1) == 2\n    assert candidate([2, 3, 2, 3, 6, 8, 9], 3) == 3\n\ndef test_check():\n    check(last)\n\ntest_check()\n", "sample_io": ["assert last([1, 2, 3], 1) == 0"], "source_codes": ["\nfrom typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (List[int]): A sorted list of integers\n    x (int): The element to find the last position of\n\n    Returns:\n    int: The last position (index) of x in arr, or -1 if x is not present\n    \"\"\"\n    low, high = 0, len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid  # Update result and search to the right for last occurrence\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (List[int]): A sorted list of integers\n    x (int): The element to find the last position of\n\n    Returns:\n    int: The last position (index) of x in arr, or -1 if x is not present\n    \"\"\"\n    low, high = 0, len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid  # Update result and search to the right for last occurrence\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n```"], "prompt_tokens": [59], "completion_tokens": [203], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_793_last"}
{"name": "mbpp_728_sum_list", "language": "Python3", "prompt": "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_list", "test": "def check(candidate):\n    assert candidate([10, 20, 30], [15, 25, 35]) == [25, 45, 65]\n    assert candidate([1, 2, 3], [5, 6, 7]) == [6, 8, 10]\n    assert candidate([15, 20, 30], [15, 45, 75]) == [30, 65, 105]\n\ndef test_check():\n    check(sum_list)\n\ntest_check()\n", "sample_io": ["assert sum_list([10, 20, 30], [15, 25, 35]) == [25, 45, 65]"], "source_codes": ["\nfrom typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]\n```"], "prompt_tokens": [89], "completion_tokens": [93], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_728_sum_list"}
{"name": "mbpp_566_sum_digits", "language": "Python3", "prompt": "def sum_digits(n: int) -> int:\n    \"\"\"\n\tWrite a function to get the sum of the digits of a non-negative integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_digits", "test": "def check(candidate):\n    assert candidate(345) == 12\n    assert candidate(12) == 3\n    assert candidate(97) == 16\n\ndef test_check():\n    check(sum_digits)\n\ntest_check()\n", "sample_io": ["assert sum_digits(345) == 12"], "source_codes": ["\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))\n\n\n"], "responses": ["```python\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))\n```"], "prompt_tokens": [49], "completion_tokens": [48], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_566_sum_digits"}
{"name": "mbpp_290_max_length", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_length(list1: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\"\n\tWrite a function to find the list of maximum length in a list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_length", "test": "def check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])\n    assert candidate([[1], [5, 7], [10, 12, 14, 15]]) == (4, [10, 12, 14, 15])\n    assert candidate([[5], [15, 20, 25]]) == (3, [15, 20, 25])\n\ndef test_check():\n    check(max_length)\n\ntest_check()\n", "sample_io": ["assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_length(list1: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    if not list1:\n        return 0, []\n    \n    max_list = max(list1, key=len)\n    return len(max_list), max_list\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_length(list1: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    if not list1:\n        return 0, []\n    \n    max_list = max(list1, key=len)\n    return len(max_list), max_list\n```"], "prompt_tokens": [63], "completion_tokens": [82], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_290_max_length"}
{"name": "mbpp_413_extract_nth_element", "language": "Python3", "prompt": "from typing import List, Tuple, Any\n\ndef extract_nth_element(list1: List[Tuple[str, int, int]], n: int) -> List[Any]:\n    \"\"\"\n\tWrite a function to extract the nth element from a given list of tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_413_extract_nth_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_nth_element", "test": "def check(candidate):\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2) == [99, 96, 94, 98]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1) == [98, 97, 91, 94]\n\ndef test_check():\n    check(extract_nth_element)\n\ntest_check()\n", "sample_io": ["assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"], "source_codes": ["\nfrom typing import List, Tuple, Any\n\ndef extract_nth_element(list1: List[Tuple[str, int, int]], n: int) -> List[Any]:\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    result = []\n    for tup in list1:\n        if 0 <= n < len(tup):\n            result.append(tup[n])\n        else:\n            # If n is out of range for the tuple, append None or raise an error\n            result.append(None)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple, Any\n\ndef extract_nth_element(list1: List[Tuple[str, int, int]], n: int) -> List[Any]:\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    result = []\n    for tup in list1:\n        if 0 <= n < len(tup):\n            result.append(tup[n])\n        else:\n            # If n is out of range for the tuple, append None or raise an error\n            result.append(None)\n    return result\n```"], "prompt_tokens": [71], "completion_tokens": [117], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_413_extract_nth_element"}
{"name": "mbpp_628_replace_spaces", "language": "Python3", "prompt": "def replace_spaces(string: str) -> str:\n    \"\"\"\n\tWrite a function to replace all spaces in the given string with '%20'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_628_replace_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_spaces", "test": "def check(candidate):\n    assert candidate('My Name is Dawood') == 'My%20Name%20is%20Dawood'\n    assert candidate('I am a Programmer') == 'I%20am%20a%20Programmer'\n    assert candidate('I love Coding') == 'I%20love%20Coding'\n\ndef test_check():\n    check(replace_spaces)\n\ntest_check()\n", "sample_io": ["assert replace_spaces('My Name is Dawood') == 'My%20Name%20is%20Dawood'"], "source_codes": ["\ndef replace_spaces(string: str) -> str:\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')\n\n\n"], "responses": ["```python\ndef replace_spaces(string: str) -> str:\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')\n```"], "prompt_tokens": [48], "completion_tokens": [43], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_628_replace_spaces"}
{"name": "mbpp_417_group_tuples", "language": "Python3", "prompt": "from typing import List\n\ndef group_tuples(Input: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to find common first element in given list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "group_tuples", "test": "def check(candidate):\n    assert candidate([['x', 'y'], ['x', 'z'], ['w', 't']]) == [['x', 'y', 'z'], ['w', 't']]\n    assert candidate([['a', 'b'], ['a', 'c'], ['d', 'e']]) == [['a', 'b', 'c'], ['d', 'e']]\n    assert candidate([['f', 'g'], ['f', 'g'], ['h', 'i']]) == [['f', 'g', 'g'], ['h', 'i']]\n\ndef test_check():\n    check(group_tuples)\n\ntest_check()\n", "sample_io": ["assert group_tuples([['x', 'y'], ['x', 'z'], ['w', 't']]) == [['x', 'y', 'z'], ['w', 't']]"], "source_codes": ["\nfrom typing import List\n\ndef group_tuples(Input: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n    Write a function to find common first element in given list of lists.\n    \"\"\"\n    if not Input:\n        return []\n    \n    # Extract first elements from each sublist\n    first_elements = [lst[0] for lst in Input if lst]\n    \n    # Find the elements that appear more than once (common first elements)\n    common = set()\n    seen = set()\n    for elem in first_elements:\n        if elem in seen:\n            common.add(elem)\n        else:\n            seen.add(elem)\n    \n    # Return list of lists which have their first element in the common set\n    result = [lst for lst in Input if lst and lst[0] in common]\n    \n    return result\n\n\n# Example usage:\n# Input = [[\"a\", \"1\"], [\"b\", \"2\"], [\"a\", \"3\"], [\"c\", \"4\"], [\"b\", \"5\"]]\n# Output should be [[\"a\", \"1\"], [\"a\", \"3\"], [\"b\", \"2\"], [\"b\", \"5\"]]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef group_tuples(Input: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n    Write a function to find common first element in given list of lists.\n    \"\"\"\n    if not Input:\n        return []\n    \n    # Extract first elements from each sublist\n    first_elements = [lst[0] for lst in Input if lst]\n    \n    # Find the elements that appear more than once (common first elements)\n    common = set()\n    seen = set()\n    for elem in first_elements:\n        if elem in seen:\n            common.add(elem)\n        else:\n            seen.add(elem)\n    \n    # Return list of lists which have their first element in the common set\n    result = [lst for lst in Input if lst and lst[0] in common]\n    \n    return result\n\n\n# Example usage:\n# Input = [[\"a\", \"1\"], [\"b\", \"2\"], [\"a\", \"3\"], [\"c\", \"4\"], [\"b\", \"5\"]]\n# Output should be [[\"a\", \"1\"], [\"a\", \"3\"], [\"b\", \"2\"], [\"b\", \"5\"]]\n```\n"], "prompt_tokens": [56], "completion_tokens": [235], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_417_group_tuples"}
{"name": "mbpp_286_max_sub_array_sum_repeated", "language": "Python3", "prompt": "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sub_array_sum_repeated", "test": "def check(candidate):\n    assert candidate([10, 20, -30, -1], 4, 3) == 30\n    assert candidate([-1, 10, 20], 3, 2) == 59\n    assert candidate([-1, -2, -3], 3, 3) == -1\n\ndef test_check():\n    check(max_sub_array_sum_repeated)\n\ntest_check()\n", "sample_io": ["assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30"], "source_codes": ["\nfrom typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array \n    which is formed by repeating the given array k times.\n    \"\"\"\n    # Kadane's algorithm to find max subarray sum for one array\n    def kadane(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    \n    # sum of single array\n    arr_sum = sum(a)\n    \n    # if k == 1, just return kadane in a\n    if k == 1:\n        return kadane(a)\n    \n    # find max subarray sum in two concatenated arrays\n    max_two = kadane(a * 2)\n    \n    # if total sum is <= 0, max sum is max of kadane on two repetitions\n    if arr_sum <= 0:\n        return max_two\n    \n    # if total sum > 0, then max sum includes full arrays between first and last\n    # max prefix sum\n    max_prefix = current = a[0]\n    for x in a[1:]:\n        current += x\n        max_prefix = max(max_prefix, current)\n    \n    # max suffix sum\n    max_suffix = current = a[-1]\n    for x in reversed(a[:-1]):\n        current += x\n        max_suffix = max(max_suffix, current)\n    \n    # result is max suffix + (k-2)*arr_sum + max prefix\n    return max_suffix + (k - 2)*arr_sum + max_prefix\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array \n    which is formed by repeating the given array k times.\n    \"\"\"\n    # Kadane's algorithm to find max subarray sum for one array\n    def kadane(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    \n    # sum of single array\n    arr_sum = sum(a)\n    \n    # if k == 1, just return kadane in a\n    if k == 1:\n        return kadane(a)\n    \n    # find max subarray sum in two concatenated arrays\n    max_two = kadane(a * 2)\n    \n    # if total sum is <= 0, max sum is max of kadane on two repetitions\n    if arr_sum <= 0:\n        return max_two\n    \n    # if total sum > 0, then max sum includes full arrays between first and last\n    # max prefix sum\n    max_prefix = current = a[0]\n    for x in a[1:]:\n        current += x\n        max_prefix = max(max_prefix, current)\n    \n    # max suffix sum\n    max_suffix = current = a[-1]\n    for x in reversed(a[:-1]):\n        current += x\n        max_suffix = max(max_suffix, current)\n    \n    # result is max suffix + (k-2)*arr_sum + max prefix\n    return max_suffix + (k - 2)*arr_sum + max_prefix\n```"], "prompt_tokens": [78], "completion_tokens": [391], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_286_max_sub_array_sum_repeated"}
{"name": "mbpp_66_pos_count", "language": "Python3", "prompt": "from typing import List\n\ndef pos_count(list: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to count the number of positive numbers in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pos_count", "test": "def check(candidate):\n    assert candidate([1, -2, 3, -4]) == 2\n    assert candidate([3, 4, 5, -1]) == 3\n    assert candidate([1, 2, 3, 4]) == 4\n\ndef test_check():\n    check(pos_count)\n\ntest_check()\n", "sample_io": ["assert pos_count([1, -2, 3, -4]) == 2"], "source_codes": ["\nfrom typing import List\n\ndef pos_count(lst: List[int]) -> int:\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    return sum(1 for num in lst if num > 0)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef pos_count(lst: List[int]) -> int:\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    return sum(1 for num in lst if num > 0)\n```"], "prompt_tokens": [54], "completion_tokens": [55], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_66_pos_count"}
{"name": "mbpp_450_extract_string", "language": "Python3", "prompt": "from typing import List\n\ndef extract_string(str: List[str], l: int) -> List[str]:\n    \"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_string", "test": "def check(candidate):\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'], 6) == ['Python']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'], 9) == ['exercises']\n\ndef test_check():\n    check(extract_string)\n\ntest_check()\n", "sample_io": ["assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']"], "source_codes": ["\nfrom typing import List\n\ndef extract_string(str_list: List[str], l: int) -> List[str]:\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \n    Args:\n    str_list (List[str]): List of string values.\n    l (int): Desired string length to extract.\n    \n    Returns:\n    List[str]: List of strings from str_list which have length equal to l.\n    \"\"\"\n    return [s for s in str_list if len(s) == l]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef extract_string(str_list: List[str], l: int) -> List[str]:\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \n    Args:\n    str_list (List[str]): List of string values.\n    l (int): Desired string length to extract.\n    \n    Returns:\n    List[str]: List of strings from str_list which have length equal to l.\n    \"\"\"\n    return [s for s in str_list if len(s) == l]\n```\n"], "prompt_tokens": [61], "completion_tokens": [113], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_450_extract_string"}
{"name": "mbpp_444_trim_tuple", "language": "Python3", "prompt": "from typing import List\n\ndef trim_tuple(test_list: List[List[int]], K: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to trim each list by k in the given lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "trim_tuple", "test": "def check(candidate):\n    assert candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2) == [[2], [9], [2], [2]]\n    assert candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1) == [[3, 2, 1], [4, 9, 2], [1, 2, 3], [8, 2, 1]]\n    assert candidate([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1) == [[8, 4], [8, 12], [1, 7], [6, 9]]\n\ndef test_check():\n    check(trim_tuple)\n\ntest_check()\n", "sample_io": ["assert trim_tuple([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2) == [[2], [9], [2], [2]]"], "source_codes": ["\nfrom typing import List\n\ndef trim_tuple(test_list: List[List[int]], K: int) -> List[List[int]]:\n    \"\"\"\n    Write a function to trim each list by k in the given lists.\n    Trimming means removing last K elements from each list.\n    If K is greater than the length of the list, return an empty list for that entry.\n    \"\"\"\n    return [sublist[:-K] if K <= len(sublist) else [] for sublist in test_list]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef trim_tuple(test_list: List[List[int]], K: int) -> List[List[int]]:\n    \"\"\"\n    Write a function to trim each list by k in the given lists.\n    Trimming means removing last K elements from each list.\n    If K is greater than the length of the list, return an empty list for that entry.\n    \"\"\"\n    return [sublist[:-K] if K <= len(sublist) else [] for sublist in test_list]\n```"], "prompt_tokens": [61], "completion_tokens": [102], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_444_trim_tuple"}
{"name": "mbpp_439_multiple_to_single", "language": "Python3", "prompt": "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    \"\"\"\n\tWrite a function to join a list of multiple integers into a single integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "multiple_to_single", "test": "def check(candidate):\n    assert candidate([11, 33, 50]) == 113350\n    assert candidate([-1, 2, 3, 4, 5, 6]) == -123456\n    assert candidate([10, 15, 20, 25]) == 10152025\n\ndef test_check():\n    check(multiple_to_single)\n\ntest_check()\n", "sample_io": ["assert multiple_to_single([11, 33, 50]) == 113350"], "source_codes": ["\nfrom typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # Convert each integer to string, join them, then convert back to int\n    return int(''.join(map(str, L)))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # Convert each integer to string, join them, then convert back to int\n    return int(''.join(map(str, L)))\n```"], "prompt_tokens": [55], "completion_tokens": [69], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_439_multiple_to_single"}
{"name": "mbpp_162_sum_series", "language": "Python3", "prompt": "def sum_series(n: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_162_sum_series.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_series", "test": "def check(candidate):\n    assert candidate(6) == 12\n    assert candidate(10) == 30\n    assert candidate(9) == 25\n\ndef test_check():\n    check(sum_series)\n\ntest_check()\n", "sample_io": ["assert sum_series(6) == 12"], "source_codes": ["\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum (n - 2*i) for i=0 to n//2, where terms are summed while n - 2*i >= 0.\n    For example, for n=5: sum = 5 + 3 + 1 = 9\n    \"\"\"\n    total = 0\n    i = 0\n    while True:\n        term = n - 2 * i\n        if term < 0:\n            break\n        total += term\n        i += 1\n    return total\n\n# Example usage\n# print(sum_series(5))  # Output: 9\n\n\n"], "responses": ["```python\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum (n - 2*i) for i=0 to n//2, where terms are summed while n - 2*i >= 0.\n    For example, for n=5: sum = 5 + 3 + 1 = 9\n    \"\"\"\n    total = 0\n    i = 0\n    while True:\n        term = n - 2 * i\n        if term < 0:\n            break\n        total += term\n        i += 1\n    return total\n\n# Example usage\n# print(sum_series(5))  # Output: 9\n```\n"], "prompt_tokens": [81], "completion_tokens": [145], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_162_sum_series"}
{"name": "mbpp_224_count_Set_Bits", "language": "Python3", "prompt": "def count_Set_Bits(n: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Set_Bits", "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(4) == 1\n    assert candidate(6) == 2\n\ndef test_check():\n    check(count_Set_Bits)\n\ntest_check()\n", "sample_io": ["assert count_Set_Bits(2) == 1"], "source_codes": ["\ndef count_Set_Bits(n: int) -> int:\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n\n\n"], "responses": ["```python\ndef count_Set_Bits(n: int) -> int:\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n```"], "prompt_tokens": [59], "completion_tokens": [76], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_224_count_Set_Bits"}
{"name": "mbpp_309_maximum", "language": "Python3", "prompt": "def maximum(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a python function to find the maximum of two numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "maximum", "test": "def check(candidate):\n    assert candidate(5, 10) == 10\n    assert candidate(-1, -2) == -1\n    assert candidate(9, 7) == 9\n\ndef test_check():\n    check(maximum)\n\ntest_check()\n", "sample_io": ["assert maximum(5, 10) == 10"], "source_codes": ["\ndef maximum(a: int, b: int) -> int:\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    return a if a > b else b\n\n\n"], "responses": ["```python\ndef maximum(a: int, b: int) -> int:\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    return a if a > b else b\n```"], "prompt_tokens": [48], "completion_tokens": [44], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_309_maximum"}
{"name": "mbpp_632_move_zero", "language": "Python3", "prompt": "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "move_zero", "test": "def check(candidate):\n    assert candidate([1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0]\n    assert candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0]\n    assert candidate([0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0]\n\ndef test_check():\n    check(move_zero)\n\ntest_check()\n", "sample_io": ["assert move_zero([1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0]"], "source_codes": ["\nfrom typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize a pointer for the position to place non-zero elements\n    insert_pos = 0\n    \n    # Move all non-zero elements to the front\n    for num in num_list:\n        if num != 0:\n            num_list[insert_pos] = num\n            insert_pos += 1\n    \n    # Fill the rest of the list with zeros\n    while insert_pos < len(num_list):\n        num_list[insert_pos] = 0\n        insert_pos += 1\n    \n    return num_list\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize a pointer for the position to place non-zero elements\n    insert_pos = 0\n    \n    # Move all non-zero elements to the front\n    for num in num_list:\n        if num != 0:\n            num_list[insert_pos] = num\n            insert_pos += 1\n    \n    # Fill the rest of the list with zeros\n    while insert_pos < len(num_list):\n        num_list[insert_pos] = 0\n        insert_pos += 1\n    \n    return num_list\n```"], "prompt_tokens": [57], "completion_tokens": [149], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_632_move_zero"}
{"name": "mbpp_168_frequency", "language": "Python3", "prompt": "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to count the number of occurrences of a number in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "frequency", "test": "def check(candidate):\n    assert candidate([1, 2, 3], 4) == 0\n    assert candidate([1, 2, 2, 3, 3, 3, 4], 3) == 3\n    assert candidate([0, 1, 2, 3, 1, 2], 1) == 2\n\ndef test_check():\n    check(frequency)\n\ntest_check()\n", "sample_io": ["assert frequency([1, 2, 3], 4) == 0"], "source_codes": ["\nfrom typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    return a.count(x)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    return a.count(x)\n```"], "prompt_tokens": [59], "completion_tokens": [51], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_168_frequency"}
{"name": "mbpp_749_sort_numeric_strings", "language": "Python3", "prompt": "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_numeric_strings", "test": "def check(candidate):\n    assert candidate(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    assert candidate(['2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2']) == [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n    assert candidate(['1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11']) == [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n\ndef test_check():\n    check(sort_numeric_strings)\n\ntest_check()\n", "sample_io": ["assert sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]"], "source_codes": ["\nfrom typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert each numeric string to an integer and sort\n    return sorted(int(num) for num in nums_str)\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    nums = [\"10\", \"1\", \"3\", \"20\", \"11\"]\n    print(sort_numeric_strings(nums))  # Output: [1, 3, 10, 11, 20]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert each numeric string to an integer and sort\n    return sorted(int(num) for num in nums_str)\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    nums = [\"10\", \"1\", \"3\", \"20\", \"11\"]\n    print(sort_numeric_strings(nums))  # Output: [1, 3, 10, 11, 20]\n```"], "prompt_tokens": [75], "completion_tokens": [123], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_749_sort_numeric_strings"}
{"name": "mbpp_97_frequency_lists", "language": "Python3", "prompt": "from typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    \"\"\"\n\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "frequency_lists", "test": "def check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == { 1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1 }\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == { 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1 }\n    assert candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]) == { 20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1 }\n\ndef test_check():\n    check(frequency_lists)\n\ntest_check()\n", "sample_io": ["assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == { 1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1 }"], "source_codes": ["\nfrom typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq = {}\n    for sublist in list1:\n        for item in sublist:\n            freq[item] = freq.get(item, 0) + 1\n    return freq\n\n\n"], "responses": ["```python\nfrom typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq = {}\n    for sublist in list1:\n        for item in sublist:\n            freq[item] = freq.get(item, 0) + 1\n    return freq\n```"], "prompt_tokens": [67], "completion_tokens": [90], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_97_frequency_lists"}
{"name": "mbpp_429_and_tuples", "language": "Python3", "prompt": "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to extract the elementwise and tuples from the given two tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "and_tuples", "test": "def check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    assert candidate((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\n    assert candidate((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n\ndef test_check():\n    check(and_tuples)\n\ntest_check()\n", "sample_io": ["assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"], "source_codes": ["\nfrom typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n\n# Example usage:\n# test_tup1 = (1, 0, 3, 4)\n# test_tup2 = (0, 1, 2, 4)\n# print(and_tuples(test_tup1, test_tup2))  # Output: (0, 0, 2, 4)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n\n# Example usage:\n# test_tup1 = (1, 0, 3, 4)\n# test_tup2 = (0, 1, 2, 4)\n# print(and_tuples(test_tup1, test_tup2))  # Output: (0, 0, 2, 4)\n```"], "prompt_tokens": [85], "completion_tokens": [163], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_429_and_tuples"}
{"name": "mbpp_759_is_decimal", "language": "Python3", "prompt": "def is_decimal(num: str) -> bool:\n    \"\"\"\n\tWrite a function to check whether a given string is a decimal number with a precision of 2.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_decimal", "test": "def check(candidate):\n    assert candidate('123.11') == True\n    assert candidate('e666.86') == False\n    assert candidate('3.124587') == False\n    assert candidate('1.11') == True\n    assert candidate('1.1.11') == False\n\ndef test_check():\n    check(is_decimal)\n\ntest_check()\n", "sample_io": ["assert is_decimal('123.11') == True"], "source_codes": ["\ndef is_decimal(num: str) -> bool:\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    import re\n    # Regex explanation:\n    # ^                     : start of string\n    # [+-]?                 : optional sign\n    # \\d+                   : one or more digits before decimal point\n    # (\\.\\d{2})?            : optional decimal point followed exactly by 2 digits\n    # $                     : end of string\n    pattern = r'^[+-]?\\d+(\\.\\d{2})?$'\n    return bool(re.match(pattern, num))\n\n\n"], "responses": ["```python\ndef is_decimal(num: str) -> bool:\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    import re\n    # Regex explanation:\n    # ^                     : start of string\n    # [+-]?                 : optional sign\n    # \\d+                   : one or more digits before decimal point\n    # (\\.\\d{2})?            : optional decimal point followed exactly by 2 digits\n    # $                     : end of string\n    pattern = r'^[+-]?\\d+(\\.\\d{2})?$'\n    return bool(re.match(pattern, num))\n```"], "prompt_tokens": [53], "completion_tokens": [139], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_759_is_decimal"}
{"name": "mbpp_599_sum_average", "language": "Python3", "prompt": "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    \"\"\"\n\tWrite a function to find sum and average of first n natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_average", "test": "def check(candidate):\n    assert candidate(10) == (55, 5.5)\n    assert candidate(15) == (120, 8.0)\n    assert candidate(20) == (210, 10.5)\n\ndef test_check():\n    check(sum_average)\n\ntest_check()\n", "sample_io": ["assert sum_average(10) == (55, 5.5)"], "source_codes": ["\nfrom typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total_sum = number * (number + 1) // 2\n    average = total_sum / number if number > 0 else 0\n    return total_sum, average\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total_sum = number * (number + 1) // 2\n    average = total_sum / number if number > 0 else 0\n    return total_sum, average\n```"], "prompt_tokens": [55], "completion_tokens": [80], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_599_sum_average"}
{"name": "mbpp_804_is_product_even", "language": "Python3", "prompt": "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check whether the product of numbers in a list is even or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_804_is_product_even.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_product_even", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == True\n    assert candidate([1, 2, 1, 4]) == True\n    assert candidate([1, 1]) == False\n\ndef test_check():\n    check(is_product_even)\n\ntest_check()\n", "sample_io": ["assert is_product_even([1, 2, 3]) == True"], "source_codes": ["\nfrom typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    # If any number in the list is even, the product will be even\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    # If any number in the list is even, the product will be even\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False\n```"], "prompt_tokens": [58], "completion_tokens": [85], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_804_is_product_even"}
{"name": "mbpp_103_eulerian_num", "language": "Python3", "prompt": "def eulerian_num(n: int, m: int) -> int:\n    \"\"\"\n\tWrite a function to find the Eulerian number a(n, m).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "eulerian_num", "test": "def check(candidate):\n    assert candidate(3, 1) == 4\n    assert candidate(4, 1) == 11\n    assert candidate(5, 3) == 26\n\ndef test_check():\n    check(eulerian_num)\n\ntest_check()\n", "sample_io": ["assert eulerian_num(3, 1) == 4"], "source_codes": ["\ndef eulerian_num(n: int, m: int) -> int:\n    \"\"\"\n    Calculate the Eulerian number a(n, m), which counts the number of permutations of \n    {1, 2, ..., n} with exactly m ascents.\n\n    Parameters:\n    n (int): The size of the permutation.\n    m (int): The number of ascents.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n    \"\"\"\n\n    # Validate inputs\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1 if m == 0 else 0\n\n    # Create a 2D list to store Eulerian numbers, initializing with 0\n    dp = [[0] * n for _ in range(n+1)]\n    dp[0][0] = 1  # Base case\n\n    for i in range(1, n+1):\n        for j in range(i):\n            val1 = (j + 1) * dp[i-1][j] if j < i else 0\n            val2 = (i - j) * dp[i-1][j-1] if j > 0 else 0\n            dp[i][j] = val1 + val2\n\n    return dp[n][m]\n\n\n"], "responses": ["```python\ndef eulerian_num(n: int, m: int) -> int:\n    \"\"\"\n    Calculate the Eulerian number a(n, m), which counts the number of permutations of \n    {1, 2, ..., n} with exactly m ascents.\n\n    Parameters:\n    n (int): The size of the permutation.\n    m (int): The number of ascents.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n    \"\"\"\n\n    # Validate inputs\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1 if m == 0 else 0\n\n    # Create a 2D list to store Eulerian numbers, initializing with 0\n    dp = [[0] * n for _ in range(n+1)]\n    dp[0][0] = 1  # Base case\n\n    for i in range(1, n+1):\n        for j in range(i):\n            val1 = (j + 1) * dp[i-1][j] if j < i else 0\n            val2 = (i - j) * dp[i-1][j-1] if j > 0 else 0\n            dp[i][j] = val1 + val2\n\n    return dp[n][m]\n```"], "prompt_tokens": [52], "completion_tokens": [282], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_103_eulerian_num"}
{"name": "mbpp_391_convert_list_dictionary", "language": "Python3", "prompt": "from typing import List, Dict\n\ndef convert_list_dictionary(l1: List[str], l2: List[str], l3: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    \"\"\"\n\tWrite a function to convert more than one list to nested dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "convert_list_dictionary", "test": "def check(candidate):\n    assert candidate(['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92]) == [{ 'S001': { 'Adina Park': 85 } }, { 'S002': { 'Leyton Marsh': 98 } }, { 'S003': { 'Duncan Boyle': 89 } }, { 'S004': { 'Saim Richards': 92 } }]\n    assert candidate(['abc', 'def', 'ghi', 'jkl'], ['python', 'program', 'language', 'programs'], [100, 200, 300, 400]) == [{ 'abc': { 'python': 100 } }, { 'def': { 'program': 200 } }, { 'ghi': { 'language': 300 } }, { 'jkl': { 'programs': 400 } }]\n    assert candidate(['A1', 'A2', 'A3', 'A4'], ['java', 'C', 'C++', 'DBMS'], [10, 20, 30, 40]) == [{ 'A1': { 'java': 10 } }, { 'A2': { 'C': 20 } }, { 'A3': { 'C++': 30 } }, { 'A4': { 'DBMS': 40 } }]\n\ndef test_check():\n    check(convert_list_dictionary)\n\ntest_check()\n", "sample_io": ["assert convert_list_dictionary(['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92]) == [{ 'S001': { 'Adina Park': 85 } }]"], "source_codes": ["\nfrom typing import List, Dict\n\ndef convert_list_dictionary(l1: List[str], l2: List[str], l3: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = []\n    for key1, key2, val in zip(l1, l2, l3):\n        result.append({key1: {key2: val}})\n    return result\n\n\n# Example usage:\nl1 = ['A', 'B', 'C']\nl2 = ['a', 'b', 'c']\nl3 = [1, 2, 3]\nprint(convert_list_dictionary(l1, l2, l3))\n# Output: [{'A': {'a': 1}}, {'B': {'b': 2}}, {'C': {'c': 3}}]\n\n\n"], "responses": ["```python\nfrom typing import List, Dict\n\ndef convert_list_dictionary(l1: List[str], l2: List[str], l3: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = []\n    for key1, key2, val in zip(l1, l2, l3):\n        result.append({key1: {key2: val}})\n    return result\n\n\n# Example usage:\nl1 = ['A', 'B', 'C']\nl2 = ['a', 'b', 'c']\nl3 = [1, 2, 3]\nprint(convert_list_dictionary(l1, l2, l3))\n# Output: [{'A': {'a': 1}}, {'B': {'b': 2}}, {'C': {'c': 3}}]\n```"], "prompt_tokens": [77], "completion_tokens": [188], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_391_convert_list_dictionary"}
{"name": "mbpp_635_heap_sort", "language": "Python3", "prompt": "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "heap_sort", "test": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert candidate([7, 1, 9, 5]) == [1, 5, 7, 9]\n\ndef test_check():\n    check(heap_sort)\n\ntest_check()\n", "sample_io": ["assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"], "source_codes": ["\nfrom typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to sort the given list using heap sort algorithm.\n    \"\"\"\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        # Check if left child exists and is greater than root\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        # Check if right child exists and is greater than largest so far\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        # Change root if needed\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            # Heapify the root again if needed\n            heapify(arr, n, largest)\n\n    arr = iterable[:]  # Make a copy to avoid modifying the original list\n    n = len(arr)\n\n    # Build a maxheap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract elements one by one\n    for i in range(n - 1, 0, -1):\n        # Move current root to end\n        arr[0], arr[i] = arr[i], arr[0]\n        # Call max heapify on the reduced heap\n        heapify(arr, i, 0)\n\n    return arr\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to sort the given list using heap sort algorithm.\n    \"\"\"\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        # Check if left child exists and is greater than root\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        # Check if right child exists and is greater than largest so far\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        # Change root if needed\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            # Heapify the root again if needed\n            heapify(arr, n, largest)\n\n    arr = iterable[:]  # Make a copy to avoid modifying the original list\n    n = len(arr)\n\n    # Build a maxheap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract elements one by one\n    for i in range(n - 1, 0, -1):\n        # Move current root to end\n        arr[0], arr[i] = arr[i], arr[0]\n        # Call max heapify on the reduced heap\n        heapify(arr, i, 0)\n\n    return arr\n```"], "prompt_tokens": [50], "completion_tokens": [322], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_635_heap_sort"}
{"name": "mbpp_270_sum_even_and_even_index", "language": "Python3", "prompt": "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of even numbers at even positions of a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_even_and_even_index", "test": "def check(candidate):\n    assert candidate([5, 6, 12, 1, 18, 8]) == 30\n    assert candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\n    assert candidate([5, 6, 12, 1]) == 12\n\ndef test_check():\n    check(sum_even_and_even_index)\n\ntest_check()\n", "sample_io": ["assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30"], "source_codes": ["\nfrom typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    return sum(num for idx, num in enumerate(arr) if idx % 2 == 0 and num % 2 == 0)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    return sum(num for idx, num in enumerate(arr) if idx % 2 == 0 and num % 2 == 0)\n```"], "prompt_tokens": [60], "completion_tokens": [75], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_270_sum_even_and_even_index"}
{"name": "mbpp_787_text_match_three", "language": "Python3", "prompt": "def text_match_three(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an a followed by three 'b'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_three", "test": "def check(candidate):\n    assert candidate('ac') == False\n    assert candidate('dc') == False\n    assert candidate('abbbba') == True\n    assert candidate('caacabbbba') == True\n\ndef test_check():\n    check(text_match_three)\n\ntest_check()\n", "sample_io": ["assert text_match_three('ac') == False"], "source_codes": ["\nimport re\n\ndef text_match_three(text: str) -> bool:\n    \"\"\"\n    Write a function that matches a string that has an 'a' followed by three 'b's.\n    \"\"\"\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_three(text: str) -> bool:\n    \"\"\"\n    Write a function that matches a string that has an 'a' followed by three 'b's.\n    \"\"\"\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))\n```"], "prompt_tokens": [51], "completion_tokens": [61], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_787_text_match_three"}
{"name": "mbpp_765_is_polite", "language": "Python3", "prompt": "def is_polite(n: int) -> int:\n    \"\"\"\n\tWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_polite", "test": "def check(candidate):\n    assert candidate(7) == 11\n    assert candidate(4) == 7\n    assert candidate(9) == 13\n\ndef test_check():\n    check(is_polite)\n\ntest_check()\n", "sample_io": ["assert is_polite(7) == 11"], "source_codes": ["\ndef is_polite(n: int) -> int:\n    \"\"\"\n    Write a function to find nth polite number.\n    A polite number is a positive integer that can be expressed as the sum of one or more consecutive positive integers.\n    Note:\n    - All positive integers except powers of 2 are polite numbers.\n    - The nth polite number is the nth number in the sequence of polite numbers.\n\n    Approach:\n    - We'll generate numbers starting from 1 upwards.\n    - Skip powers of 2 (since they are not polite).\n    - Count the polite numbers encountered.\n    - When we reach the nth polite number, return it.\n\n    This is efficient enough for moderate n.\n    \"\"\"\n\n    count = 0\n    num = 1\n    while True:\n        # Check if num is a power of 2\n        if (num & (num - 1)) != 0:  # not a power of 2 => polite\n            count += 1\n            if count == n:\n                return num\n        num += 1\n\n\n# Example usage:\n# print(is_polite(10))\n\n\n"], "responses": ["```python\ndef is_polite(n: int) -> int:\n    \"\"\"\n    Write a function to find nth polite number.\n    A polite number is a positive integer that can be expressed as the sum of one or more consecutive positive integers.\n    Note:\n    - All positive integers except powers of 2 are polite numbers.\n    - The nth polite number is the nth number in the sequence of polite numbers.\n\n    Approach:\n    - We'll generate numbers starting from 1 upwards.\n    - Skip powers of 2 (since they are not polite).\n    - Count the polite numbers encountered.\n    - When we reach the nth polite number, return it.\n\n    This is efficient enough for moderate n.\n    \"\"\"\n\n    count = 0\n    num = 1\n    while True:\n        # Check if num is a power of 2\n        if (num & (num - 1)) != 0:  # not a power of 2 => polite\n            count += 1\n            if count == n:\n                return num\n        num += 1\n\n\n# Example usage:\n# print(is_polite(10))\n```\n"], "prompt_tokens": [54], "completion_tokens": [234], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_765_is_polite"}
{"name": "mbpp_459_remove_uppercase", "language": "Python3", "prompt": "def remove_uppercase(str1: str) -> str:\n    \"\"\"\n\tWrite a function to remove uppercase substrings from a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_uppercase", "test": "def check(candidate):\n    assert candidate('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert candidate('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\n    assert candidate('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n\ndef test_check():\n    check(remove_uppercase)\n\ntest_check()\n", "sample_io": ["assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"], "source_codes": ["\ndef remove_uppercase(str1: str) -> str:\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    import re\n    # Remove all consecutive uppercase substrings\n    return re.sub(r'[A-Z]+', '', str1)\n\n\n"], "responses": ["```python\ndef remove_uppercase(str1: str) -> str:\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    import re\n    # Remove all consecutive uppercase substrings\n    return re.sub(r'[A-Z]+', '', str1)\n```"], "prompt_tokens": [48], "completion_tokens": [61], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_459_remove_uppercase"}
{"name": "mbpp_16_text_lowercase_underscore", "language": "Python3", "prompt": "def text_lowercase_underscore(text: str) -> bool:\n    \"\"\"\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_lowercase_underscore", "test": "def check(candidate):\n    assert candidate('aab_cbbbc') == True\n    assert candidate('aab_Abbbc') == False\n    assert candidate('Aaab_abbbc') == False\n\ndef test_check():\n    check(text_lowercase_underscore)\n\ntest_check()\n", "sample_io": ["assert text_lowercase_underscore('aab_cbbbc') == True"], "source_codes": ["\nimport re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    \"\"\"\n    Write a function that returns true if the input string contains sequences \n    of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    # This regex looks for one or more lowercase letters, followed by underscore(s), \n    # followed by one or more lowercase letters\n    pattern = r'[a-z]+(_[a-z]+)+'\n    return bool(re.search(pattern, text))\n\n\n"], "responses": ["```python\nimport re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    \"\"\"\n    Write a function that returns true if the input string contains sequences \n    of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    # This regex looks for one or more lowercase letters, followed by underscore(s), \n    # followed by one or more lowercase letters\n    pattern = r'[a-z]+(_[a-z]+)+'\n    return bool(re.search(pattern, text))\n```"], "prompt_tokens": [59], "completion_tokens": [101], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_16_text_lowercase_underscore"}
{"name": "mbpp_731_lateralsurface_cone", "language": "Python3", "prompt": "def lateralsurface_cone(r: int, h: int) -> float:\n    \"\"\"\n\tWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lateralsurface_cone", "test": "def check(candidate):\n    assert candidate(5, 12) == 204.20352248333654\n    assert candidate(10, 15) == 566.3586699569488\n    assert candidate(19, 17) == 1521.8090132193388\n\ndef test_check():\n    check(lateralsurface_cone)\n\ntest_check()\n", "sample_io": ["assert lateralsurface_cone(5, 12) == 204.20352248333654"], "source_codes": ["\nimport math\n\ndef lateralsurface_cone(r: int, h: int) -> float:\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \n    Lateral surface area = \u03c0 * r * l\n    where l is the slant height = sqrt(r^2 + h^2)\n    \"\"\"\n    l = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * l\n    return lateral_surface_area\n\n\n"], "responses": ["```python\nimport math\n\ndef lateralsurface_cone(r: int, h: int) -> float:\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \n    Lateral surface area = \u03c0 * r * l\n    where l is the slant height = sqrt(r^2 + h^2)\n    \"\"\"\n    l = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * l\n    return lateral_surface_area\n```"], "prompt_tokens": [60], "completion_tokens": [111], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_731_lateralsurface_cone"}
{"name": "mbpp_802_count_rotation", "language": "Python3", "prompt": "from typing import List\n\ndef count_rotation(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_rotation", "test": "def check(candidate):\n    assert candidate([3, 2, 1]) == 1\n    assert candidate([4, 5, 1, 2, 3]) == 2\n    assert candidate([7, 8, 9, 1, 2, 3]) == 3\n    assert candidate([1, 2, 3]) == 0\n    assert candidate([1, 3, 2]) == 2\n\ndef test_check():\n    check(count_rotation)\n\ntest_check()\n", "sample_io": ["assert count_rotation([3, 2, 1]) == 1"], "source_codes": ["\nfrom typing import List\n\ndef count_rotation(arr: List[int]) -> int:\n    \"\"\"\n    Count the number of rotations in a rotated sorted array.\n    \n    The number of rotations is the index of the minimum element.\n    If the array is not rotated (already sorted), the count is 0.\n    \n    Args:\n    arr (List[int]): The input rotated sorted array\n    \n    Returns:\n    int: The count of rotations\n    \"\"\"\n    low, high = 0, len(arr) - 1\n    \n    # Handle case when array is not rotated at all\n    if arr[low] <= arr[high]:\n        return 0\n    \n    while low <= high:\n        mid = (low + high) // 2\n        next_idx = (mid + 1) % len(arr)\n        prev_idx = (mid - 1 + len(arr)) % len(arr)\n        \n        # Check if mid element is the minimum element\n        if arr[mid] <= arr[next_idx] and arr[mid] <= arr[prev_idx]:\n            return mid\n        \n        # Decide which half to pick for the next step\n        if arr[mid] <= arr[high]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    \n    return 0  # fallback (in case no rotation is found)\n\n# Example Usage:\n# arr = [15, 18, 2, 3, 6, 12]\n# print(count_rotation(arr))  # Output: 2\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_rotation(arr: List[int]) -> int:\n    \"\"\"\n    Count the number of rotations in a rotated sorted array.\n    \n    The number of rotations is the index of the minimum element.\n    If the array is not rotated (already sorted), the count is 0.\n    \n    Args:\n    arr (List[int]): The input rotated sorted array\n    \n    Returns:\n    int: The count of rotations\n    \"\"\"\n    low, high = 0, len(arr) - 1\n    \n    # Handle case when array is not rotated at all\n    if arr[low] <= arr[high]:\n        return 0\n    \n    while low <= high:\n        mid = (low + high) // 2\n        next_idx = (mid + 1) % len(arr)\n        prev_idx = (mid - 1 + len(arr)) % len(arr)\n        \n        # Check if mid element is the minimum element\n        if arr[mid] <= arr[next_idx] and arr[mid] <= arr[prev_idx]:\n            return mid\n        \n        # Decide which half to pick for the next step\n        if arr[mid] <= arr[high]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    \n    return 0  # fallback (in case no rotation is found)\n\n# Example Usage:\n# arr = [15, 18, 2, 3, 6, 12]\n# print(count_rotation(arr))  # Output: 2\n```\n"], "prompt_tokens": [78], "completion_tokens": [317], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_802_count_rotation"}
{"name": "mbpp_782_odd_length_sum", "language": "Python3", "prompt": "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_length_sum", "test": "def check(candidate):\n    assert candidate([1, 2, 4]) == 14\n    assert candidate([1, 2, 1, 2]) == 15\n    assert candidate([1, 7]) == 8\n\ndef test_check():\n    check(odd_length_sum)\n\ntest_check()\n", "sample_io": ["assert odd_length_sum([1, 2, 4]) == 14"], "source_codes": ["\nfrom typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    total_sum = 0\n    n = len(arr)\n    \n    for start in range(n):\n        for length in range(1, n - start + 1, 2):  # only odd lengths (1,3,5...)\n            subarray = arr[start:start+length]\n            total_sum += sum(subarray)\n    \n    return total_sum\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [1, 4, 2, 5, 3]\n    print(odd_length_sum(arr))  # Output: 58\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    total_sum = 0\n    n = len(arr)\n    \n    for start in range(n):\n        for length in range(1, n - start + 1, 2):  # only odd lengths (1,3,5...)\n            subarray = arr[start:start+length]\n            total_sum += sum(subarray)\n    \n    return total_sum\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [1, 4, 2, 5, 3]\n    print(odd_length_sum(arr))  # Output: 58\n```\n"], "prompt_tokens": [73], "completion_tokens": [181], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_782_odd_length_sum"}
{"name": "mbpp_470_add_pairwise", "language": "Python3", "prompt": "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_pairwise", "test": "def check(candidate):\n    assert candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    assert candidate((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n    assert candidate((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n\ndef test_check():\n    check(add_pairwise)\n\ntest_check()\n", "sample_io": ["assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)"], "source_codes": ["\nfrom typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup) - 1))\n\n# Example usage:\n# test_tup = (1, 2, 3, 4, 5)\n# print(add_pairwise(test_tup))  # Output: (3, 5, 7, 9)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup) - 1))\n\n# Example usage:\n# test_tup = (1, 2, 3, 4, 5)\n# print(add_pairwise(test_tup))  # Output: (3, 5, 7, 9)\n```"], "prompt_tokens": [74], "completion_tokens": [138], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_470_add_pairwise"}
{"name": "mbpp_17_square_perimeter", "language": "Python3", "prompt": "def square_perimeter(a: int) -> int:\n    \"\"\"\n\tWrite a function that returns the perimeter of a square given its side length as input.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "square_perimeter", "test": "def check(candidate):\n    assert candidate(10) == 40\n    assert candidate(5) == 20\n    assert candidate(4) == 16\n\ndef test_check():\n    check(square_perimeter)\n\ntest_check()\n", "sample_io": ["assert square_perimeter(10) == 40"], "source_codes": ["\ndef square_perimeter(a: int) -> int:\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a\n\n\n"], "responses": ["```python\ndef square_perimeter(a: int) -> int:\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a\n```"], "prompt_tokens": [51], "completion_tokens": [44], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_17_square_perimeter"}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "Python3", "prompt": "def all_Bits_Set_In_The_Given_Range(n: int, l: int, r: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether all the bits are unset in the given range or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "all_Bits_Set_In_The_Given_Range", "test": "def check(candidate):\n    assert candidate(4, 1, 2) == True\n    assert candidate(17, 2, 4) == True\n    assert candidate(39, 4, 6) == False\n\ndef test_check():\n    check(all_Bits_Set_In_The_Given_Range)\n\ntest_check()\n", "sample_io": ["assert all_Bits_Set_In_The_Given_Range(4, 1, 2) == True"], "source_codes": ["\ndef all_Bits_Set_In_The_Given_Range(n: int, l: int, r: int) -> bool:\n    \"\"\"\n    Check whether all the bits are set (1) in the given range [l, r] (1-based indexing from right to left).\n    \n    Parameters:\n    n (int): The integer number to check.\n    l (int): The starting bit position (1-based, from right).\n    r (int): The ending bit position (1-based, from right).\n    \n    Returns:\n    bool: True if all bits in the range [l, r] are set to 1, otherwise False.\n    \"\"\"\n    # Create a mask with 1s between bit position l and r\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    # Check if bits in n at positions [l, r] are all set\n    return (n & mask) == mask\n\n\n"], "responses": ["```python\ndef all_Bits_Set_In_The_Given_Range(n: int, l: int, r: int) -> bool:\n    \"\"\"\n    Check whether all the bits are set (1) in the given range [l, r] (1-based indexing from right to left).\n    \n    Parameters:\n    n (int): The integer number to check.\n    l (int): The starting bit position (1-based, from right).\n    r (int): The ending bit position (1-based, from right).\n    \n    Returns:\n    bool: True if all bits in the range [l, r] are set to 1, otherwise False.\n    \"\"\"\n    # Create a mask with 1s between bit position l and r\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    # Check if bits in n at positions [l, r] are all set\n    return (n & mask) == mask\n```\n"], "prompt_tokens": [69], "completion_tokens": [209], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_228_all_Bits_Set_In_The_Given_Range"}
{"name": "mbpp_240_replace_list", "language": "Python3", "prompt": "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    \"\"\"\n\tWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_240_replace_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_list", "test": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]\n    assert candidate([1, 2, 3, 4, 5], [5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n    assert candidate(['red', 'blue', 'green'], ['yellow']) == ['red', 'blue', 'yellow']\n\ndef test_check():\n    check(replace_list)\n\ntest_check()\n", "sample_io": ["assert replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]"], "source_codes": ["\nfrom typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # If list1 is empty, just return list2 since there's no last element to replace\n    if not list1:\n        return list2.copy()\n    \n    # Replace the last element of list1 with the entire list2\n    return list1[:-1] + list2\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # If list1 is empty, just return list2 since there's no last element to replace\n    if not list1:\n        return list2.copy()\n    \n    # Replace the last element of list1 with the entire list2\n    return list1[:-1] + list2\n```"], "prompt_tokens": [74], "completion_tokens": [120], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_240_replace_list"}
{"name": "mbpp_447_cube_nums", "language": "Python3", "prompt": "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find cubes of individual elements in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cube_nums", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    assert candidate([10, 20, 30]) == [1000, 8000, 27000]\n    assert candidate([12, 15]) == [1728, 3375]\n\ndef test_check():\n    check(cube_nums)\n\ntest_check()\n", "sample_io": ["assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"], "source_codes": ["\nfrom typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [x**3 for x in nums]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [x**3 for x in nums]\n```"], "prompt_tokens": [53], "completion_tokens": [50], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_447_cube_nums"}
{"name": "mbpp_261_division_elements", "language": "Python3", "prompt": "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "division_elements", "test": "def check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)\n    assert candidate((12, 6, 8, 16), (6, 3, 4, 4)) == (2, 2, 2, 4)\n    assert candidate((20, 14, 36, 18), (5, 7, 6, 9)) == (4, 2, 6, 2)\n\ndef test_check():\n    check(division_elements)\n\ntest_check()\n", "sample_io": ["assert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)"], "source_codes": ["\nfrom typing import Tuple\n\ndef division_elements(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    # Using integer division (//). If float division is desired, replace with /\n    return tuple(test_tup1[i] // test_tup2[i] for i in range(4))\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef division_elements(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    # Using integer division (//). If float division is desired, replace with /\n    return tuple(test_tup1[i] // test_tup2[i] for i in range(4))\n```"], "prompt_tokens": [89], "completion_tokens": [115], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_261_division_elements"}
{"name": "mbpp_581_surface_Area", "language": "Python3", "prompt": "def surface_Area(b: int, s: int) -> int:\n    \"\"\"\n\tWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "surface_Area", "test": "def check(candidate):\n    assert candidate(3, 4) == 33\n    assert candidate(4, 5) == 56\n    assert candidate(1, 2) == 5\n\ndef test_check():\n    check(surface_Area)\n\ntest_check()\n", "sample_io": ["assert surface_Area(3, 4) == 33"], "source_codes": ["\nimport math\n\ndef surface_Area(b: int, s: int) -> int:\n    \"\"\"\n    Calculate the surface area of a square pyramid given the base edge length (b) and height (s).\n\n    Parameters:\n    b (int): length of the base edge\n    s (int): height of the pyramid\n\n    Returns:\n    int: surface area of the square pyramid (rounded to nearest integer)\n    \"\"\"\n    # Calculate the slant height l = sqrt((b/2)^2 + s^2)\n    l = math.sqrt((b / 2) ** 2 + s ** 2)\n\n    # Surface area = base area + 4 * triangle area\n    # base area = b^2\n    # triangle area = (1/2) * base * slant height = (1/2) * b * l\n    surface_area = b**2 + 2 * b * l\n\n    return round(surface_area)\n\n\n"], "responses": ["```python\nimport math\n\ndef surface_Area(b: int, s: int) -> int:\n    \"\"\"\n    Calculate the surface area of a square pyramid given the base edge length (b) and height (s).\n\n    Parameters:\n    b (int): length of the base edge\n    s (int): height of the pyramid\n\n    Returns:\n    int: surface area of the square pyramid (rounded to nearest integer)\n    \"\"\"\n    # Calculate the slant height l = sqrt((b/2)^2 + s^2)\n    l = math.sqrt((b / 2) ** 2 + s ** 2)\n\n    # Surface area = base area + 4 * triangle area\n    # base area = b^2\n    # triangle area = (1/2) * base * slant height = (1/2) * b * l\n    surface_area = b**2 + 2 * b * l\n\n    return round(surface_area)\n```"], "prompt_tokens": [59], "completion_tokens": [202], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_581_surface_Area"}
{"name": "mbpp_283_validate", "language": "Python3", "prompt": "def validate(n: int) -> bool:\n    \"\"\"\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "validate", "test": "def check(candidate):\n    assert candidate(1234) == True\n    assert candidate(51241) == False\n    assert candidate(321) == True\n\ndef test_check():\n    check(validate)\n\ntest_check()\n", "sample_io": ["assert validate(1234) == True"], "source_codes": ["\ndef validate(n: int) -> bool:\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit \n    in the integer is less than or equal to the digit itself.\n    \"\"\"\n    from collections import Counter\n    \n    # Convert the integer to string to count digits\n    digits = str(abs(n))\n    freq = Counter(digits)\n    \n    # Check condition for each digit\n    for digit_char, count in freq.items():\n        digit = int(digit_char)\n        if count > digit:\n            return False\n    return True\n\n\n"], "responses": ["```python\ndef validate(n: int) -> bool:\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit \n    in the integer is less than or equal to the digit itself.\n    \"\"\"\n    from collections import Counter\n    \n    # Convert the integer to string to count digits\n    digits = str(abs(n))\n    freq = Counter(digits)\n    \n    # Check condition for each digit\n    for digit_char, count in freq.items():\n        digit = int(digit_char)\n        if count > digit:\n            return False\n    return True\n```"], "prompt_tokens": [61], "completion_tokens": [120], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_283_validate"}
{"name": "mbpp_284_check_element", "language": "Python3", "prompt": "from typing import List, Any\n\ndef check_element(list: List[Any], element: Any) -> bool:\n    \"\"\"\n\tWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_284_check_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_element", "test": "def check(candidate):\n    assert candidate(['green', 'orange', 'black', 'white'], 'blue') == False\n    assert candidate([1, 2, 3, 4], 7) == False\n    assert candidate(['green', 'green', 'green', 'green'], 'green') == True\n\ndef test_check():\n    check(check_element)\n\ntest_check()\n", "sample_io": ["assert check_element(['green', 'orange', 'black', 'white'], 'blue') == False"], "source_codes": ["\nfrom typing import List, Any\n\ndef check_element(lst: List[Any], element: Any) -> bool:\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(item == element for item in lst)\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef check_element(lst: List[Any], element: Any) -> bool:\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(item == element for item in lst)\n```"], "prompt_tokens": [70], "completion_tokens": [67], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_284_check_element"}
{"name": "mbpp_101_kth_element", "language": "Python3", "prompt": "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    \"\"\"\n\tWrite a function to find the kth element in the given array using 1-based indexing.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "kth_element", "test": "def check(candidate):\n    assert candidate([12, 3, 5, 7, 19], 2) == 3\n    assert candidate([17, 24, 8, 23], 3) == 8\n    assert candidate([16, 21, 25, 36, 4], 4) == 36\n\ndef test_check():\n    check(kth_element)\n\ntest_check()\n", "sample_io": ["assert kth_element([12, 3, 5, 7, 19], 2) == 3"], "source_codes": ["\nfrom typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    # Since k is 1-based indexing, subtract 1 to get the 0-based index\n    if 1 <= k <= len(arr):\n        return arr[k-1]\n    else:\n        raise IndexError(\"k is out of range of the array length\")\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    # Since k is 1-based indexing, subtract 1 to get the 0-based index\n    if 1 <= k <= len(arr):\n        return arr[k-1]\n    else:\n        raise IndexError(\"k is out of range of the array length\")\n```"], "prompt_tokens": [63], "completion_tokens": [104], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_101_kth_element"}
{"name": "mbpp_461_upper_ctr", "language": "Python3", "prompt": "def upper_ctr(str: str) -> int:\n    \"\"\"\n\tWrite a python function to count the upper case characters in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "upper_ctr", "test": "def check(candidate):\n    assert candidate('PYthon') == 1\n    assert candidate('BigData') == 1\n    assert candidate('program') == 0\n\ndef test_check():\n    check(upper_ctr)\n\ntest_check()\n", "sample_io": ["assert upper_ctr('PYthon') == 1"], "source_codes": ["\ndef upper_ctr(s: str) -> int:\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n\n\n"], "responses": ["```python\ndef upper_ctr(s: str) -> int:\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n```"], "prompt_tokens": [48], "completion_tokens": [62], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_461_upper_ctr"}
{"name": "mbpp_593_removezero_ip", "language": "Python3", "prompt": "def removezero_ip(ip: str) -> str:\n    \"\"\"\n\tWrite a function to remove leading zeroes from an ip address.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "removezero_ip", "test": "def check(candidate):\n    assert candidate('216.08.094.196') == '216.8.94.196'\n    assert candidate('12.01.024') == '12.1.24'\n    assert candidate('216.08.094.0196') == '216.8.94.196'\n\ndef test_check():\n    check(removezero_ip)\n\ntest_check()\n", "sample_io": ["assert removezero_ip('216.08.094.196') == '216.8.94.196'"], "source_codes": ["\ndef removezero_ip(ip: str) -> str:\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    # Split the IP address into its parts\n    parts = ip.split('.')\n    # Remove leading zeros from each part and convert back to string\n    new_parts = [str(int(part)) for part in parts]\n    # Join the parts back into an IP address string\n    return '.'.join(new_parts)\n\n\n"], "responses": ["```python\ndef removezero_ip(ip: str) -> str:\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    # Split the IP address into its parts\n    parts = ip.split('.')\n    # Remove leading zeros from each part and convert back to string\n    new_parts = [str(int(part)) for part in parts]\n    # Join the parts back into an IP address string\n    return '.'.join(new_parts)\n```"], "prompt_tokens": [46], "completion_tokens": [96], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_593_removezero_ip"}
{"name": "mbpp_788_new_tuple", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef new_tuple(test_list: List[str], test_str: str) -> Tuple[str, str, str]:\n    \"\"\"\n\tWrite a function to create a new tuple from the given string and list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "new_tuple", "test": "def check(candidate):\n    assert candidate(['WEB', 'is'], 'best') == ('WEB', 'is', 'best')\n    assert candidate(['We', 'are'], 'Developers') == ('We', 'are', 'Developers')\n    assert candidate(['Part', 'is'], 'Wrong') == ('Part', 'is', 'Wrong')\n\ndef test_check():\n    check(new_tuple)\n\ntest_check()\n", "sample_io": ["assert new_tuple(['WEB', 'is'], 'best') == ('WEB', 'is', 'best')"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef new_tuple(test_list: List[str], test_str: str) -> Tuple[str, str, str]:\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    The tuple contains:\n    - First element: first character of the given string\n    - Second element: last character of the given string\n    - Third element: concatenation of all strings from the given list\n    \"\"\"\n    first_char = test_str[0] if test_str else ''\n    last_char = test_str[-1] if test_str else ''\n    concat_str = ''.join(test_list)\n    return (first_char, last_char, concat_str)\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef new_tuple(test_list: List[str], test_str: str) -> Tuple[str, str, str]:\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    The tuple contains:\n    - First element: first character of the given string\n    - Second element: last character of the given string\n    - Third element: concatenation of all strings from the given list\n    \"\"\"\n    first_char = test_str[0] if test_str else ''\n    last_char = test_str[-1] if test_str else ''\n    concat_str = ''.join(test_list)\n    return (first_char, last_char, concat_str)\n```"], "prompt_tokens": [67], "completion_tokens": [146], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_788_new_tuple"}
{"name": "mbpp_777_find_sum", "language": "Python3", "prompt": "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of non-repeated elements in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_sum", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 1, 1, 4, 5, 6]) == 21\n    assert candidate([1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71\n    assert candidate([12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78\n\ndef test_check():\n    check(find_sum)\n\ntest_check()\n", "sample_io": ["assert find_sum([1, 2, 3, 1, 1, 4, 5, 6]) == 21"], "source_codes": ["\nfrom typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    counts = Counter(arr)\n    return sum(num for num, freq in counts.items() if freq == 1)\n\n\n"], "responses": ["```python\nfrom typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    counts = Counter(arr)\n    return sum(num for num, freq in counts.items() if freq == 1)\n```"], "prompt_tokens": [57], "completion_tokens": [72], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_777_find_sum"}
{"name": "mbpp_586_split_Arr", "language": "Python3", "prompt": "from typing import List\n\ndef split_Arr(l: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "split_Arr", "test": "def check(candidate):\n    assert candidate([12, 10, 5, 6, 52, 36], 2) == [5, 6, 52, 36, 12, 10]\n    assert candidate([1, 2, 3, 4], 1) == [2, 3, 4, 1]\n    assert candidate([0, 1, 2, 3, 4, 5, 6, 7], 3) == [3, 4, 5, 6, 7, 0, 1, 2]\n\ndef test_check():\n    check(split_Arr)\n\ntest_check()\n", "sample_io": ["assert split_Arr([12, 10, 5, 6, 52, 36], 2) == [5, 6, 52, 36, 12, 10]"], "source_codes": ["\nfrom typing import List\n\ndef split_Arr(l: List[int], n: int) -> List[int]:\n    \"\"\"\n    Write a python function to split a list at the nth element and add the first part to the end.\n    \"\"\"\n    return l[n:] + l[:n]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef split_Arr(l: List[int], n: int) -> List[int]:\n    \"\"\"\n    Write a python function to split a list at the nth element and add the first part to the end.\n    \"\"\"\n    return l[n:] + l[:n]\n```"], "prompt_tokens": [68], "completion_tokens": [62], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_586_split_Arr"}
{"name": "mbpp_104_sort_sublists", "language": "Python3", "prompt": "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_sublists", "test": "def check(candidate):\n    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate([[' red ', 'green'], ['blue ', ' black'], [' orange', 'brown']]) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate([['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze']]) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n", "sample_io": ["assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"], "source_codes": ["\nfrom typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    return [sorted(sublist) for sublist in input_list]\n```"], "prompt_tokens": [60], "completion_tokens": [59], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_104_sort_sublists"}
{"name": "mbpp_472_check_Consecutive", "language": "Python3", "prompt": "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_Consecutive", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 2, 3, 5, 6]) == False\n    assert candidate([1, 2, 1]) == False\n\ndef test_check():\n    check(check_Consecutive)\n\ntest_check()\n", "sample_io": ["assert check_Consecutive([1, 2, 3, 4, 5]) == True"], "source_codes": ["\nfrom typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if not l:\n        return False\n    \n    sorted_list = sorted(l)\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i] + 1 != sorted_list[i + 1]:\n            return False\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if not l:\n        return False\n    \n    sorted_list = sorted(l)\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i] + 1 != sorted_list[i + 1]:\n            return False\n    return True\n```"], "prompt_tokens": [56], "completion_tokens": [96], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_472_check_Consecutive"}
{"name": "mbpp_310_string_to_tuple", "language": "Python3", "prompt": "from typing import List\n\ndef string_to_tuple(str1: str) -> List[str]:\n    \"\"\"\n\tWrite a function to convert a given string to a list of characters.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_310_string_to_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "string_to_tuple", "test": "def check(candidate):\n    assert candidate('python 3.0') == ['p', 'y', 't', 'h', 'o', 'n', '3', '.', '0']\n    assert candidate('item1') == ['i', 't', 'e', 'm', '1']\n    assert candidate('15.10') == ['1', '5', '.', '1', '0']\n\ndef test_check():\n    check(string_to_tuple)\n\ntest_check()\n", "sample_io": ["assert string_to_tuple('python 3.0') == ['p', 'y', 't', 'h', 'o', 'n', '3', '.', '0']"], "source_codes": ["\nfrom typing import List\n\ndef string_to_tuple(str1: str) -> List[str]:\n    \"\"\"\n    Write a function to convert a given string to a list of characters.\n    \"\"\"\n    return list(str1)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef string_to_tuple(str1: str) -> List[str]:\n    \"\"\"\n    Write a function to convert a given string to a list of characters.\n    \"\"\"\n    return list(str1)\n```"], "prompt_tokens": [55], "completion_tokens": [47], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_310_string_to_tuple"}
{"name": "mbpp_266_lateralsurface_cube", "language": "Python3", "prompt": "def lateralsurface_cube(l: int) -> int:\n    \"\"\"\n\tWrite a function to find the lateral surface area of a cube given its side length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lateralsurface_cube", "test": "def check(candidate):\n    assert candidate(5) == 100\n    assert candidate(9) == 324\n    assert candidate(10) == 400\n\ndef test_check():\n    check(lateralsurface_cube)\n\ntest_check()\n", "sample_io": ["assert lateralsurface_cube(5) == 100"], "source_codes": ["\ndef lateralsurface_cube(l: int) -> int:\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    The lateral surface area of a cube is the sum of the areas of the four vertical faces.\n    Each face has area = l * l.\n    \n    Parameters:\n    l (int): The length of the side of the cube.\n    \n    Returns:\n    int: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * (l ** 2)\n\n\n"], "responses": ["```python\ndef lateralsurface_cube(l: int) -> int:\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    The lateral surface area of a cube is the sum of the areas of the four vertical faces.\n    Each face has area = l * l.\n    \n    Parameters:\n    l (int): The length of the side of the cube.\n    \n    Returns:\n    int: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * (l ** 2)\n```"], "prompt_tokens": [52], "completion_tokens": [112], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_266_lateralsurface_cube"}
{"name": "mbpp_271_even_Power_Sum", "language": "Python3", "prompt": "def even_Power_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "even_Power_Sum", "test": "def check(candidate):\n    assert candidate(2) == 1056\n    assert candidate(3) == 8832\n    assert candidate(1) == 32\n\ndef test_check():\n    check(even_Power_Sum)\n\ntest_check()\n", "sample_io": ["assert even_Power_Sum(2) == 1056"], "source_codes": ["\ndef even_Power_Sum(n: int) -> int:\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    return sum((2 * i) ** 5 for i in range(1, n + 1))\n\n\n"], "responses": ["```python\ndef even_Power_Sum(n: int) -> int:\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    return sum((2 * i) ** 5 for i in range(1, n + 1))\n```"], "prompt_tokens": [65], "completion_tokens": [74], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_271_even_Power_Sum"}
{"name": "mbpp_238_number_of_substrings", "language": "Python3", "prompt": "def number_of_substrings(str: str) -> int:\n    \"\"\"\n\tWrite a python function to count the number of non-empty substrings of a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "number_of_substrings", "test": "def check(candidate):\n    assert candidate('abc') == 6\n    assert candidate('abcd') == 10\n    assert candidate('abcde') == 15\n\ndef test_check():\n    check(number_of_substrings)\n\ntest_check()\n", "sample_io": ["assert number_of_substrings('abc') == 6"], "source_codes": ["\ndef number_of_substrings(s: str) -> int:\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    n = len(s)\n    # The number of non-empty substrings of a string of length n is n*(n+1)//2\n    return n * (n + 1) // 2\n\n\n"], "responses": ["```python\ndef number_of_substrings(s: str) -> int:\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    n = len(s)\n    # The number of non-empty substrings of a string of length n is n*(n+1)//2\n    return n * (n + 1) // 2\n```"], "prompt_tokens": [53], "completion_tokens": [83], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_238_number_of_substrings"}
{"name": "mbpp_592_sum_Of_product", "language": "Python3", "prompt": "def sum_Of_product(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_Of_product", "test": "def check(candidate):\n    assert candidate(3) == 15\n    assert candidate(4) == 56\n    assert candidate(1) == 1\n\ndef test_check():\n    check(sum_Of_product)\n\ntest_check()\n", "sample_io": ["assert sum_Of_product(3) == 15"], "source_codes": ["\nfrom math import comb\n\ndef sum_Of_product(n: int) -> int:\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial coefficients.\n    \n    For given n, compute:\n    sum_{k=0}^{n-1} C(n, k) * C(n, k+1)\n    where C(n, k) = binomial coefficient \"n choose k\"\n    \"\"\"\n    total = 0\n    for k in range(n):\n        total += comb(n, k) * comb(n, k+1)\n    return total\n\n\n"], "responses": ["```python\nfrom math import comb\n\ndef sum_Of_product(n: int) -> int:\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial coefficients.\n    \n    For given n, compute:\n    sum_{k=0}^{n-1} C(n, k) * C(n, k+1)\n    where C(n, k) = binomial coefficient \"n choose k\"\n    \"\"\"\n    total = 0\n    for k in range(n):\n        total += comb(n, k) * comb(n, k+1)\n    return total\n```\n"], "prompt_tokens": [53], "completion_tokens": [125], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_592_sum_Of_product"}
{"name": "mbpp_74_is_samepatterns", "language": "Python3", "prompt": "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    \"\"\"\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_samepatterns", "test": "def check(candidate):\n    assert candidate(['red', 'green', 'green'], ['a', 'b', 'b']) == True\n    assert candidate(['red', 'green', 'greenn'], ['a', 'b', 'b']) == False\n    assert candidate(['red', 'green', 'greenn'], ['a', 'b']) == False\n\ndef test_check():\n    check(is_samepatterns)\n\ntest_check()\n", "sample_io": ["assert is_samepatterns(['red', 'green', 'green'], ['a', 'b', 'b']) == True"], "source_codes": ["\nfrom typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    \"\"\"\n    Check whether the sequence of colors follows the sequence given in the patterns array.\n    \n    The function returns True if the colors sequence matches the patterns exactly,\n    element-wise, otherwise returns False.\n    \n    Args:\n    colors (List[str]): List of color strings.\n    patterns (List[str]): List of pattern strings.\n    \n    Returns:\n    bool: True if colors follow the pattern sequence exactly, else False.\n    \"\"\"\n    if len(colors) != len(patterns):\n        return False\n    \n    for c, p in zip(colors, patterns):\n        if c != p:\n            return False\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    \"\"\"\n    Check whether the sequence of colors follows the sequence given in the patterns array.\n    \n    The function returns True if the colors sequence matches the patterns exactly,\n    element-wise, otherwise returns False.\n    \n    Args:\n    colors (List[str]): List of color strings.\n    patterns (List[str]): List of pattern strings.\n    \n    Returns:\n    bool: True if colors follow the pattern sequence exactly, else False.\n    \"\"\"\n    if len(colors) != len(patterns):\n        return False\n    \n    for c, p in zip(colors, patterns):\n        if c != p:\n            return False\n    return True\n```\n"], "prompt_tokens": [61], "completion_tokens": [154], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_74_is_samepatterns"}
{"name": "mbpp_415_max_Product", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"\n\tWrite a python function to find a pair with highest product from a given array of integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_Product", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8)\n    assert candidate([0, -1, -2, -4, 5, 0, -6]) == (-4, -6)\n    assert candidate([1, 2, 3]) == (2, 3)\n\ndef test_check():\n    check(max_Product)\n\ntest_check()\n", "sample_io": ["assert max_Product([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8)"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements.\")\n\n    # Initialize variables to track:\n    # max1 and max2: two largest positive numbers\n    # min1 and min2: two smallest (most negative) numbers\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n\n    for num in arr:\n        # Update max1 and max2\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        # Update min1 and min2\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    # Compute product of two largest and two smallest\n    product1 = max1 * max2\n    product2 = min1 * min2\n\n    if product1 >= product2:\n        return (max1, max2)\n    else:\n        return (min1, min2)\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements.\")\n\n    # Initialize variables to track:\n    # max1 and max2: two largest positive numbers\n    # min1 and min2: two smallest (most negative) numbers\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n\n    for num in arr:\n        # Update max1 and max2\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        # Update min1 and min2\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    # Compute product of two largest and two smallest\n    product1 = max1 * max2\n    product2 = min1 * min2\n\n    if product1 >= product2:\n        return (max1, max2)\n    else:\n        return (min1, min2)\n```"], "prompt_tokens": [62], "completion_tokens": [277], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_415_max_Product"}
{"name": "mbpp_781_count_divisors", "language": "Python3", "prompt": "def count_divisors(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_divisors", "test": "def check(candidate):\n    assert candidate(10) == True\n    assert candidate(100) == False\n    assert candidate(125) == True\n\ndef test_check():\n    check(count_divisors)\n\ntest_check()\n", "sample_io": ["assert count_divisors(10) == True"], "source_codes": ["\ndef count_divisors(n: int) -> bool:\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the count of divisors of n is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\n# Example usage\nif __name__ == \"__main__\":\n    num = 10\n    print(f\"The count of divisors of {num} is even: {count_divisors(num)}\")  # True\n\n    num = 16\n    print(f\"The count of divisors of {num} is even: {count_divisors(num)}\")  # False\n\n\n"], "responses": ["```python\ndef count_divisors(n: int) -> bool:\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the count of divisors of n is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\n# Example usage\nif __name__ == \"__main__\":\n    num = 10\n    print(f\"The count of divisors of {num} is even: {count_divisors(num)}\")  # True\n\n    num = 16\n    print(f\"The count of divisors of {num} is even: {count_divisors(num)}\")  # False\n```\n"], "prompt_tokens": [70], "completion_tokens": [190], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_781_count_divisors"}
{"name": "mbpp_441_surfacearea_cube", "language": "Python3", "prompt": "def surfacearea_cube(l: int) -> int:\n    \"\"\"\n\tWrite a function to find the surface area of a cube of a given size.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "surfacearea_cube", "test": "def check(candidate):\n    assert candidate(5) == 150\n    assert candidate(3) == 54\n    assert candidate(10) == 600\n\ndef test_check():\n    check(surfacearea_cube)\n\ntest_check()\n", "sample_io": ["assert surfacearea_cube(5) == 150"], "source_codes": ["\ndef surfacearea_cube(l: int) -> int:\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l * l\n\n\n"], "responses": ["```python\ndef surfacearea_cube(l: int) -> int:\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l * l\n```"], "prompt_tokens": [50], "completion_tokens": [45], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_441_surfacearea_cube"}
{"name": "mbpp_396_check_char", "language": "Python3", "prompt": "def check_char(string: str) -> str:\n    \"\"\"\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_char", "test": "def check(candidate):\n    assert candidate('abba') == 'Valid'\n    assert candidate('a') == 'Valid'\n    assert candidate('abcd') == 'Invalid'\n\ndef test_check():\n    check(check_char)\n\ntest_check()\n", "sample_io": ["assert check_char('abba') == 'Valid'"], "source_codes": ["\ndef check_char(string: str) -> str:\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if not string:\n        return \"The string is empty.\"\n    if string[0] == string[-1]:\n        return \"The string starts and ends with the same character.\"\n    else:\n        return \"The string does not start and end with the same character.\"\n\n\n"], "responses": ["```python\ndef check_char(string: str) -> str:\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if not string:\n        return \"The string is empty.\"\n    if string[0] == string[-1]:\n        return \"The string starts and ends with the same character.\"\n    else:\n        return \"The string does not start and end with the same character.\"\n```"], "prompt_tokens": [52], "completion_tokens": [93], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_396_check_char"}
{"name": "mbpp_757_count_reverse_pairs", "language": "Python3", "prompt": "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    \"\"\"\n\tWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_reverse_pairs", "test": "def check(candidate):\n    assert candidate(['julia', 'best', 'tseb', 'for', 'ailuj']) == 2\n    assert candidate(['geeks', 'best', 'for', 'skeeg']) == 1\n    assert candidate(['makes', 'best', 'sekam', 'for', 'rof']) == 2\n\ndef test_check():\n    check(count_reverse_pairs)\n\ntest_check()\n", "sample_io": ["assert count_reverse_pairs(['julia', 'best', 'tseb', 'for', 'ailuj']) == 2"], "source_codes": ["\nfrom typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    Reference: https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n    count = 0\n    visited = set()\n\n    for s in test_list:\n        rev = s[::-1]\n        # Check if reverse string is already counted and not visited\n        if rev in test_list and (s, rev) not in visited and (rev, s) not in visited:\n            if s != rev or test_list.count(s) > 1:\n                count += 1\n                visited.add((s, rev))\n                visited.add((rev, s))\n    return count\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_list = [\"abc\", \"cba\", \"xyz\", \"zyx\", \"aba\", \"bab\", \"aba\"]\n    print(count_reverse_pairs(test_list))  # Output: 3\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    Reference: https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n    count = 0\n    visited = set()\n\n    for s in test_list:\n        rev = s[::-1]\n        # Check if reverse string is already counted and not visited\n        if rev in test_list and (s, rev) not in visited and (rev, s) not in visited:\n            if s != rev or test_list.count(s) > 1:\n                count += 1\n                visited.add((s, rev))\n                visited.add((rev, s))\n    return count\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_list = [\"abc\", \"cba\", \"xyz\", \"zyx\", \"aba\", \"bab\", \"aba\"]\n    print(count_reverse_pairs(test_list))  # Output: 3\n```\n"], "prompt_tokens": [78], "completion_tokens": [225], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_757_count_reverse_pairs"}
{"name": "mbpp_75_find_tuples", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, int, int]], K: int) -> List[Tuple[int, int, int]]:\n    \"\"\"\n\tWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_tuples", "test": "def check(candidate):\n    assert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n    assert candidate([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\n    assert candidate([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]\n\ndef test_check():\n    check(find_tuples)\n\ntest_check()\n", "sample_io": ["assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, int, int]], K: int) -> List[Tuple[int, int, int]]:\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    return [tup for tup in test_list if all(x % K == 0 for x in tup)]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, int, int]], K: int) -> List[Tuple[int, int, int]]:\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    return [tup for tup in test_list if all(x % K == 0 for x in tup)]\n```"], "prompt_tokens": [79], "completion_tokens": [88], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_75_find_tuples"}
{"name": "mbpp_785_tuple_str_int", "language": "Python3", "prompt": "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, int, int]:\n    \"\"\"\n\tWrite a function to convert tuple string to integer tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tuple_str_int", "test": "def check(candidate):\n    assert candidate('(7, 8, 9)') == (7, 8, 9)\n    assert candidate('(1, 2, 3)') == (1, 2, 3)\n    assert candidate('(4, 5, 6)') == (4, 5, 6)\n    assert candidate('(7, 81, 19)') == (7, 81, 19)\n\ndef test_check():\n    check(tuple_str_int)\n\ntest_check()\n", "sample_io": ["assert tuple_str_int('(7, 8, 9)') == (7, 8, 9)"], "source_codes": ["\nfrom typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, int, int]:\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    Example:\n    Input: \"(1, 2, 3)\"\n    Output: (1, 2, 3)\n    \"\"\"\n    # remove parentheses and spaces, then split by comma\n    parts = test_str.strip(\"()\").split(\",\")\n    # convert each part to int\n    return tuple(int(part.strip()) for part in parts)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, int, int]:\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    Example:\n    Input: \"(1, 2, 3)\"\n    Output: (1, 2, 3)\n    \"\"\"\n    # remove parentheses and spaces, then split by comma\n    parts = test_str.strip(\"()\").split(\",\")\n    # convert each part to int\n    return tuple(int(part.strip()) for part in parts)\n```"], "prompt_tokens": [56], "completion_tokens": [112], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_785_tuple_str_int"}
{"name": "mbpp_776_count_vowels", "language": "Python3", "prompt": "def count_vowels(test_str: str) -> int:\n    \"\"\"\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_vowels", "test": "def check(candidate):\n    assert candidate('bestinstareels') == 7\n    assert candidate('partofthejourneyistheend') == 12\n    assert candidate('amazonprime') == 5\n\ndef test_check():\n    check(count_vowels)\n\ntest_check()\n", "sample_io": ["assert count_vowels('bestinstareels') == 7"], "source_codes": ["\ndef count_vowels(test_str: str) -> int:\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n\n\n"], "responses": ["```python\ndef count_vowels(test_str: str) -> int:\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n```"], "prompt_tokens": [54], "completion_tokens": [103], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_776_count_vowels"}
{"name": "mbpp_277_dict_filter", "language": "Python3", "prompt": "from typing import Dict\n\ndef dict_filter(dict: Dict[str, int], n: int) -> Dict[str, int]:\n    \"\"\"\n\tWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "dict_filter", "test": "def check(candidate):\n    assert candidate({ 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190 }, 170) == { 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190 }\n    assert candidate({ 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190 }, 180) == { 'Alden Cantrell': 180, 'Pierre Cox': 190 }\n    assert candidate({ 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190 }, 190) == { 'Pierre Cox': 190 }\n\ndef test_check():\n    check(dict_filter)\n\ntest_check()\n", "sample_io": ["assert dict_filter(3) == 27"], "source_codes": ["\nfrom typing import Dict\n\ndef dict_filter(d: Dict[str, int], n: int) -> Dict[str, int]:\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary\n    to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in d.items() if value >= n}\n\n\n"], "responses": ["```python\nfrom typing import Dict\n\ndef dict_filter(d: Dict[str, int], n: int) -> Dict[str, int]:\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary\n    to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in d.items() if value >= n}\n```"], "prompt_tokens": [76], "completion_tokens": [83], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_277_dict_filter"}
{"name": "mbpp_468_max_product", "language": "Python3", "prompt": "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_product", "test": "def check(candidate):\n    assert candidate([3, 100, 4, 5, 150, 6]) == 3000\n    assert candidate([4, 42, 55, 68, 80]) == 50265600\n    assert candidate([10, 22, 9, 33, 21, 50, 41, 60]) == 2460\n\ndef test_check():\n    check(max_product)\n\ntest_check()\n", "sample_io": ["assert max_product([3, 100, 4, 5, 150, 6]) == 3000"], "source_codes": ["\nfrom typing import List\n\ndef max_product(arr: List[int]) -> int:\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # dp[i] will store the maximum product of an increasing subsequence that ends with arr[i]\n    dp = arr[:]  # initialize with the element itself\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)\n\n\n# Example usage:\n# arr = [1, 2, 3, 4]\n# print(max_product(arr))  # Output: 24 (1*2*3*4)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_product(arr: List[int]) -> int:\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # dp[i] will store the maximum product of an increasing subsequence that ends with arr[i]\n    dp = arr[:]  # initialize with the element itself\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)\n\n\n# Example usage:\n# arr = [1, 2, 3, 4]\n# print(max_product(arr))  # Output: 24 (1*2*3*4)\n```\n"], "prompt_tokens": [60], "completion_tokens": [186], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_468_max_product"}
{"name": "mbpp_279_is_num_decagonal", "language": "Python3", "prompt": "def is_num_decagonal(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth decagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_num_decagonal", "test": "def check(candidate):\n    assert candidate(3) == 27\n    assert candidate(7) == 175\n    assert candidate(10) == 370\n\ndef test_check():\n    check(is_num_decagonal)\n\ntest_check()\n", "sample_io": ["assert is_num_decagonal(3) == 27"], "source_codes": ["\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    The nth decagonal number is given by the formula:\n    D(n) = n * (4n - 3) / 2\n\n    Args:\n    n (int): The term of the decagonal number sequence to compute.\n\n    Returns:\n    int: The nth decagonal number.\n    \"\"\"\n    return n * (4 * n - 3) // 2\n\n\n"], "responses": ["```python\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    The nth decagonal number is given by the formula:\n    D(n) = n * (4n - 3) / 2\n\n    Args:\n    n (int): The term of the decagonal number sequence to compute.\n\n    Returns:\n    int: The nth decagonal number.\n    \"\"\"\n    return n * (4 * n - 3) // 2\n```"], "prompt_tokens": [46], "completion_tokens": [109], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_279_is_num_decagonal"}
{"name": "mbpp_3_is_not_prime", "language": "Python3", "prompt": "def is_not_prime(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to identify non-prime numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_not_prime", "test": "def check(candidate):\n    assert candidate(2) == False\n    assert candidate(10) == True\n    assert candidate(35) == True\n    assert candidate(37) == False\n\ndef test_check():\n    check(is_not_prime)\n\ntest_check()\n", "sample_io": ["assert is_not_prime(2) == False"], "source_codes": ["\ndef is_not_prime(n: int) -> bool:\n    \"\"\"\n    Return True if n is not a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return True  # 0 and 1 are not prime\n    if n == 2:\n        return False  # 2 is prime\n    if n % 2 == 0:\n        return True  # even numbers greater than 2 are not prime\n\n    # Check for factors from 3 to sqrt(n)\n    limit = int(n**0.5) + 1\n    for i in range(3, limit, 2):\n        if n % i == 0:\n            return True\n    return False\n\n\n"], "responses": ["```python\ndef is_not_prime(n: int) -> bool:\n    \"\"\"\n    Return True if n is not a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return True  # 0 and 1 are not prime\n    if n == 2:\n        return False  # 2 is prime\n    if n % 2 == 0:\n        return True  # even numbers greater than 2 are not prime\n\n    # Check for factors from 3 to sqrt(n)\n    limit = int(n**0.5) + 1\n    for i in range(3, limit, 2):\n        if n % i == 0:\n            return True\n    return False\n```"], "prompt_tokens": [45], "completion_tokens": [152], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_3_is_not_prime"}
{"name": "mbpp_88_freq_count", "language": "Python3", "prompt": "from typing import List, Dict\n\ndef freq_count(list1: List[int]) -> Dict[int, int]:\n    \"\"\"\n\tWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "freq_count", "test": "def check(candidate):\n    assert candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == { 10: 4, 20: 4, 40: 2, 50: 2, 30: 1 }\n    assert candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]) == { 1: 3, 2: 2, 3: 3, 4: 3 }\n    assert candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]) == { 10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2 }\n\ndef test_check():\n    check(freq_count)\n\ntest_check()\n", "sample_io": ["assert freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == { 10: 4, 20: 4, 40: 2, 50: 2, 30: 1 }"], "source_codes": ["\nfrom typing import List, Dict\n\ndef freq_count(list1: List[int]) -> Dict[int, int]:\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    frequency = {}\n    for item in list1:\n        frequency[item] = frequency.get(item, 0) + 1\n    return frequency\n\n\n"], "responses": ["```python\nfrom typing import List, Dict\n\ndef freq_count(list1: List[int]) -> Dict[int, int]:\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    frequency = {}\n    for item in list1:\n        frequency[item] = frequency.get(item, 0) + 1\n    return frequency\n```"], "prompt_tokens": [65], "completion_tokens": [82], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_88_freq_count"}
{"name": "mbpp_259_maximize_elements", "language": "Python3", "prompt": "from typing import List\n\ndef maximize_elements(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to maximize the given two lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_259_maximize_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "maximize_elements", "test": "def check(candidate):\n    assert candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[6, 7], [4, 9], [2, 9], [7, 10]]\n    assert candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]) == [[7, 8], [5, 10], [3, 10], [8, 11]]\n    assert candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]) == [[8, 9], [6, 11], [4, 11], [9, 12]]\n\ndef test_check():\n    check(maximize_elements)\n\ntest_check()\n", "sample_io": ["assert maximize_elements([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[6, 7], [4, 9], [2, 9], [7, 10]]"], "source_codes": ["\nfrom typing import List\n\ndef maximize_elements(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Write a function to maximize the given two lists.\n\n    Here, maximizing can be interpreted as \n    combining both lists element-wise by taking the maximum of corresponding elements.\n\n    Assuming both input are 2D lists of same dimensions, we return a new 2D list \n    where each element is the max of elements at that position in the two lists.\n    \"\"\"\n    # Check if dimensions match\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both inputs must have the same number of rows\")\n    for row1, row2 in zip(test_tup1, test_tup2):\n        if len(row1) != len(row2):\n            raise ValueError(\"Both inputs must have the same number of columns in each row\")\n\n    result = []\n    for row1, row2 in zip(test_tup1, test_tup2):\n        max_row = [max(a, b) for a, b in zip(row1, row2)]\n        result.append(max_row)\n\n    return result\n\n# Example usage:\n# test_tup1 = [[1, 4, 3], [7, 2, 5]]\n# test_tup2 = [[2, 1, 6], [3, 8, 4]]\n# print(maximize_elements(test_tup1, test_tup2))\n# Output: [[2, 4, 6], [7, 8, 5]]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef maximize_elements(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Write a function to maximize the given two lists.\n\n    Here, maximizing can be interpreted as \n    combining both lists element-wise by taking the maximum of corresponding elements.\n\n    Assuming both input are 2D lists of same dimensions, we return a new 2D list \n    where each element is the max of elements at that position in the two lists.\n    \"\"\"\n    # Check if dimensions match\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both inputs must have the same number of rows\")\n    for row1, row2 in zip(test_tup1, test_tup2):\n        if len(row1) != len(row2):\n            raise ValueError(\"Both inputs must have the same number of columns in each row\")\n\n    result = []\n    for row1, row2 in zip(test_tup1, test_tup2):\n        max_row = [max(a, b) for a, b in zip(row1, row2)]\n        result.append(max_row)\n\n    return result\n\n# Example usage:\n# test_tup1 = [[1, 4, 3], [7, 2, 5]]\n# test_tup2 = [[2, 1, 6], [3, 8, 4]]\n# print(maximize_elements(test_tup1, test_tup2))\n# Output: [[2, 4, 6], [7, 8, 5]]\n```"], "prompt_tokens": [64], "completion_tokens": [338], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_259_maximize_elements"}
{"name": "mbpp_568_empty_list", "language": "Python3", "prompt": "from typing import List, Dict\n\ndef empty_list(length: int) -> List[Dict[None, None]]:\n    \"\"\"\n\tWrite a function to create a list of N empty dictionaries.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_568_empty_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "empty_list", "test": "def check(candidate):\n    assert candidate(5) == [{  }, {  }, {  }, {  }, {  }]\n    assert candidate(6) == [{  }, {  }, {  }, {  }, {  }, {  }]\n    assert candidate(7) == [{  }, {  }, {  }, {  }, {  }, {  }, {  }]\n\ndef test_check():\n    check(empty_list)\n\ntest_check()\n", "sample_io": ["assert empty_list(5) == [{  }, {  }, {  }, {  }, {  }]"], "source_codes": ["\nfrom typing import List, Dict\n\ndef empty_list(length: int) -> List[Dict]:\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]\n\n\n"], "responses": ["```python\nfrom typing import List, Dict\n\ndef empty_list(length: int) -> List[Dict]:\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]\n```"], "prompt_tokens": [58], "completion_tokens": [50], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_568_empty_list"}
{"name": "mbpp_285_text_match_two_three", "language": "Python3", "prompt": "def text_match_two_three(text: str) -> bool:\n    \"\"\"\n\tWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_two_three", "test": "def check(candidate):\n    assert candidate('ac') == False\n    assert candidate('dc') == False\n    assert candidate('abbbba') == True\n\ndef test_check():\n    check(text_match_two_three)\n\ntest_check()\n", "sample_io": ["assert text_match_two_three('ac') == False"], "source_codes": ["\nimport re\n\ndef text_match_two_three(text: str) -> bool:\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = r\"ab{2,3}\"\n    return bool(re.search(pattern, text))\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_two_three(text: str) -> bool:\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = r\"ab{2,3}\"\n    return bool(re.search(pattern, text))\n```"], "prompt_tokens": [59], "completion_tokens": [68], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_285_text_match_two_three"}
{"name": "mbpp_721_maxAverageOfPath", "language": "Python3", "prompt": "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    \"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "maxAverageOfPath", "test": "def check(candidate):\n    assert candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n    assert candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n    assert candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8\n\ndef test_check():\n    check(maxAverageOfPath)\n\ntest_check()\n", "sample_io": ["assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"], "source_codes": ["\nfrom typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    \"\"\"\n    Given a square matrix of size N*N, where each cell has a cost,\n    find a path from top-left to bottom-right moving only right or down,\n    that maximizes the average cost per cell along the path.\n\n    Average = total cost along the path / number of cells in the path.\n\n    Return the maximum average possible.\n    \"\"\"\n    n = len(cost)\n    if n == 0:\n        return 0.0\n    \n    # dp[i][j] will store a tuple of (max_sum, length_of_path)\n    # representing the max sum achievable when reaching cell (i, j) and\n    # the length of that path (number of cells on the path)\n    dp = [[(0, 0) for _ in range(n)] for _ in range(n)]\n    \n    # Initialize starting point\n    dp[0][0] = (cost[0][0], 1)\n    \n    # Fill first row (can only come from left)\n    for j in range(1, n):\n        prev_sum, prev_len = dp[0][j-1]\n        dp[0][j] = (prev_sum + cost[0][j], prev_len + 1)\n        \n    # Fill first column (can only come from top)\n    for i in range(1, n):\n        prev_sum, prev_len = dp[i-1][0]\n        dp[i][0] = (prev_sum + cost[i][0], prev_len + 1)\n    \n    # Fill rest of the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            # From top\n            top_sum, top_len = dp[i-1][j]\n            top_avg = (top_sum + cost[i][j]) / (top_len + 1)\n            \n            # From left\n            left_sum, left_len = dp[i][j-1]\n            left_avg = (left_sum + cost[i][j]) / (left_len + 1)\n            \n            if top_avg > left_avg:\n                dp[i][j] = (top_sum + cost[i][j], top_len + 1)\n            else:\n                dp[i][j] = (left_sum + cost[i][j], left_len + 1)\n    \n    max_sum, max_len = dp[n-1][n-1]\n    return max_sum / max_len\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    \"\"\"\n    Given a square matrix of size N*N, where each cell has a cost,\n    find a path from top-left to bottom-right moving only right or down,\n    that maximizes the average cost per cell along the path.\n\n    Average = total cost along the path / number of cells in the path.\n\n    Return the maximum average possible.\n    \"\"\"\n    n = len(cost)\n    if n == 0:\n        return 0.0\n    \n    # dp[i][j] will store a tuple of (max_sum, length_of_path)\n    # representing the max sum achievable when reaching cell (i, j) and\n    # the length of that path (number of cells on the path)\n    dp = [[(0, 0) for _ in range(n)] for _ in range(n)]\n    \n    # Initialize starting point\n    dp[0][0] = (cost[0][0], 1)\n    \n    # Fill first row (can only come from left)\n    for j in range(1, n):\n        prev_sum, prev_len = dp[0][j-1]\n        dp[0][j] = (prev_sum + cost[0][j], prev_len + 1)\n        \n    # Fill first column (can only come from top)\n    for i in range(1, n):\n        prev_sum, prev_len = dp[i-1][0]\n        dp[i][0] = (prev_sum + cost[i][0], prev_len + 1)\n    \n    # Fill rest of the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            # From top\n            top_sum, top_len = dp[i-1][j]\n            top_avg = (top_sum + cost[i][j]) / (top_len + 1)\n            \n            # From left\n            left_sum, left_len = dp[i][j-1]\n            left_avg = (left_sum + cost[i][j]) / (left_len + 1)\n            \n            if top_avg > left_avg:\n                dp[i][j] = (top_sum + cost[i][j], top_len + 1)\n            else:\n                dp[i][j] = (left_sum + cost[i][j], left_len + 1)\n    \n    max_sum, max_len = dp[n-1][n-1]\n    return max_sum / max_len\n```\n"], "prompt_tokens": [129], "completion_tokens": [529], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_721_maxAverageOfPath"}
{"name": "mbpp_797_sum_in_range", "language": "Python3", "prompt": "def sum_in_range(l: int, r: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_797_sum_in_range.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_in_range", "test": "def check(candidate):\n    assert candidate(2, 5) == 8\n    assert candidate(5, 7) == 12\n    assert candidate(7, 13) == 40\n\ndef test_check():\n    check(sum_in_range)\n\ntest_check()\n", "sample_io": ["assert sum_in_range(2, 5) == 8"], "source_codes": ["\ndef sum_in_range(l: int, r: int) -> int:\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Ensure l is at least 1 since natural numbers start from 1\n    if r < 1:\n        return 0\n    if l < 1:\n        l = 1\n    \n    # Find the first odd number >= l\n    if l % 2 == 0:\n        l += 1\n    # Find the last odd number <= r\n    if r % 2 == 0:\n        r -= 1\n\n    if l > r:\n        return 0\n\n    # Number of odd terms in the range\n    n = ((r - l) // 2) + 1\n\n    # Sum of arithmetic progression: n/2 * (first_term + last_term)\n    return n * (l + r) // 2\n\n\n"], "responses": ["```python\ndef sum_in_range(l: int, r: int) -> int:\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Ensure l is at least 1 since natural numbers start from 1\n    if r < 1:\n        return 0\n    if l < 1:\n        l = 1\n    \n    # Find the first odd number >= l\n    if l % 2 == 0:\n        l += 1\n    # Find the last odd number <= r\n    if r % 2 == 0:\n        r -= 1\n\n    if l > r:\n        return 0\n\n    # Number of odd terms in the range\n    n = ((r - l) // 2) + 1\n\n    # Sum of arithmetic progression: n/2 * (first_term + last_term)\n    return n * (l + r) // 2\n```"], "prompt_tokens": [58], "completion_tokens": [206], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_797_sum_in_range"}
{"name": "mbpp_4_heap_queue_largest", "language": "Python3", "prompt": "from typing import List\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "heap_queue_largest", "test": "def check(candidate):\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2) == [85, 75]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5) == [85, 75, 65, 58, 35]\n\ndef test_check():\n    check(heap_queue_largest)\n\ntest_check()\n", "sample_io": ["assert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]"], "source_codes": ["\nimport heapq\nfrom typing import List\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Use heapq.nlargest to get n largest numbers\n    return heapq.nlargest(n, nums)\n\n\n"], "responses": ["```python\nimport heapq\nfrom typing import List\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Use heapq.nlargest to get n largest numbers\n    return heapq.nlargest(n, nums)\n```"], "prompt_tokens": [67], "completion_tokens": [79], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_4_heap_queue_largest"}
{"name": "mbpp_120_max_product_tuple", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_product_tuple", "test": "def check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\n    assert candidate([(10, 20), (15, 2), (5, 10)]) == 200\n    assert candidate([(11, 44), (10, 15), (20, 5), (12, 9)]) == 484\n\ndef test_check():\n    check(max_product_tuple)\n\ntest_check()\n", "sample_io": ["assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n):\n            # Get all numbers from both tuples\n            nums1 = list1[i]\n            nums2 = list1[j]\n            # Compute product of every number in tuple i with every number in tuple j\n            for a in nums1:\n                for b in nums2:\n                    product = abs(a * b)\n                    if product > max_product:\n                        max_product = product\n    return max_product\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n):\n            # Get all numbers from both tuples\n            nums1 = list1[i]\n            nums2 = list1[j]\n            # Compute product of every number in tuple i with every number in tuple j\n            for a in nums1:\n                for b in nums2:\n                    product = abs(a * b)\n                    if product > max_product:\n                        max_product = product\n    return max_product\n```"], "prompt_tokens": [67], "completion_tokens": [167], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_120_max_product_tuple"}
{"name": "mbpp_230_replace_blank", "language": "Python3", "prompt": "def replace_blank(str1: str, char: str) -> str:\n    \"\"\"\n\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_blank", "test": "def check(candidate):\n    assert candidate('hello people', '@') == 'hello@people'\n    assert candidate('python program language', '$') == 'python$program$language'\n    assert candidate('blank space', '-') == 'blank-space'\n\ndef test_check():\n    check(replace_blank)\n\ntest_check()\n", "sample_io": ["assert replace_blank('hello people', '@') == 'hello@people'"], "source_codes": ["\ndef replace_blank(str1: str, char: str) -> str:\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)\n\n\n"], "responses": ["```python\ndef replace_blank(str1: str, char: str) -> str:\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)\n```"], "prompt_tokens": [64], "completion_tokens": [59], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_230_replace_blank"}
{"name": "mbpp_600_is_Even", "language": "Python3", "prompt": "def is_Even(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given number is even or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_600_is_Even.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Even", "test": "def check(candidate):\n    assert candidate(1) == False\n    assert candidate(2) == True\n    assert candidate(3) == False\n\ndef test_check():\n    check(is_Even)\n\ntest_check()\n", "sample_io": ["assert is_Even(1) == False"], "source_codes": ["\ndef is_Even(n: int) -> bool:\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    return n % 2 == 0\n\n\n"], "responses": ["```python\ndef is_Even(n: int) -> bool:\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    return n % 2 == 0\n```"], "prompt_tokens": [49], "completion_tokens": [45], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_600_is_Even"}
{"name": "mbpp_440_find_adverb_position", "language": "Python3", "prompt": "from typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    \"\"\"\n\tWrite a function to find the first adverb and their positions in a given sentence.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_adverb_position", "test": "def check(candidate):\n    assert candidate('clearly!! we can see the sky') == (0, 7, 'clearly')\n    assert candidate('seriously!! there are many roses') == (0, 9, 'seriously')\n    assert candidate('unfortunately!! sita is going to home') == (0, 13, 'unfortunately')\n\ndef test_check():\n    check(find_adverb_position)\n\ntest_check()\n", "sample_io": ["assert find_adverb_position('clearly!! we can see the sky') == (0, 7, 'clearly')"], "source_codes": ["\nimport re\nfrom typing import Tuple\nimport nltk\n\n# Download required resources for POS tagging\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    It returns a tuple (start_pos, end_pos, adverb_word).\n    If no adverb is found, return (-1, -1, '').\n    \"\"\"\n    tokens = nltk.word_tokenize(text)\n    pos_tags = nltk.pos_tag(tokens)\n\n    # Adverbs have POS tags starting with 'RB' (RB, RBR, RBS)\n    # We need to find the first token with such tag and get its position in the original text\n    for word, tag in pos_tags:\n        if tag.startswith('RB'):\n            # Find the first occurrence of this adverb in the text to get its position\n            # We have to be careful in case of punctuation etc\n            # Use regex search for exact word with word boundaries\n            pattern = r'\\b' + re.escape(word) + r'\\b'\n            match = re.search(pattern, text)\n            if match:\n                return (match.start(), match.end(), word)\n    return (-1, -1, '')\n\n# Example usage:\n# print(find_adverb_position(\"She quickly ran to the store.\"))\n# Output: (4, 11, 'quickly')\n\n\n"], "responses": ["```python\nimport re\nfrom typing import Tuple\nimport nltk\n\n# Download required resources for POS tagging\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    It returns a tuple (start_pos, end_pos, adverb_word).\n    If no adverb is found, return (-1, -1, '').\n    \"\"\"\n    tokens = nltk.word_tokenize(text)\n    pos_tags = nltk.pos_tag(tokens)\n\n    # Adverbs have POS tags starting with 'RB' (RB, RBR, RBS)\n    # We need to find the first token with such tag and get its position in the original text\n    for word, tag in pos_tags:\n        if tag.startswith('RB'):\n            # Find the first occurrence of this adverb in the text to get its position\n            # We have to be careful in case of punctuation etc\n            # Use regex search for exact word with word boundaries\n            pattern = r'\\b' + re.escape(word) + r'\\b'\n            match = re.search(pattern, text)\n            if match:\n                return (match.start(), match.end(), word)\n    return (-1, -1, '')\n\n# Example usage:\n# print(find_adverb_position(\"She quickly ran to the store.\"))\n# Output: (4, 11, 'quickly')\n```\n"], "prompt_tokens": [62], "completion_tokens": [314], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_440_find_adverb_position"}
{"name": "mbpp_773_occurance_substring", "language": "Python3", "prompt": "from typing import Optional, Tuple\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    \"\"\"\n\tWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "occurance_substring", "test": "def check(candidate):\n    assert candidate('python programming, python language', 'python') == ('python', 0, 6)\n    assert candidate('python programming,programming language', 'programming') == ('programming', 7, 18)\n    assert candidate('python programming,programming language', 'language') == ('language', 31, 39)\n    assert candidate('c++ programming, c++ language', 'python') == None\n\ndef test_check():\n    check(occurance_substring)\n\ntest_check()\n", "sample_io": ["assert occurance_substring('python programming, python language', 'python') == ('python', 0, 6)"], "source_codes": ["\nfrom typing import Optional, Tuple\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n\n    Returns:\n        A tuple containing the matched substring, start index, and end index (exclusive).\n        Returns None if pattern is not found.\n    \"\"\"\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (pattern, index, index + len(pattern))\n\n\n"], "responses": ["```python\nfrom typing import Optional, Tuple\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n\n    Returns:\n        A tuple containing the matched substring, start index, and end index (exclusive).\n        Returns None if pattern is not found.\n    \"\"\"\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (pattern, index, index + len(pattern))\n```"], "prompt_tokens": [78], "completion_tokens": [124], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_773_occurance_substring"}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "Python3", "prompt": "def get_total_number_of_sequences(m: int, n: int) -> int:\n    \"\"\"\n\tWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_total_number_of_sequences", "test": "def check(candidate):\n    assert candidate(10, 4) == 4\n    assert candidate(5, 2) == 6\n    assert candidate(16, 3) == 84\n\ndef test_check():\n    check(get_total_number_of_sequences)\n\ntest_check()\n", "sample_io": ["assert get_total_number_of_sequences(10, 4) == 4"], "source_codes": ["\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less\n    than or equal to m.\n\n    Args:\n    m (int): maximum value an element in the sequence can be\n    n (int): length of the sequences\n\n    Returns:\n    int: number of possible sequences\n    \"\"\"\n\n    # dp[i][x] = number of sequences of length i where the i-th element is x\n    # Base case: For i=1, any x in 1..m is a valid sequence (length 1)\n    dp = [ [0] * (m + 1) for _ in range(n + 1)]\n    for x in range(1, m + 1):\n        dp[1][x] = 1\n\n    for length in range(2, n + 1):\n        # For each possible current element x,\n        # sum over all previous elements y where x >= 2 * y and x <= m\n        # i.e., all y such that y <= x//2\n        prefix_sum = [0] * (m + 1)\n        for x in range(1, m + 1):\n            prefix_sum[x] = prefix_sum[x-1] + dp[length-1][x]\n\n        for x in range(1, m + 1):\n            max_prev = x // 2\n            if max_prev >= 1:\n                dp[length][x] = prefix_sum[max_prev]\n            else:\n                dp[length][x] = 0\n\n    return sum(dp[n][1:])\n\n# Example usage:\n# print(get_total_number_of_sequences(10, 3))\n\n\n"], "responses": ["```python\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less\n    than or equal to m.\n\n    Args:\n    m (int): maximum value an element in the sequence can be\n    n (int): length of the sequences\n\n    Returns:\n    int: number of possible sequences\n    \"\"\"\n\n    # dp[i][x] = number of sequences of length i where the i-th element is x\n    # Base case: For i=1, any x in 1..m is a valid sequence (length 1)\n    dp = [ [0] * (m + 1) for _ in range(n + 1)]\n    for x in range(1, m + 1):\n        dp[1][x] = 1\n\n    for length in range(2, n + 1):\n        # For each possible current element x,\n        # sum over all previous elements y where x >= 2 * y and x <= m\n        # i.e., all y such that y <= x//2\n        prefix_sum = [0] * (m + 1)\n        for x in range(1, m + 1):\n            prefix_sum[x] = prefix_sum[x-1] + dp[length-1][x]\n\n        for x in range(1, m + 1):\n            max_prev = x // 2\n            if max_prev >= 1:\n                dp[length][x] = prefix_sum[max_prev]\n            else:\n                dp[length][x] = 0\n\n    return sum(dp[n][1:])\n\n# Example usage:\n# print(get_total_number_of_sequences(10, 3))\n```\n"], "prompt_tokens": [89], "completion_tokens": [398], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_239_get_total_number_of_sequences"}
{"name": "mbpp_265_list_split", "language": "Python3", "prompt": "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    \"\"\"\n\tWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "list_split", "test": "def check(candidate):\n    assert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3) == [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]\n    assert candidate(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2) == [['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n\ndef test_check():\n    check(list_split)\n\ntest_check()\n", "sample_io": ["assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"], "source_codes": ["\nfrom typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]\n```"], "prompt_tokens": [76], "completion_tokens": [83], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_265_list_split"}
{"name": "mbpp_412_remove_odd", "language": "Python3", "prompt": "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to remove odd numbers from a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_odd", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == [2]\n    assert candidate([2, 4, 6]) == [2, 4, 6]\n    assert candidate([10, 20, 3]) == [10, 20]\n\ndef test_check():\n    check(remove_odd)\n\ntest_check()\n", "sample_io": ["assert remove_odd([1, 2, 3]) == [2]"], "source_codes": ["\nfrom typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]\n```"], "prompt_tokens": [53], "completion_tokens": [56], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_412_remove_odd"}
{"name": "mbpp_414_overlapping", "language": "Python3", "prompt": "from typing import List\n\ndef overlapping(list1: List[int], list2: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "overlapping", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]) == False\n    assert candidate([1, 2, 3], [4, 5, 6]) == False\n    assert candidate([1, 4, 5], [1, 4, 5]) == True\n\ndef test_check():\n    check(overlapping)\n\ntest_check()\n", "sample_io": ["assert overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9]) == False"], "source_codes": ["\nfrom typing import List\n\ndef overlapping(list1: List[int], list2: List[int]) -> bool:\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    return any(item in list2 for item in list1)\n\n# Example usage:\n# print(overlapping([1, 2, 3], [4, 5, 3]))  # Output: True\n# print(overlapping([1, 2, 3], [4, 5, 6]))  # Output: False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef overlapping(list1: List[int], list2: List[int]) -> bool:\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    return any(item in list2 for item in list1)\n\n# Example usage:\n# print(overlapping([1, 2, 3], [4, 5, 3]))  # Output: True\n# print(overlapping([1, 2, 3], [4, 5, 6]))  # Output: False\n```"], "prompt_tokens": [64], "completion_tokens": [125], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_414_overlapping"}
{"name": "mbpp_160_find_solution", "language": "Python3", "prompt": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_solution", "test": "def check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n", "sample_io": ["assert find_solution(2, 3, 7) == (2, 1)"], "source_codes": ["\nfrom typing import Optional, Tuple\n\ndef extended_gcd(a: int, b: int) -> Tuple[int, int, int]:\n    \"\"\"\n    Returns a tuple of three values: gcd of a and b, and the coefficients x and y such that:\n    ax + by = gcd(a, b)\n    \"\"\"\n    if b == 0:\n        return (a, 1, 0)\n    else:\n        gcd, x1, y1 = extended_gcd(b, a % b)\n        x = y1\n        y = x1 - (a // b) * y1\n        return (gcd, x, y)\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    \"\"\"\n    Returns integers x and y that satisfy:\n    \n        a*x + b*y = n\n    \n    If no solution exists, returns None.\n    \"\"\"\n    gcd, x0, y0 = extended_gcd(a, b)\n    if n % gcd != 0:\n        # No solution exists if gcd doesn't divide n\n        return None\n    # Multiply x0 and y0 by n // gcd to get particular solution\n    x = x0 * (n // gcd)\n    y = y0 * (n // gcd)\n    return (x, y)\n\n\n"], "responses": ["```python\nfrom typing import Optional, Tuple\n\ndef extended_gcd(a: int, b: int) -> Tuple[int, int, int]:\n    \"\"\"\n    Returns a tuple of three values: gcd of a and b, and the coefficients x and y such that:\n    ax + by = gcd(a, b)\n    \"\"\"\n    if b == 0:\n        return (a, 1, 0)\n    else:\n        gcd, x1, y1 = extended_gcd(b, a % b)\n        x = y1\n        y = x1 - (a // b) * y1\n        return (gcd, x, y)\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    \"\"\"\n    Returns integers x and y that satisfy:\n    \n        a*x + b*y = n\n    \n    If no solution exists, returns None.\n    \"\"\"\n    gcd, x0, y0 = extended_gcd(a, b)\n    if n % gcd != 0:\n        # No solution exists if gcd doesn't divide n\n        return None\n    # Multiply x0 and y0 by n // gcd to get particular solution\n    x = x0 * (n // gcd)\n    y = y0 * (n // gcd)\n    return (x, y)\n```"], "prompt_tokens": [81], "completion_tokens": [279], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_160_find_solution"}
{"name": "mbpp_559_max_sub_array_sum", "language": "Python3", "prompt": "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    \"\"\"\n\tWrite a function to find the sum of the largest contiguous sublist in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sub_array_sum", "test": "def check(candidate):\n    assert candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n    assert candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\n    assert candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10\n\ndef test_check():\n    check(max_sub_array_sum)\n\ntest_check()\n", "sample_io": ["assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7"], "source_codes": ["\nfrom typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = a[0]\n    current_sum = 0\n    \n    for num in a:\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_sum\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = a[0]\n    current_sum = 0\n    \n    for num in a:\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_sum\n```"], "prompt_tokens": [62], "completion_tokens": [110], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_559_max_sub_array_sum"}
{"name": "mbpp_809_check_smaller", "language": "Python3", "prompt": "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> bool:\n    \"\"\"\n\tWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_smaller", "test": "def check(candidate):\n    assert candidate((1, 2, 3), (2, 3, 4)) == False\n    assert candidate((4, 5, 6), (3, 4, 5)) == True\n    assert candidate((11, 12, 13), (10, 11, 12)) == True\n\ndef test_check():\n    check(check_smaller)\n\ntest_check()\n", "sample_io": ["assert check_smaller((1, 2, 3), (2, 3, 4)) == False"], "source_codes": ["\nfrom typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> bool:\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    return all(x > y for x, y in zip(test_tup1, test_tup2))\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> bool:\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    return all(x > y for x, y in zip(test_tup1, test_tup2))\n```"], "prompt_tokens": [81], "completion_tokens": [89], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_809_check_smaller"}
{"name": "mbpp_629_Split", "language": "Python3", "prompt": "from typing import List\n\ndef Split(list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to find even numbers from a list of numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Split", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == [2, 4]\n    assert candidate([4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0]\n    assert candidate([8, 12, 15, 19]) == [8, 12]\n\ndef test_check():\n    check(Split)\n\ntest_check()\n", "sample_io": ["assert Split([1, 2, 3, 4, 5]) == [2, 4]"], "source_codes": ["\nfrom typing import List\n\ndef Split(lst: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Split(lst: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]\n```"], "prompt_tokens": [53], "completion_tokens": [56], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_629_Split"}
{"name": "mbpp_723_count_same_pair", "language": "Python3", "prompt": "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"\n\tThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_same_pair", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]) == 4\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1\n    assert candidate([0, 1, 1, 2], [0, 1, 2, 2]) == 3\n\ndef test_check():\n    check(count_same_pair)\n\ntest_check()\n", "sample_io": ["assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]) == 4"], "source_codes": ["\nfrom typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n```"], "prompt_tokens": [73], "completion_tokens": [95], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_723_count_same_pair"}
{"name": "mbpp_242_count_charac", "language": "Python3", "prompt": "def count_charac(str1: str) -> int:\n    \"\"\"\n\tWrite a function to count the total number of characters in a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_242_count_charac.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_charac", "test": "def check(candidate):\n    assert candidate('python programming') == 18\n    assert candidate('language') == 8\n    assert candidate('words') == 5\n\ndef test_check():\n    check(count_charac)\n\ntest_check()\n", "sample_io": ["assert count_charac('python programming') == 18"], "source_codes": ["\ndef count_charac(str1: str) -> int:\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    return len(str1)\n\n# Example usage:\n# print(count_charac(\"Hello, World!\"))  # Output: 13\n\n\n"], "responses": ["```python\ndef count_charac(str1: str) -> int:\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    return len(str1)\n\n# Example usage:\n# print(count_charac(\"Hello, World!\"))  # Output: 13\n```"], "prompt_tokens": [49], "completion_tokens": [63], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_242_count_charac"}
{"name": "mbpp_616_tuple_modulo", "language": "Python3", "prompt": "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tuple_modulo", "test": "def check(candidate):\n    assert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n    assert candidate((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\n    assert candidate((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)\n\ndef test_check():\n    check(tuple_modulo)\n\ntest_check()\n", "sample_io": ["assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)"], "source_codes": ["\nfrom typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n```"], "prompt_tokens": [88], "completion_tokens": [96], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_616_tuple_modulo"}
{"name": "mbpp_583_catalan_number", "language": "Python3", "prompt": "def catalan_number(num: int) -> int:\n    \"\"\"\n\tWrite a function which returns nth catalan number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "catalan_number", "test": "def check(candidate):\n    assert candidate(10) == 16796\n    assert candidate(9) == 4862\n    assert candidate(7) == 429\n\ndef test_check():\n    check(catalan_number)\n\ntest_check()\n", "sample_io": ["assert catalan_number(10) == 16796"], "source_codes": ["\ndef catalan_number(num: int) -> int:\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n\n    if num == 0 or num == 1:\n        return 1\n\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n\n    for i in range(2, num + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[num]\n\n\n"], "responses": ["```python\ndef catalan_number(num: int) -> int:\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n\n    if num == 0 or num == 1:\n        return 1\n\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n\n    for i in range(2, num + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[num]\n```"], "prompt_tokens": [44], "completion_tokens": [136], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_583_catalan_number"}
{"name": "mbpp_129_magic_square_test", "language": "Python3", "prompt": "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    \"\"\"\n\tWrite a function to calculate whether the matrix is a magic square.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "magic_square_test", "test": "def check(candidate):\n    assert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]) == False\n\ndef test_check():\n    check(magic_square_test)\n\ntest_check()\n", "sample_io": ["assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True"], "source_codes": ["\nfrom typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    A magic square is a square matrix where the sums of every row, every column,\n    and both main diagonals are all the same.\n    \"\"\"\n    n = len(my_matrix)\n    # Check for empty matrix or non-square matrix\n    if n == 0 or any(len(row) != n for row in my_matrix):\n        return False\n\n    # Calculate the sum of the first row as reference\n    magic_sum = sum(my_matrix[0])\n\n    # Check sums of all rows\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check sums of all columns\n    for col in range(n):\n        col_sum = sum(my_matrix[row][col] for row in range(n))\n        if col_sum != magic_sum:\n            return False\n\n    # Check main diagonal\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    if diag1_sum != magic_sum:\n        return False\n\n    # Check secondary diagonal\n    diag2_sum = sum(my_matrix[i][n - 1 - i] for i in range(n))\n    if diag2_sum != magic_sum:\n        return False\n\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    A magic square is a square matrix where the sums of every row, every column,\n    and both main diagonals are all the same.\n    \"\"\"\n    n = len(my_matrix)\n    # Check for empty matrix or non-square matrix\n    if n == 0 or any(len(row) != n for row in my_matrix):\n        return False\n\n    # Calculate the sum of the first row as reference\n    magic_sum = sum(my_matrix[0])\n\n    # Check sums of all rows\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check sums of all columns\n    for col in range(n):\n        col_sum = sum(my_matrix[row][col] for row in range(n))\n        if col_sum != magic_sum:\n            return False\n\n    # Check main diagonal\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    if diag1_sum != magic_sum:\n        return False\n\n    # Check secondary diagonal\n    diag2_sum = sum(my_matrix[i][n - 1 - i] for i in range(n))\n    if diag2_sum != magic_sum:\n        return False\n\n    return True\n```"], "prompt_tokens": [55], "completion_tokens": [288], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_129_magic_square_test"}
{"name": "mbpp_61_count_Substrings", "language": "Python3", "prompt": "def count_Substrings(s: str) -> int:\n    \"\"\"\n\tWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Substrings", "test": "def check(candidate):\n    assert candidate('112112') == 6\n    assert candidate('111') == 6\n    assert candidate('1101112') == 12\n\ndef test_check():\n    check(count_Substrings)\n\ntest_check()\n", "sample_io": ["assert count_Substrings('112112') == 6"], "source_codes": ["\ndef count_Substrings(s: str) -> int:\n    \"\"\"\n    Count the number of substrings where the sum of digits is equal to the length of the substring.\n    \n    Args:\n    s (str): A string consisting of digit characters ('0'-'9').\n    \n    Returns:\n    int: Number of substrings where sum of digits equals length.\n    \"\"\"\n    n = len(s)\n    digits = list(map(int, s))\n    \n    count = 0\n    # Prefix sums to quickly calculate sum of any substring\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + digits[i]\n    \n    # Iterate over all substrings\n    for start in range(n):\n        for end in range(start, n):\n            length = end - start + 1\n            curr_sum = prefix_sum[end + 1] - prefix_sum[start]\n            if curr_sum == length:\n                count += 1\n    \n    return count\n\n\n"], "responses": ["```python\ndef count_Substrings(s: str) -> int:\n    \"\"\"\n    Count the number of substrings where the sum of digits is equal to the length of the substring.\n    \n    Args:\n    s (str): A string consisting of digit characters ('0'-'9').\n    \n    Returns:\n    int: Number of substrings where sum of digits equals length.\n    \"\"\"\n    n = len(s)\n    digits = list(map(int, s))\n    \n    count = 0\n    # Prefix sums to quickly calculate sum of any substring\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + digits[i]\n    \n    # Iterate over all substrings\n    for start in range(n):\n        for end in range(start, n):\n            length = end - start + 1\n            curr_sum = prefix_sum[end + 1] - prefix_sum[start]\n            if curr_sum == length:\n                count += 1\n    \n    return count\n```"], "prompt_tokens": [55], "completion_tokens": [219], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_61_count_Substrings"}
{"name": "mbpp_287_square_Sum", "language": "Python3", "prompt": "def square_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_287_square_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "square_Sum", "test": "def check(candidate):\n    assert candidate(2) == 20\n    assert candidate(3) == 56\n    assert candidate(4) == 120\n\ndef test_check():\n    check(square_Sum)\n\ntest_check()\n", "sample_io": ["assert square_Sum(2) == 20"], "source_codes": ["\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # First n even natural numbers are: 2, 4, 6, ..., 2n\n    # Sum of their squares = 4 * (1^2 + 2^2 + ... + n^2)\n    # Sum of squares of first n natural numbers = n(n+1)(2n+1) / 6\n    return 4 * n * (n + 1) * (2 * n + 1) // 6\n\n\n"], "responses": ["```python\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # First n even natural numbers are: 2, 4, 6, ..., 2n\n    # Sum of their squares = 4 * (1^2 + 2^2 + ... + n^2)\n    # Sum of squares of first n natural numbers = n(n+1)(2n+1) / 6\n    return 4 * n * (n + 1) * (2 * n + 1) // 6\n```"], "prompt_tokens": [56], "completion_tokens": [142], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_287_square_Sum"}
{"name": "mbpp_93_power", "language": "Python3", "prompt": "def power(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the value of 'a' to the power 'b'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_93_power.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "power", "test": "def check(candidate):\n    assert candidate(3, 4) == 81\n    assert candidate(2, 3) == 8\n    assert candidate(5, 5) == 3125\n\ndef test_check():\n    check(power)\n\ntest_check()\n", "sample_io": ["assert power(3, 4) == 81"], "source_codes": ["\ndef power(a: int, b: int) -> int:\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b\n\n\n"], "responses": ["```python\ndef power(a: int, b: int) -> int:\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b\n```"], "prompt_tokens": [53], "completion_tokens": [45], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_93_power"}
{"name": "mbpp_607_find_literals", "language": "Python3", "prompt": "from typing import Tuple\n\ndef find_literals(text: str, pattern: str) -> Tuple[str, int, int]:\n    \"\"\"\n\tWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_literals", "test": "def check(candidate):\n    assert candidate('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n    assert candidate('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\n    assert candidate('Hardest choices required strongest will', 'will') == ('will', 35, 39)\n\ndef test_check():\n    check(find_literals)\n\ntest_check()\n", "sample_io": ["assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"], "source_codes": ["\nimport re\nfrom typing import Tuple\n\ndef find_literals(text: str, pattern: str) -> Tuple[str, int, int]:\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return (\"\", -1, -1)\n\n\n"], "responses": ["```python\nimport re\nfrom typing import Tuple\n\ndef find_literals(text: str, pattern: str) -> Tuple[str, int, int]:\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return (\"\", -1, -1)\n```"], "prompt_tokens": [76], "completion_tokens": [102], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_607_find_literals"}
{"name": "mbpp_94_index_minimum", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> str:\n    \"\"\"\n\tGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "index_minimum", "test": "def check(candidate):\n    assert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n    assert candidate([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\n    assert candidate([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\n\ndef test_check():\n    check(index_minimum)\n\ntest_check()\n", "sample_io": ["assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> str:\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    if not test_list:\n        return \"\"  # or raise an exception if empty list is not expected\n    \n    # Find the tuple with the smallest second value\n    min_tuple = min(test_list, key=lambda x: x[1])\n    \n    # Return the first element of that tuple\n    return min_tuple[0]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> str:\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    if not test_list:\n        return \"\"  # or raise an exception if empty list is not expected\n    \n    # Find the tuple with the smallest second value\n    min_tuple = min(test_list, key=lambda x: x[1])\n    \n    # Return the first element of that tuple\n    return min_tuple[0]\n```"], "prompt_tokens": [70], "completion_tokens": [122], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_94_index_minimum"}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "Python3", "prompt": "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Sum_Of_Powers_Of_Two", "test": "def check(candidate):\n    assert candidate(10) == True\n    assert candidate(7) == False\n    assert candidate(14) == True\n\ndef test_check():\n    check(is_Sum_Of_Powers_Of_Two)\n\ntest_check()\n", "sample_io": ["assert is_Sum_Of_Powers_Of_Two(10) == True"], "source_codes": ["\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    Non-zero powers of 2 means powers like 2^1, 2^2, 2^3, etc., \n    so 2^0 (which is 1) is excluded.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if n can be represented as sum of non-zero powers of 2, else False.\n    \"\"\"\n    if n <= 0:\n        return False\n\n    # Non-zero powers of 2 means powers >= 1, so 1 (2^0) is not allowed.\n    # So any 1 bits in the least significant bit position are not allowed.\n    # That means n cannot have the bit 0 set.\n\n    # If the least significant bit is set (n & 1 == 1), return False.\n    if n & 1:\n        return False\n\n    # Since n is made up of powers of 2, the set bits represent powers.\n    # We need to check if all set bits are at positions >= 1 (i.e., bits other than bit 0)\n    # If that's true, return True.\n\n    # So just check bits from bit 1 and above, ignoring bit 0.\n    # If there's any bit set in those positions, it's valid.\n    # So if n >> 1 has any bit set, return True else False\n\n    return (n >> 1) != 0\n\n\n"], "responses": ["```python\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    Non-zero powers of 2 means powers like 2^1, 2^2, 2^3, etc., \n    so 2^0 (which is 1) is excluded.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if n can be represented as sum of non-zero powers of 2, else False.\n    \"\"\"\n    if n <= 0:\n        return False\n\n    # Non-zero powers of 2 means powers >= 1, so 1 (2^0) is not allowed.\n    # So any 1 bits in the least significant bit position are not allowed.\n    # That means n cannot have the bit 0 set.\n\n    # If the least significant bit is set (n & 1 == 1), return False.\n    if n & 1:\n        return False\n\n    # Since n is made up of powers of 2, the set bits represent powers.\n    # We need to check if all set bits are at positions >= 1 (i.e., bits other than bit 0)\n    # If that's true, return True.\n\n    # So just check bits from bit 1 and above, ignoring bit 0.\n    # If there's any bit set in those positions, it's valid.\n    # So if n >> 1 has any bit set, return True else False\n\n    return (n >> 1) != 0\n```\n"], "prompt_tokens": [64], "completion_tokens": [346], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_138_is_Sum_Of_Powers_Of_Two"}
{"name": "mbpp_594_diff_even_odd", "language": "Python3", "prompt": "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the difference of the first even and first odd number of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "diff_even_odd", "test": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 4, 1, 6, 8]) == 3\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\n    assert candidate([1, 5, 7, 9, 10]) == 9\n\ndef test_check():\n    check(diff_even_odd)\n\ntest_check()\n", "sample_io": ["assert diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 3"], "source_codes": ["\nfrom typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    first_even = None\n    first_odd = None\n\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number\")\n\n    return first_even - first_odd\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    first_even = None\n    first_odd = None\n\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number\")\n\n    return first_even - first_odd\n```"], "prompt_tokens": [61], "completion_tokens": [161], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_594_diff_even_odd"}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "Python3", "prompt": "def even_binomial_Coeff_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_274_even_binomial_Coeff_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "even_binomial_Coeff_Sum", "test": "def check(candidate):\n    assert candidate(4) == 8\n    assert candidate(6) == 32\n    assert candidate(2) == 2\n\ndef test_check():\n    check(even_binomial_Coeff_Sum)\n\ntest_check()\n", "sample_io": ["assert even_binomial_Coeff_Sum(4) == 8"], "source_codes": ["\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # The sum of binomial coefficients with even indices in row n of Pascal's triangle\n    # is equal to 2^(n-1) when n > 0.\n    # This is because sum_{k=0 to n} C(n,k) = 2^n\n    # and sum_{even k} C(n,k) = sum_{odd k} C(n,k) = 2^(n-1) when n > 0.\n    \n    if n <= 0:\n        return 0  # assuming positive integer input, return 0 if invalid input\n    \n    return 2**(n-1)\n\n\n"], "responses": ["```python\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # The sum of binomial coefficients with even indices in row n of Pascal's triangle\n    # is equal to 2^(n-1) when n > 0.\n    # This is because sum_{k=0 to n} C(n,k) = 2^n\n    # and sum_{even k} C(n,k) = sum_{odd k} C(n,k) = 2^(n-1) when n > 0.\n    \n    if n <= 0:\n        return 0  # assuming positive integer input, return 0 if invalid input\n    \n    return 2**(n-1)\n```\n"], "prompt_tokens": [60], "completion_tokens": [177], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_274_even_binomial_Coeff_Sum"}
{"name": "mbpp_126_sum", "language": "Python3", "prompt": "def sum(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of common divisors of two given numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum", "test": "def check(candidate):\n    assert candidate(10, 15) == 6\n    assert candidate(100, 150) == 93\n    assert candidate(4, 6) == 3\n\ndef test_check():\n    check(sum)\n\ntest_check()\n", "sample_io": ["assert sum(10, 15) == 6"], "source_codes": ["\ndef sum(a: int, b: int) -> int:\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    g = gcd(a, b)\n    total = 0\n    for i in range(1, g + 1):\n        if g % i == 0:\n            total += i\n    return total\n\n\n"], "responses": ["```python\ndef sum(a: int, b: int) -> int:\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    g = gcd(a, b)\n    total = 0\n    for i in range(1, g + 1):\n        if g % i == 0:\n            total += i\n    return total\n```"], "prompt_tokens": [53], "completion_tokens": [110], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_126_sum"}
{"name": "mbpp_769_Diff", "language": "Python3", "prompt": "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to get the difference between two lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Diff", "test": "def check(candidate):\n    assert candidate([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]\n    assert candidate([1, 2, 3, 4, 5], [6, 7, 1]) == [2, 3, 4, 5, 6, 7]\n    assert candidate([1, 2, 3], [6, 7, 1]) == [2, 3, 6, 7]\n\ndef test_check():\n    check(Diff)\n\ntest_check()\n", "sample_io": ["assert Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]"], "source_codes": ["\nfrom typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    This function returns elements that are in li1 but not in li2.\n    \"\"\"\n    return [item for item in li1 if item not in li2]\n\n# Example usage:\n# li1 = [1, 2, 3, 4, 5]\n# li2 = [2, 4, 6]\n# print(Diff(li1, li2))  # Output: [1, 3, 5]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    This function returns elements that are in li1 but not in li2.\n    \"\"\"\n    return [item for item in li1 if item not in li2]\n\n# Example usage:\n# li1 = [1, 2, 3, 4, 5]\n# li2 = [2, 4, 6]\n# print(Diff(li1, li2))  # Output: [1, 3, 5]\n```"], "prompt_tokens": [58], "completion_tokens": [135], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_769_Diff"}
{"name": "mbpp_796_return_sum", "language": "Python3", "prompt": "from typing import Dict\n\ndef return_sum(dict: Dict[str, int]) -> int:\n    \"\"\"\n\tWrite function to find the sum of all items in the given dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "return_sum", "test": "def check(candidate):\n    assert candidate({ 'a': 100, 'b': 200, 'c': 300 }) == 600\n    assert candidate({ 'a': 25, 'b': 18, 'c': 45 }) == 88\n    assert candidate({ 'a': 36, 'b': 39, 'c': 49 }) == 124\n\ndef test_check():\n    check(return_sum)\n\ntest_check()\n", "sample_io": ["assert return_sum({ 'a': 100, 'b': 200, 'c': 300 }) == 600"], "source_codes": ["\nfrom typing import Dict\n\ndef return_sum(dict: Dict[str, int]) -> int:\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    return sum(dict.values())\n\n\n"], "responses": ["```python\nfrom typing import Dict\n\ndef return_sum(dict: Dict[str, int]) -> int:\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    return sum(dict.values())\n```"], "prompt_tokens": [55], "completion_tokens": [47], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_796_return_sum"}
{"name": "mbpp_574_surfacearea_cylinder", "language": "Python3", "prompt": "def surfacearea_cylinder(r: int, h: int) -> float:\n    \"\"\"\n\tWrite a function to find the surface area of a cylinder.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "surfacearea_cylinder", "test": "def check(candidate):\n    assert candidate(10, 5) == 942.45\n    assert candidate(4, 5) == 226.18800000000002\n    assert candidate(4, 10) == 351.848\n\ndef test_check():\n    check(surfacearea_cylinder)\n\ntest_check()\n", "sample_io": ["assert surfacearea_cylinder(10, 5) == 942.45"], "source_codes": ["\nimport math\n\ndef surfacearea_cylinder(r: int, h: int) -> float:\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    Surface Area = 2 * \u03c0 * r * h + 2 * \u03c0 * r^2\n    where r is the radius and h is the height.\n    \"\"\"\n    return 2 * math.pi * r * h + 2 * math.pi * r**2\n\n\n"], "responses": ["```python\nimport math\n\ndef surfacearea_cylinder(r: int, h: int) -> float:\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    Surface Area = 2 * \u03c0 * r * h + 2 * \u03c0 * r^2\n    where r is the radius and h is the height.\n    \"\"\"\n    return 2 * math.pi * r * h + 2 * math.pi * r**2\n```"], "prompt_tokens": [51], "completion_tokens": [96], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_574_surfacearea_cylinder"}
{"name": "mbpp_783_rgb_to_hsv", "language": "Python3", "prompt": "from typing import List\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> List[float]:\n    \"\"\"\n\tWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rgb_to_hsv", "test": "def check(candidate):\n    assert candidate(255, 255, 255) == [0.0, 0.0, 100.0]\n    assert candidate(0, 215, 0) == [120.0, 100.0, 84.31372549019608]\n    assert candidate(10, 215, 110) == [149.26829268292684, 95.34883720930233, 84.31372549019608]\n\ndef test_check():\n    check(rgb_to_hsv)\n\ntest_check()\n", "sample_io": ["assert rgb_to_hsv(255, 255, 255) == [0.0, 0.0, 100.0]"], "source_codes": ["\nfrom typing import List\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> List[float]:\n    \"\"\"\n    Convert RGB color space to HSV color space.\n    The input r, g, b values should be in the range [0, 255].\n    The output is a list [h, s, v] where:\n    - h is in [0, 360)\n    - s is in [0, 1]\n    - v is in [0, 1]\n\n    Reference: https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r_norm, g_norm, b_norm = r / 255.0, g / 255.0, b / 255.0\n    \n    cmax = max(r_norm, g_norm, b_norm)    # maximum of r, g, b\n    cmin = min(r_norm, g_norm, b_norm)    # minimum of r, g, b\n    diff = cmax - cmin                     # difference between cmax and cmin\n    \n    # Hue calculation\n    if diff == 0:\n        h = 0\n    elif cmax == r_norm:\n        h = (60 * ((g_norm - b_norm) / diff) + 360) % 360\n    elif cmax == g_norm:\n        h = (60 * ((b_norm - r_norm) / diff) + 120) % 360\n    elif cmax == b_norm:\n        h = (60 * ((r_norm - g_norm) / diff) + 240) % 360\n    \n    # Saturation calculation\n    if cmax == 0:\n        s = 0\n    else:\n        s = diff / cmax\n    \n    # Value calculation\n    v = cmax\n    \n    return [h, s, v]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> List[float]:\n    \"\"\"\n    Convert RGB color space to HSV color space.\n    The input r, g, b values should be in the range [0, 255].\n    The output is a list [h, s, v] where:\n    - h is in [0, 360)\n    - s is in [0, 1]\n    - v is in [0, 1]\n\n    Reference: https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r_norm, g_norm, b_norm = r / 255.0, g / 255.0, b / 255.0\n    \n    cmax = max(r_norm, g_norm, b_norm)    # maximum of r, g, b\n    cmin = min(r_norm, g_norm, b_norm)    # minimum of r, g, b\n    diff = cmax - cmin                     # difference between cmax and cmin\n    \n    # Hue calculation\n    if diff == 0:\n        h = 0\n    elif cmax == r_norm:\n        h = (60 * ((g_norm - b_norm) / diff) + 360) % 360\n    elif cmax == g_norm:\n        h = (60 * ((b_norm - r_norm) / diff) + 120) % 360\n    elif cmax == b_norm:\n        h = (60 * ((r_norm - g_norm) / diff) + 240) % 360\n    \n    # Saturation calculation\n    if cmax == 0:\n        s = 0\n    else:\n        s = diff / cmax\n    \n    # Value calculation\n    v = cmax\n    \n    return [h, s, v]\n```"], "prompt_tokens": [80], "completion_tokens": [397], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_783_rgb_to_hsv"}
{"name": "mbpp_70_get_equal", "language": "Python3", "prompt": "from typing import List\n\ndef get_equal(Input: List[List[int]]) -> bool:\n    \"\"\"\n\tWrite a function to find whether all the given lists have equal length or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_equal", "test": "def check(candidate):\n    assert candidate([[11, 22, 33], [44, 55, 66]]) == True\n    assert candidate([[1, 2, 3], [4, 5, 6, 7]]) == False\n    assert candidate([[1, 2], [3, 4]]) == True\n\ndef test_check():\n    check(get_equal)\n\ntest_check()\n", "sample_io": ["assert get_equal([[11, 22, 33], [44, 55, 66]]) == True"], "source_codes": ["\nfrom typing import List\n\ndef get_equal(Input: List[List[int]]) -> bool:\n    \"\"\"\n    Write a function to find whether all the given lists have equal length or not.\n    \"\"\"\n    if not Input:\n        return True  # Empty input, no lists, so considered equal length\n    \n    length = len(Input[0])\n    return all(len(lst) == length for lst in Input)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef get_equal(Input: List[List[int]]) -> bool:\n    \"\"\"\n    Write a function to find whether all the given lists have equal length or not.\n    \"\"\"\n    if not Input:\n        return True  # Empty input, no lists, so considered equal length\n    \n    length = len(Input[0])\n    return all(len(lst) == length for lst in Input)\n```"], "prompt_tokens": [56], "completion_tokens": [84], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_70_get_equal"}
{"name": "mbpp_267_square_Sum", "language": "Python3", "prompt": "def square_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "square_Sum", "test": "def check(candidate):\n    assert candidate(2) == 10\n    assert candidate(3) == 35\n    assert candidate(4) == 84\n\ndef test_check():\n    check(square_Sum)\n\ntest_check()\n", "sample_io": ["assert square_Sum(2) == 10"], "source_codes": ["\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # The first n odd numbers are: 1, 3, 5, ..., (2n-1)\n    # We sum the squares of these numbers\n    total = 0\n    for i in range(1, 2*n, 2):\n        total += i**2\n    return total\n\n# Example usage:\n# print(square_Sum(3))  # 1^2 + 3^2 + 5^2 = 1 + 9 + 25 = 35\n\n\n"], "responses": ["```python\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # The first n odd numbers are: 1, 3, 5, ..., (2n-1)\n    # We sum the squares of these numbers\n    total = 0\n    for i in range(1, 2*n, 2):\n        total += i**2\n    return total\n\n# Example usage:\n# print(square_Sum(3))  # 1^2 + 3^2 + 5^2 = 1 + 9 + 25 = 35\n```\n"], "prompt_tokens": [59], "completion_tokens": [154], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_267_square_Sum"}
{"name": "mbpp_171_perimeter_pentagon", "language": "Python3", "prompt": "def perimeter_pentagon(a: int) -> int:\n    \"\"\"\n\tWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "perimeter_pentagon", "test": "def check(candidate):\n    assert candidate(5) == 25\n    assert candidate(10) == 50\n    assert candidate(15) == 75\n\ndef test_check():\n    check(perimeter_pentagon)\n\ntest_check()\n", "sample_io": ["assert perimeter_pentagon(5) == 25"], "source_codes": ["\ndef perimeter_pentagon(a: int) -> int:\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    return 5 * a\n\n\n"], "responses": ["```python\ndef perimeter_pentagon(a: int) -> int:\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    return 5 * a\n```"], "prompt_tokens": [54], "completion_tokens": [47], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_171_perimeter_pentagon"}
{"name": "mbpp_222_check_type", "language": "Python3", "prompt": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_type", "test": "def check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n", "sample_io": ["assert check_type((5, 6, 7, 3, 5, 6)) == True"], "source_codes": ["\nfrom typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if not test_tuple:  # empty tuple, consider as True\n        return True\n    \n    first_type = type(test_tuple[0])\n    return all(isinstance(elem, first_type) for elem in test_tuple)\n\n\n"], "responses": ["```python\nfrom typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if not test_tuple:  # empty tuple, consider as True\n        return True\n    \n    first_type = type(test_tuple[0])\n    return all(isinstance(elem, first_type) for elem in test_tuple)\n```"], "prompt_tokens": [57], "completion_tokens": [87], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_222_check_type"}
{"name": "mbpp_164_are_equivalent", "language": "Python3", "prompt": "def are_equivalent(num1: int, num2: int) -> bool:\n    \"\"\"\n\tWrite a function to determine if the sum of the divisors of two integers are the same.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "are_equivalent", "test": "def check(candidate):\n    assert candidate(36, 57) == False\n    assert candidate(2, 4) == False\n    assert candidate(23, 47) == True\n\ndef test_check():\n    check(are_equivalent)\n\ntest_check()\n", "sample_io": ["assert are_equivalent(36, 57) == False"], "source_codes": ["\ndef are_equivalent(num1: int, num2: int) -> bool:\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    def sum_of_divisors(n: int) -> int:\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n    \n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n\n\n"], "responses": ["```python\ndef are_equivalent(num1: int, num2: int) -> bool:\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    def sum_of_divisors(n: int) -> int:\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n    \n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n```"], "prompt_tokens": [59], "completion_tokens": [112], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_164_are_equivalent"}
{"name": "mbpp_803_is_perfect_square", "language": "Python3", "prompt": "def is_perfect_square(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_perfect_square", "test": "def check(candidate):\n    assert candidate(10) == False\n    assert candidate(36) == True\n    assert candidate(14) == False\n    assert candidate(196) == True\n    assert candidate(125) == False\n    assert candidate(15625) == True\n\ndef test_check():\n    check(is_perfect_square)\n\ntest_check()\n", "sample_io": ["assert is_perfect_square(10) == False"], "source_codes": ["\ndef is_perfect_square(n: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    Reference: https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    if n < 0:\n        return False  # Negative numbers cannot be perfect squares\n    \n    # Using integer square root method\n    root = int(n**0.5)\n    return root * root == n\n\n\n"], "responses": ["```python\ndef is_perfect_square(n: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    Reference: https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    if n < 0:\n        return False  # Negative numbers cannot be perfect squares\n    \n    # Using integer square root method\n    root = int(n**0.5)\n    return root * root == n\n```"], "prompt_tokens": [72], "completion_tokens": [106], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_803_is_perfect_square"}
{"name": "mbpp_305_start_withp", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "start_withp", "test": "def check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n", "sample_io": ["assert start_withp(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    If less than two such words exist, raise a ValueError.\n    \"\"\"\n    result = [word for word in words if word.lower().startswith('p')]\n    if len(result) < 2:\n        raise ValueError(\"Less than two words start with 'p'\")\n    return result[0], result[1]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    If less than two such words exist, raise a ValueError.\n    \"\"\"\n    result = [word for word in words if word.lower().startswith('p')]\n    if len(result) < 2:\n        raise ValueError(\"Less than two words start with 'p'\")\n    return result[0], result[1]\n```"], "prompt_tokens": [63], "completion_tokens": [111], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_305_start_withp"}
{"name": "mbpp_617_min_Jumps", "language": "Python3", "prompt": "from typing import Tuple\n\ndef min_Jumps(steps: Tuple[int, int], d: int) -> float:\n    \"\"\"\n\tWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_Jumps", "test": "def check(candidate):\n    assert candidate((3, 4), 11) == 3.5\n    assert candidate((3, 4), 0) == 0\n    assert candidate((11, 14), 11) == 1\n\ndef test_check():\n    check(min_Jumps)\n\ntest_check()\n", "sample_io": ["assert min_Jumps((3, 4), 11) == 3.5"], "source_codes": ["\nfrom typing import Tuple\nimport math\n\ndef min_Jumps(steps: Tuple[int, int], d: int) -> float:\n    \"\"\"\n    Calculate the minimum number of jumps required, each jump being of length sqrt(x^2 + y^2),\n    to reach exactly the point (d, 0) starting from the origin (0,0).\n    \n    Parameters:\n    steps (Tuple[int, int]): A tuple representing the step vector (x, y).\n    d (int): The target distance along the x-axis.\n    \n    Returns:\n    float: The minimum number of jumps required (can be fractional if exact hits are impossible).\n           Returns 1 if a single jump can cover d exactly or exceed d.\n           Otherwise, returns the ceiling of (d / step_length).\n    \"\"\"\n    x, y = steps\n    step_length = math.sqrt(x**2 + y**2)\n    \n    # If step length is exactly d, then 1 jump is enough.\n    if math.isclose(step_length, d, rel_tol=1e-9):\n        return 1\n    \n    # If step length is greater than d, then 1 jump is enough because jumping once overshoots or lands exactly.\n    if step_length > d:\n        return 1\n    \n    # If step length is less than d, we need multiple jumps.\n    # The minimal number of jumps needed is ceiling of (d / step_length).\n    jumps = d / step_length\n    return math.ceil(jumps)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\nimport math\n\ndef min_Jumps(steps: Tuple[int, int], d: int) -> float:\n    \"\"\"\n    Calculate the minimum number of jumps required, each jump being of length sqrt(x^2 + y^2),\n    to reach exactly the point (d, 0) starting from the origin (0,0).\n    \n    Parameters:\n    steps (Tuple[int, int]): A tuple representing the step vector (x, y).\n    d (int): The target distance along the x-axis.\n    \n    Returns:\n    float: The minimum number of jumps required (can be fractional if exact hits are impossible).\n           Returns 1 if a single jump can cover d exactly or exceed d.\n           Otherwise, returns the ceiling of (d / step_length).\n    \"\"\"\n    x, y = steps\n    step_length = math.sqrt(x**2 + y**2)\n    \n    # If step length is exactly d, then 1 jump is enough.\n    if math.isclose(step_length, d, rel_tol=1e-9):\n        return 1\n    \n    # If step length is greater than d, then 1 jump is enough because jumping once overshoots or lands exactly.\n    if step_length > d:\n        return 1\n    \n    # If step length is less than d, we need multiple jumps.\n    # The minimal number of jumps needed is ceiling of (d / step_length).\n    jumps = d / step_length\n    return math.ceil(jumps)\n```\n"], "prompt_tokens": [81], "completion_tokens": [313], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_617_min_Jumps"}
{"name": "mbpp_117_list_to_float", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef list_to_float(test_list: List[Tuple[str, str]]) -> List[Tuple[float, float]]:\n    \"\"\"\n\tWrite a function to convert all possible convertible elements in a list of lists to floats.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "list_to_float", "test": "def check(candidate):\n    assert candidate([('3', '4'), ('1', '26.45'), ('7.32', '8'), ('4', '8')]) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n    assert candidate([('4', '4'), ('2', '27'), ('4.12', '9'), ('7', '11')]) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\n    assert candidate([('6', '78'), ('5', '26.45'), ('1.33', '4'), ('82', '13')]) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\n\ndef test_check():\n    check(list_to_float)\n\ntest_check()\n", "sample_io": ["assert list_to_float([('3', '4'), ('1', '26.45'), ('7.32', '8'), ('4', '8')]) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef list_to_float(test_list: List[Tuple[str, str]]) -> List[Tuple[float, float]]:\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    If conversion is not possible, leave the original string as is.\n    \"\"\"\n    result = []\n    for pair in test_list:\n        new_pair = []\n        for elem in pair:\n            try:\n                new_pair.append(float(elem))\n            except ValueError:\n                new_pair.append(elem)\n        result.append(tuple(new_pair))\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef list_to_float(test_list: List[Tuple[str, str]]) -> List[Tuple[float, float]]:\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    If conversion is not possible, leave the original string as is.\n    \"\"\"\n    result = []\n    for pair in test_list:\n        new_pair = []\n        for elem in pair:\n            try:\n                new_pair.append(float(elem))\n            except ValueError:\n                new_pair.append(elem)\n        result.append(tuple(new_pair))\n    return result\n```"], "prompt_tokens": [69], "completion_tokens": [122], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_117_list_to_float"}
{"name": "mbpp_425_count_element_in_list", "language": "Python3", "prompt": "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    \"\"\"\n\tWrite a function to count the number of sublists containing a particular element.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_425_count_element_in_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_element_in_list", "test": "def check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'A') == 3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'E') == 1\n\ndef test_check():\n    check(count_element_in_list)\n\ntest_check()\n", "sample_io": ["assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3"], "source_codes": ["\nfrom typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n\n    Args:\n    list1 (List[List[Any]]): A list of sublists to check.\n    x (Any): The element to count within sublists.\n\n    Returns:\n    int: Number of sublists containing the element x.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n\n    Args:\n    list1 (List[List[Any]]): A list of sublists to check.\n    x (Any): The element to count within sublists.\n\n    Returns:\n    int: Number of sublists containing the element x.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n```"], "prompt_tokens": [64], "completion_tokens": [127], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_425_count_element_in_list"}
{"name": "mbpp_67_bell_number", "language": "Python3", "prompt": "def bell_number(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the number of ways to partition a set of Bell numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "bell_number", "test": "def check(candidate):\n    assert candidate(2) == 2\n    assert candidate(10) == 115975\n    assert candidate(56) == 6775685320645824322581483068371419745979053216268760300\n\ndef test_check():\n    check(bell_number)\n\ntest_check()\n", "sample_io": ["assert bell_number(2) == 2"], "source_codes": ["\ndef bell_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth Bell number, which represents the number of ways to partition a set of n elements.\n\n    Args:\n    n (int): The number of elements in the set.\n\n    Returns:\n    int: The nth Bell number.\n    \"\"\"\n    # Bell triangle initialization\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        # First element of current row is last element of previous row\n        bell[i][0] = bell[i - 1][i - 1]\n\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(bell_number(0))  # Output: 1\n    print(bell_number(1))  # Output: 1\n    print(bell_number(2))  # Output: 2\n    print(bell_number(3))  # Output: 5\n    print(bell_number(4))  # Output: 15\n\n\n"], "responses": ["```python\ndef bell_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth Bell number, which represents the number of ways to partition a set of n elements.\n\n    Args:\n    n (int): The number of elements in the set.\n\n    Returns:\n    int: The nth Bell number.\n    \"\"\"\n    # Bell triangle initialization\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        # First element of current row is last element of previous row\n        bell[i][0] = bell[i - 1][i - 1]\n\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(bell_number(0))  # Output: 1\n    print(bell_number(1))  # Output: 1\n    print(bell_number(2))  # Output: 2\n    print(bell_number(3))  # Output: 5\n    print(bell_number(4))  # Output: 15\n```\n"], "prompt_tokens": [50], "completion_tokens": [285], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_67_bell_number"}
{"name": "mbpp_404_minimum", "language": "Python3", "prompt": "def minimum(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a python function to find the minimum of two numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_404_minimum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "minimum", "test": "def check(candidate):\n    assert candidate(1, 2) == 1\n    assert candidate(-5, -4) == -5\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(minimum)\n\ntest_check()\n", "sample_io": ["assert minimum(1, 2) == 1"], "source_codes": ["\ndef minimum(a: int, b: int) -> int:\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n\n\n"], "responses": ["```python\ndef minimum(a: int, b: int) -> int:\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n```"], "prompt_tokens": [48], "completion_tokens": [51], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_404_minimum"}
{"name": "mbpp_14_find_Volume", "language": "Python3", "prompt": "def find_Volume(l: int, b: int, h: int) -> int:\n    \"\"\"\n\tWrite a python function to find the volume of a triangular prism.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Volume", "test": "def check(candidate):\n    assert candidate(10, 8, 6) == 240\n    assert candidate(3, 2, 2) == 6\n    assert candidate(1, 2, 1) == 1\n\ndef test_check():\n    check(find_Volume)\n\ntest_check()\n", "sample_io": ["assert find_Volume(10, 8, 6) == 240"], "source_codes": ["\ndef find_Volume(l: int, b: int, h: int) -> int:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    l (int): length of the base of the triangle\n    b (int): height of the triangle base\n    h (int): height (length) of the prism\n\n    Returns:\n    int: volume of the triangular prism\n    \"\"\"\n    # Area of triangle base = 0.5 * l * b\n    base_area = 0.5 * l * b\n\n    # Volume = base area * height of prism\n    volume = base_area * h\n\n    return int(volume)\n\n\n"], "responses": ["```python\ndef find_Volume(l: int, b: int, h: int) -> int:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    l (int): length of the base of the triangle\n    b (int): height of the triangle base\n    h (int): height (length) of the prism\n\n    Returns:\n    int: volume of the triangular prism\n    \"\"\"\n    # Area of triangle base = 0.5 * l * b\n    base_area = 0.5 * l * b\n\n    # Volume = base area * height of prism\n    volume = base_area * h\n\n    return int(volume)\n```"], "prompt_tokens": [55], "completion_tokens": [141], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_14_find_Volume"}
{"name": "mbpp_8_square_nums", "language": "Python3", "prompt": "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find squares of individual elements in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "square_nums", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10, 20, 30]) == [100, 400, 900]\n    assert candidate([12, 15]) == [144, 225]\n\ndef test_check():\n    check(square_nums)\n\ntest_check()\n", "sample_io": ["assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"], "source_codes": ["\nfrom typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [num ** 2 for num in nums]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [num ** 2 for num in nums]\n```"], "prompt_tokens": [53], "completion_tokens": [51], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_8_square_nums"}
{"name": "mbpp_722_filter_data", "language": "Python3", "prompt": "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, int]], h: float, w: int) -> Dict[str, Tuple[float, int]]:\n    \"\"\"\n\tThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "filter_data", "test": "def check(candidate):\n    assert candidate({ 'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66) }, 6.0, 70) == { 'Cierra Vega': (6.2, 70) }\n    assert candidate({ 'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66) }, 5.9, 67) == { 'Cierra Vega': (6.2, 70), 'Kierra Gentry': (6.0, 68) }\n    assert candidate({ 'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66) }, 5.7, 64) == { 'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66) }\n\ndef test_check():\n    check(filter_data)\n\ntest_check()\n", "sample_io": ["assert filter_data({ 'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66) }, 6.0, 70) == { 'Cierra Vega': (6.2, 70) }"], "source_codes": ["\nfrom typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, int]], h: float, w: int) -> Dict[str, Tuple[float, int]]:\n    \"\"\"\n    The input is given as:\n    - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value,\n    - minimal height,\n    - minimal weight.\n    \n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}\n\n\n"], "responses": ["```python\nfrom typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, int]], h: float, w: int) -> Dict[str, Tuple[float, int]]:\n    \"\"\"\n    The input is given as:\n    - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value,\n    - minimal height,\n    - minimal weight.\n    \n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}\n```"], "prompt_tokens": [115], "completion_tokens": [138], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_722_filter_data"}
{"name": "mbpp_244_next_Perfect_Square", "language": "Python3", "prompt": "def next_Perfect_Square(N: int) -> int:\n    \"\"\"\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "next_Perfect_Square", "test": "def check(candidate):\n    assert candidate(35) == 36\n    assert candidate(6) == 9\n    assert candidate(9) == 16\n\ndef test_check():\n    check(next_Perfect_Square)\n\ntest_check()\n", "sample_io": ["assert next_Perfect_Square(35) == 36"], "source_codes": ["\ndef next_Perfect_Square(N: int) -> int:\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    import math\n\n    # Find the integer part of the square root of N\n    root = int(math.sqrt(N))\n\n    # Next perfect square is the square of (root + 1)\n    next_square = (root + 1) ** 2\n\n    return next_square\n\n\n"], "responses": ["```python\ndef next_Perfect_Square(N: int) -> int:\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    import math\n\n    # Find the integer part of the square root of N\n    root = int(math.sqrt(N))\n\n    # Next perfect square is the square of (root + 1)\n    next_square = (root + 1) ** 2\n\n    return next_square\n```"], "prompt_tokens": [52], "completion_tokens": [97], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_244_next_Perfect_Square"}
{"name": "mbpp_755_second_smallest", "language": "Python3", "prompt": "from typing import List, Union, Optional\n\ndef second_smallest(numbers: List[Union[int, float]]) -> Optional[float]:\n    \"\"\"\n\tWrite a function to find the second smallest number in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "second_smallest", "test": "def check(candidate):\n    assert candidate([1, 2, -8, -2, 0, -2]) == -2\n    assert candidate([1, 1, -0.5, 0, 2, -2, -2]) == -0.5\n    assert candidate([2, 2]) == None\n    assert candidate([2, 2, 2]) == None\n\ndef test_check():\n    check(second_smallest)\n\ntest_check()\n", "sample_io": ["assert second_smallest([1, 2, -8, -2, 0, -2]) == -2"], "source_codes": ["\nfrom typing import List, Union, Optional\n\ndef second_smallest(numbers: List[Union[int, float]]) -> Optional[float]:\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    Returns None if there is no second smallest number.\n    \"\"\"\n    unique_numbers = sorted(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    return unique_numbers[1]\n\n\n"], "responses": ["```python\nfrom typing import List, Union, Optional\n\ndef second_smallest(numbers: List[Union[int, float]]) -> Optional[float]:\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    Returns None if there is no second smallest number.\n    \"\"\"\n    unique_numbers = sorted(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    return unique_numbers[1]\n```"], "prompt_tokens": [62], "completion_tokens": [88], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_755_second_smallest"}
{"name": "mbpp_405_check_tuplex", "language": "Python3", "prompt": "from typing import List, Union, Any\n\ndef check_tuplex(tuplex: List[Union[str, int]], tuple1: Any) -> bool:\n    \"\"\"\n\tWrite a function to check whether an element exists within a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_405_check_tuplex.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_tuplex", "test": "def check(candidate):\n    assert candidate(['w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'], 'r') == True\n    assert candidate(['w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'], '5') == False\n    assert candidate(['w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'], 3) == True\n\ndef test_check():\n    check(check_tuplex)\n\ntest_check()\n", "sample_io": ["assert check_tuplex(['w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'], 'r') == True"], "source_codes": ["\nfrom typing import List, Union, Any\n\ndef check_tuplex(tuplex: List[Union[str, int]], tuple1: Any) -> bool:\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    Here, 'tuple1' is the element to check.\n    \"\"\"\n    return tuple1 in tuplex\n\n# Example usage:\n# tuplex = ['a', 1, 'b', 2]\n# print(check_tuplex(tuplex, 'a'))  # True\n# print(check_tuplex(tuplex, 3))    # False\n\n\n"], "responses": ["```python\nfrom typing import List, Union, Any\n\ndef check_tuplex(tuplex: List[Union[str, int]], tuple1: Any) -> bool:\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    Here, 'tuple1' is the element to check.\n    \"\"\"\n    return tuple1 in tuplex\n\n# Example usage:\n# tuplex = ['a', 1, 'b', 2]\n# print(check_tuplex(tuplex, 'a'))  # True\n# print(check_tuplex(tuplex, 3))    # False\n```"], "prompt_tokens": [69], "completion_tokens": [130], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_405_check_tuplex"}
{"name": "mbpp_292_find", "language": "Python3", "prompt": "def find(n: int, m: int) -> int:\n    \"\"\"\n\tWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find", "test": "def check(candidate):\n    assert candidate(10, 3) == 3\n    assert candidate(4, 2) == 2\n    assert candidate(20, 5) == 4\n\ndef test_check():\n    check(find)\n\ntest_check()\n", "sample_io": ["assert find(10, 3) == 3"], "source_codes": ["\ndef find(n: int, m: int) -> int:\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    if m == 0:\n        raise ValueError(\"Division by zero is not allowed\")\n    return n // m\n\n\n"], "responses": ["```python\ndef find(n: int, m: int) -> int:\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    if m == 0:\n        raise ValueError(\"Division by zero is not allowed\")\n    return n // m\n```"], "prompt_tokens": [54], "completion_tokens": [64], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_292_find"}
{"name": "mbpp_603_get_ludic", "language": "Python3", "prompt": "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    \"\"\"\n\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_603_get_ludic.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_ludic", "test": "def check(candidate):\n    assert candidate(10) == [1, 2, 3, 5, 7]\n    assert candidate(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n    assert candidate(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n\ndef test_check():\n    check(get_ludic)\n\ntest_check()\n", "sample_io": ["assert get_ludic(10) == [1, 2, 3, 5, 7]"], "source_codes": ["\nfrom typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    \"\"\"\n    Generate all ludic numbers smaller than or equal to n.\n\n    Ludic numbers are defined by the following sieve process:\n    Start with the list of natural numbers > 1: [2, 3, 4, 5, 6, ...]\n    The first number in the list is the first ludic number (2).\n    Then, remove every 2nd number in the list.\n    The next number after 2 remaining in the list is 3, the next ludic number.\n    Remove every 3rd number in the list.\n    Then the next ludic number is 5, remove every 5th number, and so on.\n    Continue this process until the ludic number is greater than n.\n\n    Args:\n        n (int): The upper limit to get ludic numbers up to.\n\n    Returns:\n        List[int]: A list of all ludic numbers <= n.\n    \"\"\"\n    if n < 2:\n        return []\n\n    numbers = list(range(2, n+1))\n    index = 0\n\n    while index < len(numbers):\n        ludic = numbers[index]\n        if ludic > n:\n            break\n        # Remove every ludic-th number after the current index\n        # We use 1-based for counting removal steps, starting from index+1\n        # The removal starts from index + ludic (0-based)\n        filtered = []\n        count = 0\n        for i in range(len(numbers)):\n            if i <= index:\n                filtered.append(numbers[i])\n            else:\n                count += 1\n                if count % ludic != 0:\n                    filtered.append(numbers[i])\n        numbers = filtered\n        index += 1\n\n    return numbers\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    \"\"\"\n    Generate all ludic numbers smaller than or equal to n.\n\n    Ludic numbers are defined by the following sieve process:\n    Start with the list of natural numbers > 1: [2, 3, 4, 5, 6, ...]\n    The first number in the list is the first ludic number (2).\n    Then, remove every 2nd number in the list.\n    The next number after 2 remaining in the list is 3, the next ludic number.\n    Remove every 3rd number in the list.\n    Then the next ludic number is 5, remove every 5th number, and so on.\n    Continue this process until the ludic number is greater than n.\n\n    Args:\n        n (int): The upper limit to get ludic numbers up to.\n\n    Returns:\n        List[int]: A list of all ludic numbers <= n.\n    \"\"\"\n    if n < 2:\n        return []\n\n    numbers = list(range(2, n+1))\n    index = 0\n\n    while index < len(numbers):\n        ludic = numbers[index]\n        if ludic > n:\n            break\n        # Remove every ludic-th number after the current index\n        # We use 1-based for counting removal steps, starting from index+1\n        # The removal starts from index + ludic (0-based)\n        filtered = []\n        count = 0\n        for i in range(len(numbers)):\n            if i <= index:\n                filtered.append(numbers[i])\n            else:\n                count += 1\n                if count % ludic != 0:\n                    filtered.append(numbers[i])\n        numbers = filtered\n        index += 1\n\n    return numbers\n```"], "prompt_tokens": [59], "completion_tokens": [380], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_603_get_ludic"}
{"name": "mbpp_734_sum_Of_Subarray_Prod", "language": "Python3", "prompt": "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_Of_Subarray_Prod", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 20\n    assert candidate([1, 2]) == 5\n    assert candidate([1, 2, 3, 4]) == 84\n\ndef test_check():\n    check(sum_Of_Subarray_Prod)\n\ntest_check()\n", "sample_io": ["assert sum_Of_Subarray_Prod([1, 2, 3]) == 20"], "source_codes": ["\nfrom typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    Reference: https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \"\"\"\n    n = len(arr)\n    # dp[i] will store sum of products of all subarrays ending at index i\n    dp = [0]*n\n    dp[0] = arr[0]\n\n    for i in range(1, n):\n        dp[i] = arr[i] + arr[i] * dp[i-1]\n\n    return sum(dp)\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [1, 2, 3]\n    print(sum_Of_Subarray_Prod(arr)) # Output: 20\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    Reference: https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \"\"\"\n    n = len(arr)\n    # dp[i] will store sum of products of all subarrays ending at index i\n    dp = [0]*n\n    dp[0] = arr[0]\n\n    for i in range(1, n):\n        dp[i] = arr[i] + arr[i] * dp[i-1]\n\n    return sum(dp)\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [1, 2, 3]\n    print(sum_Of_Subarray_Prod(arr)) # Output: 20\n```\n\n# Explanation:\n- `dp[i]` stores the sum of products of all subarrays ending at index `i`.\n- For each element `arr[i]`, the sum of products of subarrays ending at `i` is the element itself plus the element times the sum of products ending at `i-1`.\n- Summing over all `dp[i]` gives the sum of products of all possible subarrays."], "prompt_tokens": [81], "completion_tokens": [272], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_734_sum_Of_Subarray_Prod"}
{"name": "mbpp_563_extract_values", "language": "Python3", "prompt": "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    \"\"\"\n\tWrite a function to extract values between quotation marks from a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_values", "test": "def check(candidate):\n    assert candidate('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']\n    assert candidate('\"python\",\"program\",\"language\"') == ['python', 'program', 'language']\n    assert candidate('\"red\",\"blue\",\"green\",\"yellow\"') == ['red', 'blue', 'green', 'yellow']\n\ndef test_check():\n    check(extract_values)\n\ntest_check()\n", "sample_io": ["assert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']"], "source_codes": ["\nfrom typing import List\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    # This regex matches characters between double quotes, including escaped quotes inside\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)\n\n\n"], "responses": ["```python\nfrom typing import List\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    # This regex matches characters between double quotes, including escaped quotes inside\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)\n```"], "prompt_tokens": [52], "completion_tokens": [74], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_563_extract_values"}
{"name": "mbpp_567_issort_list", "language": "Python3", "prompt": "from typing import List\n\ndef issort_list(list1: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check whether a specified list is sorted or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "issort_list", "test": "def check(candidate):\n    assert candidate([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True\n    assert candidate([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == False\n    assert candidate([1, 2, 4, 6, 8, 10, 15, 14, 20]) == False\n\ndef test_check():\n    check(issort_list)\n\ntest_check()\n", "sample_io": ["assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True"], "source_codes": ["\nfrom typing import List\n\ndef issort_list(list1: List[int]) -> bool:\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    return all(list1[i] <= list1[i+1] for i in range(len(list1) - 1))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef issort_list(list1: List[int]) -> bool:\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    return all(list1[i] <= list1[i+1] for i in range(len(list1) - 1))\n```"], "prompt_tokens": [55], "completion_tokens": [67], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_567_issort_list"}
{"name": "mbpp_475_sort_counter", "language": "Python3", "prompt": "from typing import Dict, List, Tuple\n\ndef sort_counter(dict1: Dict[str, int]) -> List[Tuple[str, int]]:\n    \"\"\"\n\tWrite a function to sort a dictionary by value.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_counter", "test": "def check(candidate):\n    assert candidate({ 'Math': 81, 'Physics': 83, 'Chemistry': 87 }) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    assert candidate({ 'Math': 400, 'Physics': 300, 'Chemistry': 250 }) == [('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    assert candidate({ 'Math': 900, 'Physics': 1000, 'Chemistry': 1250 }) == [('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n\ndef test_check():\n    check(sort_counter)\n\ntest_check()\n", "sample_io": ["assert sort_counter({ 'Math': 81, 'Physics': 83, 'Chemistry': 87 }) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]"], "source_codes": ["\nfrom typing import Dict, List, Tuple\n\ndef sort_counter(dict1: Dict[str, int]) -> List[Tuple[str, int]]:\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    return sorted(dict1.items(), key=lambda item: item[1])\n\n\n"], "responses": ["```python\nfrom typing import Dict, List, Tuple\n\ndef sort_counter(dict1: Dict[str, int]) -> List[Tuple[str, int]]:\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    return sorted(dict1.items(), key=lambda item: item[1])\n```"], "prompt_tokens": [61], "completion_tokens": [62], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_475_sort_counter"}
{"name": "mbpp_65_recursive_list_sum", "language": "Python3", "prompt": "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List[int]]]) -> int:\n    \"\"\"\n\tWrite a function to flatten a list and sum all of its elements.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "recursive_list_sum", "test": "def check(candidate):\n    assert candidate([1, 2, [3, 4], [5, 6]]) == 21\n    assert candidate([7, 10, [15, 14], [19, 41]]) == 106\n    assert candidate([10, 20, [30, 40], [50, 60]]) == 210\n\ndef test_check():\n    check(recursive_list_sum)\n\ntest_check()\n", "sample_io": ["assert recursive_list_sum([1, 2, [3, 4], [5, 6]]) == 21"], "source_codes": ["\nfrom typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List[int]]]) -> int:\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)  # recursively sum nested lists\n        else:\n            total += item  # add integer value\n    return total\n\n# Example usage:\n# print(recursive_list_sum([1, [2, 3], 4, [5, [6]]]))  # Output: 21\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List[int]]]) -> int:\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)  # recursively sum nested lists\n        else:\n            total += item  # add integer value\n    return total\n\n# Example usage:\n# print(recursive_list_sum([1, [2, 3], 4, [5, [6]]]))  # Output: 21\n```"], "prompt_tokens": [63], "completion_tokens": [137], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_65_recursive_list_sum"}
{"name": "mbpp_560_union_elements", "language": "Python3", "prompt": "from typing import List\n\ndef union_elements(test_tup1: List[int], test_tup2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find the union of the elements of two given lists and output them in sorted order.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "union_elements", "test": "def check(candidate):\n    assert candidate([3, 4, 5, 6], [5, 7, 4, 10]) == [3, 4, 5, 6, 7, 10]\n    assert candidate([1, 2, 3, 4], [3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert candidate([11, 12, 13, 14], [13, 15, 16, 17]) == [11, 12, 13, 14, 15, 16, 17]\n\ndef test_check():\n    check(union_elements)\n\ntest_check()\n", "sample_io": ["assert union_elements([3, 4, 5, 6], [5, 7, 4, 10]) == [3, 4, 5, 6, 7, 10]"], "source_codes": ["\nfrom typing import List\n\ndef union_elements(test_tup1: List[int], test_tup2: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to find the union of the elements of two given lists and output them in sorted order.\n    \"\"\"\n    # Use set to find unique elements from both lists\n    union_set = set(test_tup1) | set(test_tup2)\n    # Return the sorted list of the union\n    return sorted(union_set)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef union_elements(test_tup1: List[int], test_tup2: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to find the union of the elements of two given lists and output them in sorted order.\n    \"\"\"\n    # Use set to find unique elements from both lists\n    union_set = set(test_tup1) | set(test_tup2)\n    # Return the sorted list of the union\n    return sorted(union_set)\n```"], "prompt_tokens": [72], "completion_tokens": [104], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_560_union_elements"}
{"name": "mbpp_737_check_str", "language": "Python3", "prompt": "def check_str(string: str) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given string is starting with a vowel or not using regex.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_str", "test": "def check(candidate):\n    assert candidate('annie') == True\n    assert candidate('dawood') == False\n    assert candidate('Else') == True\n\ndef test_check():\n    check(check_str)\n\ntest_check()\n", "sample_io": ["assert check_str('annie') == True"], "source_codes": ["\nimport re\n\ndef check_str(string: str) -> bool:\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, string))\n\n\n"], "responses": ["```python\nimport re\n\ndef check_str(string: str) -> bool:\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, string))\n```"], "prompt_tokens": [52], "completion_tokens": [62], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_737_check_str"}
{"name": "mbpp_626_triangle_area", "language": "Python3", "prompt": "from typing import Optional\n\ndef triangle_area(r: int) -> Optional[int]:\n    \"\"\"\n\tWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "triangle_area", "test": "def check(candidate):\n    assert candidate(-1) == None\n    assert candidate(0) == 0\n    assert candidate(2) == 4\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n", "sample_io": ["assert triangle_area(-1) == None"], "source_codes": ["\nfrom typing import Optional\nimport math\n\ndef triangle_area(r: int) -> Optional[int]:\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \n    The largest triangle inscribed in a semicircle is a right triangle with the diameter as the hypotenuse.\n    The maximum area triangle is a right triangle with legs equal to the radius r each.\n    \n    The area of the triangle = (1/2) * base * height.\n    Here base and height = r.\n    \n    So, area = (1/2) * r * r = r^2 / 2.\n    \n    Since the return type is Optional[int], return the integer part of the area.\n    \"\"\"\n    if r <= 0:\n        return None\n    \n    area = (r * r) / 2\n    return int(area)\n\n\n"], "responses": ["```python\nfrom typing import Optional\nimport math\n\ndef triangle_area(r: int) -> Optional[int]:\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \n    The largest triangle inscribed in a semicircle is a right triangle with the diameter as the hypotenuse.\n    The maximum area triangle is a right triangle with legs equal to the radius r each.\n    \n    The area of the triangle = (1/2) * base * height.\n    Here base and height = r.\n    \n    So, area = (1/2) * r * r = r^2 / 2.\n    \n    Since the return type is Optional[int], return the integer part of the area.\n    \"\"\"\n    if r <= 0:\n        return None\n    \n    area = (r * r) / 2\n    return int(area)\n```"], "prompt_tokens": [66], "completion_tokens": [193], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_626_triangle_area"}
{"name": "mbpp_253_count_integer", "language": "Python3", "prompt": "from typing import List, Union\n\ndef count_integer(list1: List[Union[int, str, float]]) -> int:\n    \"\"\"\n\tWrite a python function that returns the number of integer elements in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_253_count_integer.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_integer", "test": "def check(candidate):\n    assert candidate([1, 2, 'abc', 1.2]) == 2\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([1, 1.2, 4, 5.1]) == 2\n\ndef test_check():\n    check(count_integer)\n\ntest_check()\n", "sample_io": ["assert count_integer([1, 2, 'abc', 1.2]) == 2"], "source_codes": ["\nfrom typing import List, Union\n\ndef count_integer(list1: List[Union[int, str, float]]) -> int:\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef count_integer(list1: List[Union[int, str, float]]) -> int:\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n```"], "prompt_tokens": [64], "completion_tokens": [80], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_253_count_integer"}
{"name": "mbpp_463_max_subarray_product", "language": "Python3", "prompt": "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum product subarray of the given array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_subarray_product", "test": "def check(candidate):\n    assert candidate([1, -2, -3, 0, 7, -8, -2]) == 112\n    assert candidate([6, -3, -10, 0, 2]) == 180\n    assert candidate([-2, -40, 0, -2, -3]) == 80\n\ndef test_check():\n    check(max_subarray_product)\n\ntest_check()\n", "sample_io": ["assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112"], "source_codes": ["\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    max_prod = min_prod = result = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            # Swap max_prod and min_prod when multiplied by a negative number\n            max_prod, min_prod = min_prod, max_prod\n        \n        max_prod = max(num, max_prod * num)\n        min_prod = min(num, min_prod * num)\n        \n        result = max(result, max_prod)\n    \n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    max_prod = min_prod = result = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            # Swap max_prod and min_prod when multiplied by a negative number\n            max_prod, min_prod = min_prod, max_prod\n        \n        max_prod = max(num, max_prod * num)\n        min_prod = min(num, min_prod * num)\n        \n        result = max(result, max_prod)\n    \n    return result\n```"], "prompt_tokens": [56], "completion_tokens": [148], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_463_max_subarray_product"}
{"name": "mbpp_223_is_majority", "language": "Python3", "prompt": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_majority", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n", "sample_io": ["assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"], "source_codes": ["\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element \n    and returns whether the element is the majority element in the given sorted array.\n    (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    # Helper function to perform binary search and return the first occurrence index of x\n    def first_occurrence(arr: List[int], x: int) -> int:\n        low, high = 0, n-1\n        ans = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == x:\n                ans = mid\n                high = mid - 1  # keep searching in left half\n            elif arr[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return ans\n\n    # Helper function to perform binary search and return the last occurrence index of x\n    def last_occurrence(arr: List[int], x: int) -> int:\n        low, high = 0, n-1\n        ans = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == x:\n                ans = mid\n                low = mid + 1  # keep searching in right half\n            elif arr[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return ans\n\n    first = first_occurrence(arr, x)\n    if first == -1:\n        return False\n    \n    last = last_occurrence(arr, x)\n    count = last - first + 1\n    return count > n // 2\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element \n    and returns whether the element is the majority element in the given sorted array.\n    (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    # Helper function to perform binary search and return the first occurrence index of x\n    def first_occurrence(arr: List[int], x: int) -> int:\n        low, high = 0, n-1\n        ans = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == x:\n                ans = mid\n                high = mid - 1  # keep searching in left half\n            elif arr[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return ans\n\n    # Helper function to perform binary search and return the last occurrence index of x\n    def last_occurrence(arr: List[int], x: int) -> int:\n        low, high = 0, n-1\n        ans = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == x:\n                ans = mid\n                low = mid + 1  # keep searching in right half\n            elif arr[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return ans\n\n    first = first_occurrence(arr, x)\n    if first == -1:\n        return False\n    \n    last = last_occurrence(arr, x)\n    count = last - first + 1\n    return count > n // 2\n```"], "prompt_tokens": [97], "completion_tokens": [394], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_223_is_majority"}
{"name": "mbpp_794_text_starta_endb", "language": "Python3", "prompt": "def text_starta_endb(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_starta_endb", "test": "def check(candidate):\n    assert candidate('aabbbb') == True\n    assert candidate('aabAbbbc') == False\n    assert candidate('accddbbjjj') == False\n\ndef test_check():\n    check(text_starta_endb)\n\ntest_check()\n", "sample_io": ["assert text_starta_endb('aabbbb') == True"], "source_codes": ["\nimport re\n\ndef text_starta_endb(text: str) -> bool:\n    \"\"\"\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    \"\"\"\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))\n\n\n"], "responses": ["```python\nimport re\n\ndef text_starta_endb(text: str) -> bool:\n    \"\"\"\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    \"\"\"\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))\n```"], "prompt_tokens": [58], "completion_tokens": [66], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_794_text_starta_endb"}
{"name": "mbpp_79_word_len", "language": "Python3", "prompt": "def word_len(s: str) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the length of the word is odd or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "word_len", "test": "def check(candidate):\n    assert candidate('Hadoop') == False\n    assert candidate('great') == True\n    assert candidate('structure') == True\n\ndef test_check():\n    check(word_len)\n\ntest_check()\n", "sample_io": ["assert word_len('Hadoop') == False"], "source_codes": ["\ndef word_len(s: str) -> bool:\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    return len(s) % 2 == 1\n\n\n"], "responses": ["```python\ndef word_len(s: str) -> bool:\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    return len(s) % 2 == 1\n```"], "prompt_tokens": [50], "completion_tokens": [48], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_79_word_len"}
{"name": "mbpp_390_add_string", "language": "Python3", "prompt": "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    \"\"\"\n\tWrite a function to apply a given format string to all of the elements in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_string", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']\n    assert candidate(['a', 'b', 'c', 'd'], 'python{0}') == ['pythona', 'pythonb', 'pythonc', 'pythond']\n    assert candidate([5, 6, 7, 8], 'string{0}') == ['string5', 'string6', 'string7', 'string8']\n\ndef test_check():\n    check(add_string)\n\ntest_check()\n", "sample_io": ["assert add_string([1, 2, 3, 4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']"], "source_codes": ["\nfrom typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \n    Parameters:\n    list_ (List[Any]): A list of elements to format.\n    string (str): A format string that contains one placeholder (e.g. '{}') to format each element.\n    \n    Returns:\n    List[str]: A list of formatted strings.\n    \"\"\"\n    return [string.format(item) for item in list_]\n\n\n# Example usage:\n# lst = [1, 2, 3]\n# fmt = \"Number: {}\"\n# print(add_string(lst, fmt))\n# Output: ['Number: 1', 'Number: 2', 'Number: 3']\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \n    Parameters:\n    list_ (List[Any]): A list of elements to format.\n    string (str): A format string that contains one placeholder (e.g. '{}') to format each element.\n    \n    Returns:\n    List[str]: A list of formatted strings.\n    \"\"\"\n    return [string.format(item) for item in list_]\n\n\n# Example usage:\n# lst = [1, 2, 3]\n# fmt = \"Number: {}\"\n# print(add_string(lst, fmt))\n# Output: ['Number: 1', 'Number: 2', 'Number: 3']\n```"], "prompt_tokens": [64], "completion_tokens": [171], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_390_add_string"}
{"name": "mbpp_741_all_Characters_Same", "language": "Python3", "prompt": "def all_Characters_Same(s: str) -> bool:\n    \"\"\"\n\tWrite a python function to check whether all the characters are same or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "all_Characters_Same", "test": "def check(candidate):\n    assert candidate('python') == False\n    assert candidate('aaa') == True\n    assert candidate('data') == False\n\ndef test_check():\n    check(all_Characters_Same)\n\ntest_check()\n", "sample_io": ["assert all_Characters_Same('python') == False"], "source_codes": ["\ndef all_Characters_Same(s: str) -> bool:\n    \"\"\"\n    Check whether all the characters in the string are the same.\n    \"\"\"\n    if not s:\n        return True  # Assuming empty string returns True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True\n\n\n"], "responses": ["```python\ndef all_Characters_Same(s: str) -> bool:\n    \"\"\"\n    Check whether all the characters in the string are the same.\n    \"\"\"\n    if not s:\n        return True  # Assuming empty string returns True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True\n```"], "prompt_tokens": [51], "completion_tokens": [79], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_741_all_Characters_Same"}
{"name": "mbpp_775_odd_position", "language": "Python3", "prompt": "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_position", "test": "def check(candidate):\n    assert candidate([2, 1, 4, 3, 6, 7, 6, 3]) == True\n    assert candidate([4, 1, 2]) == True\n    assert candidate([1, 2, 3]) == False\n\ndef test_check():\n    check(odd_position)\n\ntest_check()\n", "sample_io": ["assert odd_position([2, 1, 4, 3, 6, 7, 6, 3]) == True"], "source_codes": ["\nfrom typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):  # iterate over odd indices\n        if nums[i] % 2 == 0:  # check if element at odd index is not odd\n            return False\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):  # iterate over odd indices\n        if nums[i] % 2 == 0:  # check if element at odd index is not odd\n            return False\n    return True\n```"], "prompt_tokens": [57], "completion_tokens": [96], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_775_odd_position"}
{"name": "mbpp_644_reverse_Array_Upto_K", "language": "Python3", "prompt": "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    \"\"\"\n\tWrite a python function to reverse an array upto a given position.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "reverse_Array_Upto_K", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]\n    assert candidate([4, 5, 6, 7], 2) == [5, 4, 6, 7]\n    assert candidate([9, 8, 7, 6, 5], 3) == [7, 8, 9, 6, 5]\n\ndef test_check():\n    check(reverse_Array_Upto_K)\n\ntest_check()\n", "sample_io": ["assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]"], "source_codes": ["\nfrom typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n\n    Parameters:\n    input (List[int]): The list of integers to be processed.\n    k (int): The position up to which the array should be reversed (0-based index).\n\n    Returns:\n    List[int]: The array with elements reversed up to position k.\n    \"\"\"\n    # Ensure k is within bounds\n    if k < 0 or k >= len(input):\n        return input  # No change if k is out of range\n    \n    # Reverse elements from start to k (inclusive)\n    return input[:k+1][::-1] + input[k+1:]\n\n\n# Example usage:\n# print(reverse_Array_Upto_K([1, 2, 3, 4, 5], 2))  # Output: [3, 2, 1, 4, 5]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n\n    Parameters:\n    input (List[int]): The list of integers to be processed.\n    k (int): The position up to which the array should be reversed (0-based index).\n\n    Returns:\n    List[int]: The array with elements reversed up to position k.\n    \"\"\"\n    # Ensure k is within bounds\n    if k < 0 or k >= len(input):\n        return input  # No change if k is out of range\n    \n    # Reverse elements from start to k (inclusive)\n    return input[:k+1][::-1] + input[k+1:]\n\n\n# Example usage:\n# print(reverse_Array_Upto_K([1, 2, 3, 4, 5], 2))  # Output: [3, 2, 1, 4, 5]\n```"], "prompt_tokens": [60], "completion_tokens": [211], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_644_reverse_Array_Upto_K"}
{"name": "mbpp_588_big_diff", "language": "Python3", "prompt": "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the difference between largest and smallest value in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "big_diff", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4]) == 3\n    assert candidate([4, 5, 12]) == 8\n    assert candidate([9, 2, 3]) == 7\n\ndef test_check():\n    check(big_diff)\n\ntest_check()\n", "sample_io": ["assert big_diff([1, 2, 3, 4]) == 3"], "source_codes": ["\nfrom typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if not nums:\n        return 0  # or raise an error depending on requirements\n    return max(nums) - min(nums)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if not nums:\n        return 0  # or raise an error depending on requirements\n    return max(nums) - min(nums)\n```"], "prompt_tokens": [57], "completion_tokens": [71], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_588_big_diff"}
{"name": "mbpp_297_flatten_list", "language": "Python3", "prompt": "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List[int]]]) -> List[int]:\n    \"\"\"\n\tWrite a function to flatten a given nested list structure.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "flatten_list", "test": "def check(candidate):\n    assert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    assert candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n\ndef test_check():\n    check(flatten_list)\n\ntest_check()\n", "sample_io": ["assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"], "source_codes": ["\nfrom typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List[int]]]) -> List[int]:\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for element in list1:\n        if isinstance(element, list):\n            result.extend(element)\n        else:\n            result.append(element)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List[int]]]) -> List[int]:\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for element in list1:\n        if isinstance(element, list):\n            result.extend(element)\n        else:\n            result.append(element)\n    return result\n```"], "prompt_tokens": [60], "completion_tokens": [81], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_297_flatten_list"}
{"name": "mbpp_445_index_multiplication", "language": "Python3", "prompt": "from typing import List\n\ndef index_multiplication(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to perform index wise multiplication of list elements in the given two lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "index_multiplication", "test": "def check(candidate):\n    assert candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[6, 21], [12, 45], [2, 9], [7, 30]]\n    assert candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]) == [[14, 32], [20, 60], [6, 20], [16, 44]]\n    assert candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]) == [[24, 45], [30, 77], [12, 33], [27, 60]]\n\ndef test_check():\n    check(index_multiplication)\n\ntest_check()\n", "sample_io": ["assert index_multiplication([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[6, 21], [12, 45], [2, 9], [7, 30]]"], "source_codes": ["\nfrom typing import List\n\ndef index_multiplication(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Write a function to perform index wise multiplication of list elements in the given two lists.\n    \n    Args:\n    test_tup1: List[List[int]] -- First 2D list of integers.\n    test_tup2: List[List[int]] -- Second 2D list of integers.\n    \n    Returns:\n    List[List[int]] -- Resultant 2D list after index wise multiplication.\n    \"\"\"\n    # Check if both lists have same structure\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Input lists must have the same number of sublists\")\n    for sub1, sub2 in zip(test_tup1, test_tup2):\n        if len(sub1) != len(sub2):\n            raise ValueError(\"All sublists must be of the same length\")\n    \n    # Perform index wise multiplication\n    result = []\n    for sub1, sub2 in zip(test_tup1, test_tup2):\n        multiplied_sublist = [a * b for a, b in zip(sub1, sub2)]\n        result.append(multiplied_sublist)\n    return result\n\n# Example usage:\n# test_tup1 = [[1, 2, 3], [4, 5, 6]]\n# test_tup2 = [[7, 8, 9], [10, 11, 12]]\n# print(index_multiplication(test_tup1, test_tup2)) # Output: [[7, 16, 27], [40, 55, 72]]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef index_multiplication(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Write a function to perform index wise multiplication of list elements in the given two lists.\n    \n    Args:\n    test_tup1: List[List[int]] -- First 2D list of integers.\n    test_tup2: List[List[int]] -- Second 2D list of integers.\n    \n    Returns:\n    List[List[int]] -- Resultant 2D list after index wise multiplication.\n    \"\"\"\n    # Check if both lists have same structure\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Input lists must have the same number of sublists\")\n    for sub1, sub2 in zip(test_tup1, test_tup2):\n        if len(sub1) != len(sub2):\n            raise ValueError(\"All sublists must be of the same length\")\n    \n    # Perform index wise multiplication\n    result = []\n    for sub1, sub2 in zip(test_tup1, test_tup2):\n        multiplied_sublist = [a * b for a, b in zip(sub1, sub2)]\n        result.append(multiplied_sublist)\n    return result\n\n# Example usage:\n# test_tup1 = [[1, 2, 3], [4, 5, 6]]\n# test_tup2 = [[7, 8, 9], [10, 11, 12]]\n# print(index_multiplication(test_tup1, test_tup2)) # Output: [[7, 16, 27], [40, 55, 72]]\n```"], "prompt_tokens": [72], "completion_tokens": [358], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_445_index_multiplication"}
{"name": "mbpp_256_count_Primes_nums", "language": "Python3", "prompt": "def count_Primes_nums(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Primes_nums", "test": "def check(candidate):\n    assert candidate(5) == 2\n    assert candidate(10) == 4\n    assert candidate(100) == 25\n\ndef test_check():\n    check(count_Primes_nums)\n\ntest_check()\n", "sample_io": ["assert count_Primes_nums(5) == 2"], "source_codes": ["\ndef count_Primes_nums(n: int) -> int:\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    if n <= 2:\n        return 0\n\n    # Initialize a list to track prime status of numbers\n    is_prime = [True] * n\n    is_prime[0] = False\n    is_prime[1] = False\n\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n\n    # Count how many numbers are prime\n    return sum(is_prime)\n\n\n"], "responses": ["```python\ndef count_Primes_nums(n: int) -> int:\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    if n <= 2:\n        return 0\n\n    # Initialize a list to track prime status of numbers\n    is_prime = [True] * n\n    is_prime[0] = False\n    is_prime[1] = False\n\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n\n    # Count how many numbers are prime\n    return sum(is_prime)\n```"], "prompt_tokens": [61], "completion_tokens": [159], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_256_count_Primes_nums"}
{"name": "mbpp_170_sum_range_list", "language": "Python3", "prompt": "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    \"\"\"\n\tWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_range_list", "test": "def check(candidate):\n    assert candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29\n    assert candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7) == 16\n    assert candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10) == 38\n\ndef test_check():\n    check(sum_range_list)\n\ntest_check()\n", "sample_io": ["assert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29"], "source_codes": ["\nfrom typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Ensure indices are within bounds and m <= n\n    m = max(0, m)\n    n = min(len(list1) - 1, n)\n    if m > n:\n        return 0\n    return sum(list1[m:n+1])\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Ensure indices are within bounds and m <= n\n    m = max(0, m)\n    n = min(len(list1) - 1, n)\n    if m > n:\n        return 0\n    return sum(list1[m:n+1])\n```"], "prompt_tokens": [69], "completion_tokens": [111], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_170_sum_range_list"}
{"name": "mbpp_71_comb_sort", "language": "Python3", "prompt": "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a list of elements.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "comb_sort", "test": "def check(candidate):\n    assert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert candidate([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\n    assert candidate([99, 15, 13, 47]) == [13, 15, 47, 99]\n\ndef test_check():\n    check(comb_sort)\n\ntest_check()\n", "sample_io": ["assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"], "source_codes": ["\nfrom typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to sort a list of elements using comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        # Update the gap value for a next comb\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True  # Assume sorted, verify below\n\n        # A single \"comb\" over the input list\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to sort a list of elements using comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        # Update the gap value for a next comb\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True  # Assume sorted, verify below\n\n        # A single \"comb\" over the input list\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums\n```"], "prompt_tokens": [50], "completion_tokens": [173], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_71_comb_sort"}
{"name": "mbpp_451_remove_whitespaces", "language": "Python3", "prompt": "def remove_whitespaces(text1: str) -> str:\n    \"\"\"\n\tWrite a function to remove all whitespaces from the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_whitespaces", "test": "def check(candidate):\n    assert candidate(' Google    Flutter ') == 'GoogleFlutter'\n    assert candidate(' Google    Dart ') == 'GoogleDart'\n    assert candidate(' iOS    Swift ') == 'iOSSwift'\n\ndef test_check():\n    check(remove_whitespaces)\n\ntest_check()\n", "sample_io": ["assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"], "source_codes": ["\ndef remove_whitespaces(text1: str) -> str:\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return ''.join(text1.split())\n\n\n"], "responses": ["```python\ndef remove_whitespaces(text1: str) -> str:\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return ''.join(text1.split())\n```"], "prompt_tokens": [49], "completion_tokens": [43], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_451_remove_whitespaces"}
{"name": "mbpp_747_lcs_of_three", "language": "Python3", "prompt": "def lcs_of_three(X: str, Y: str, Z: str) -> int:\n    \"\"\"\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lcs_of_three", "test": "def check(candidate):\n    assert candidate('AGGT12', '12TXAYB', '12XBA') == 2\n    assert candidate('Reels', 'Reelsfor', 'ReelsforReels') == 5\n    assert candidate('abcd1e2', 'bc12ea', 'bd1ea') == 3\n\ndef test_check():\n    check(lcs_of_three)\n\ntest_check()\n", "sample_io": ["assert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2"], "source_codes": ["\ndef lcs_of_three(X: str, Y: str, Z: str) -> int:\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    m, n, o = len(X), len(Y), len(Z)\n\n    # Initialize the 3D DP array with zeros\n    dp = [[[0] * (o + 1) for _ in range(n + 1)] for __ in range(m + 1)]\n\n    # Build the dp array from bottom up\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(\n                        dp[i-1][j][k],\n                        dp[i][j-1][k],\n                        dp[i][j][k-1]\n                    )\n    return dp[m][n][o]\n\n\n"], "responses": ["```python\ndef lcs_of_three(X: str, Y: str, Z: str) -> int:\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    m, n, o = len(X), len(Y), len(Z)\n\n    # Initialize the 3D DP array with zeros\n    dp = [[[0] * (o + 1) for _ in range(n + 1)] for __ in range(m + 1)]\n\n    # Build the dp array from bottom up\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(\n                        dp[i-1][j][k],\n                        dp[i][j-1][k],\n                        dp[i][j][k-1]\n                    )\n    return dp[m][n][o]\n```\n"], "prompt_tokens": [79], "completion_tokens": [278], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_747_lcs_of_three"}
{"name": "mbpp_257_swap_numbers", "language": "Python3", "prompt": "from typing import List\n\ndef swap_numbers(a: int, b: int) -> List[int]:\n    \"\"\"\n\tWrite a function that takes in two numbers and returns a list with the second number and then the first number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "swap_numbers", "test": "def check(candidate):\n    assert candidate(10, 20) == [20, 10]\n    assert candidate(15, 17) == [17, 15]\n    assert candidate(100, 200) == [200, 100]\n\ndef test_check():\n    check(swap_numbers)\n\ntest_check()\n", "sample_io": ["assert swap_numbers(10, 20) == [20, 10]"], "source_codes": ["\nfrom typing import List\n\ndef swap_numbers(a: int, b: int) -> List[int]:\n    \"\"\"\n    Write a function that takes in two numbers and returns a list with the second number and then the first number.\n    \"\"\"\n    return [b, a]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef swap_numbers(a: int, b: int) -> List[int]:\n    \"\"\"\n    Write a function that takes in two numbers and returns a list with the second number and then the first number.\n    \"\"\"\n    return [b, a]\n```"], "prompt_tokens": [65], "completion_tokens": [58], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_257_swap_numbers"}
{"name": "mbpp_64_subject_marks", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    \"\"\"\n\tWrite a function to sort a list of tuples using the second value of each tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "subject_marks", "test": "def check(candidate):\n    assert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    assert candidate([('Telugu', 49), ('Hindhi', 54), ('Social', 33)]) == [('Social', 33), ('Telugu', 49), ('Hindhi', 54)]\n    assert candidate([('Physics', 96), ('Chemistry', 97), ('Biology', 45)]) == [('Biology', 45), ('Physics', 96), ('Chemistry', 97)]\n\ndef test_check():\n    check(subject_marks)\n\ntest_check()\n", "sample_io": ["assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    return sorted(subjectmarks, key=lambda x: x[1])\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    return sorted(subjectmarks, key=lambda x: x[1])\n```"], "prompt_tokens": [68], "completion_tokens": [68], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_64_subject_marks"}
{"name": "mbpp_116_tuple_to_int", "language": "Python3", "prompt": "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, int, int]) -> int:\n    \"\"\"\n\tWrite a function to convert a given tuple of positive integers into a single integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tuple_to_int", "test": "def check(candidate):\n    assert candidate((1, 2, 3)) == 123\n    assert candidate((4, 5, 6)) == 456\n    assert candidate((5, 6, 7)) == 567\n\ndef test_check():\n    check(tuple_to_int)\n\ntest_check()\n", "sample_io": ["assert tuple_to_int((1, 2, 3)) == 123"], "source_codes": ["\nfrom typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, int, int]) -> int:\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Convert each integer in the tuple to a string and concatenate them\n    concatenated_str = ''.join(str(num) for num in nums)\n    # Convert the concatenated string back to an integer\n    return int(concatenated_str)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, int, int]) -> int:\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Convert each integer in the tuple to a string and concatenate them\n    concatenated_str = ''.join(str(num) for num in nums)\n    # Convert the concatenated string back to an integer\n    return int(concatenated_str)\n```"], "prompt_tokens": [60], "completion_tokens": [94], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_116_tuple_to_int"}
{"name": "mbpp_479_first_Digit", "language": "Python3", "prompt": "def first_Digit(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the first digit of a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "first_Digit", "test": "def check(candidate):\n    assert candidate(123) == 1\n    assert candidate(456) == 4\n    assert candidate(12) == 1\n\ndef test_check():\n    check(first_Digit)\n\ntest_check()\n", "sample_io": ["assert first_Digit(123) == 1"], "source_codes": ["\ndef first_Digit(n: int) -> int:\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    n = abs(n)  # handle negative numbers\n    while n >= 10:\n        n //= 10\n    return n\n\n\n"], "responses": ["```python\ndef first_Digit(n: int) -> int:\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    n = abs(n)  # handle negative numbers\n    while n >= 10:\n        n //= 10\n    return n\n```"], "prompt_tokens": [48], "completion_tokens": [63], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_479_first_Digit"}
{"name": "mbpp_118_string_to_list", "language": "Python3", "prompt": "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    \"\"\"\n\tWrite a function to convert a string to a list of strings split on the space character.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "string_to_list", "test": "def check(candidate):\n    assert candidate('python programming') == ['python', 'programming']\n    assert candidate('lists tuples strings') == ['lists', 'tuples', 'strings']\n    assert candidate('write a program') == ['write', 'a', 'program']\n\ndef test_check():\n    check(string_to_list)\n\ntest_check()\n", "sample_io": ["assert string_to_list('python programming') == ['python', 'programming']"], "source_codes": ["\nfrom typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split(' ')\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split(' ')\n```"], "prompt_tokens": [58], "completion_tokens": [50], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_118_string_to_list"}
{"name": "mbpp_763_find_min_diff", "language": "Python3", "prompt": "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_min_diff", "test": "def check(candidate):\n    assert candidate([1, 5, 3, 19, 18, 25], 6) == 1\n    assert candidate([4, 3, 2, 6], 4) == 1\n    assert candidate([30, 5, 20, 9], 4) == 4\n\ndef test_check():\n    check(find_min_diff)\n\ntest_check()\n", "sample_io": ["assert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1"], "source_codes": ["\nfrom typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    \"\"\"\n    if n < 2:\n        return 0  # No pair exists\n    \n    arr.sort()\n    min_diff = float('inf')\n    \n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            \n    return min_diff\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [1, 5, 3, 19, 18, 25]\n    n = len(arr)\n    print(f\"Minimum difference is {find_min_diff(arr, n)}\")  # Output: 1\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    \"\"\"\n    if n < 2:\n        return 0  # No pair exists\n    \n    arr.sort()\n    min_diff = float('inf')\n    \n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            \n    return min_diff\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [1, 5, 3, 19, 18, 25]\n    n = len(arr)\n    print(f\"Minimum difference is {find_min_diff(arr, n)}\")  # Output: 1\n```"], "prompt_tokens": [78], "completion_tokens": [197], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_763_find_min_diff"}
{"name": "mbpp_408_k_smallest_pairs", "language": "Python3", "prompt": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "k_smallest_pairs", "test": "def check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n", "sample_io": ["assert k_smallest_pairs([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]"], "source_codes": ["\nfrom typing import List\nimport heapq\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    if not nums1 or not nums2 or k == 0:\n        return []\n\n    min_heap = []\n    result = []\n\n    # Initialize the heap with the first element in nums2 paired with each element in nums1\n    # We push tuples of the form: (sum, index_in_nums1, index_in_nums2)\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n\n    # Extract the smallest pairs from the heap up to k times\n    while min_heap and len(result) < k:\n        current_sum, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        # If possible, add the next pair from nums2 located at j+1 with nums1[i]\n        if j + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j+1], i, j+1))\n\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\nimport heapq\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    if not nums1 or not nums2 or k == 0:\n        return []\n\n    min_heap = []\n    result = []\n\n    # Initialize the heap with the first element in nums2 paired with each element in nums1\n    # We push tuples of the form: (sum, index_in_nums1, index_in_nums2)\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n\n    # Extract the smallest pairs from the heap up to k times\n    while min_heap and len(result) < k:\n        current_sum, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        # If possible, add the next pair from nums2 located at j+1 with nums1[i]\n        if j + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j+1], i, j+1))\n\n    return result\n```"], "prompt_tokens": [81], "completion_tokens": [290], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_408_k_smallest_pairs"}
{"name": "mbpp_748_capital_words_spaces", "language": "Python3", "prompt": "def capital_words_spaces(str1: str) -> str:\n    \"\"\"\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "capital_words_spaces", "test": "def check(candidate):\n    assert candidate('Python') == 'Python'\n    assert candidate('PythonProgrammingExamples') == 'Python Programming Examples'\n    assert candidate('GetReadyToBeCodingFreak') == 'Get Ready To Be Coding Freak'\n\ndef test_check():\n    check(capital_words_spaces)\n\ntest_check()\n", "sample_io": ["assert capital_words_spaces('Python') == 'Python'"], "source_codes": ["\ndef capital_words_spaces(str1: str) -> str:\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    if not str1:\n        return str1\n\n    result = [str1[0]]\n    for ch in str1[1:]:\n        if ch.isupper():\n            result.append(' ')\n        result.append(ch)\n    return ''.join(result)\n\n\n"], "responses": ["```python\ndef capital_words_spaces(str1: str) -> str:\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    if not str1:\n        return str1\n\n    result = [str1[0]]\n    for ch in str1[1:]:\n        if ch.isupper():\n            result.append(' ')\n        result.append(ch)\n    return ''.join(result)\n```"], "prompt_tokens": [52], "completion_tokens": [89], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_748_capital_words_spaces"}
{"name": "mbpp_252_convert", "language": "Python3", "prompt": "from typing import Tuple\n\ndef convert(numbers: int) -> Tuple[float, float]:\n    \"\"\"\n\tWrite a python function to convert complex numbers to polar coordinates.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "convert", "test": "def check(candidate):\n    assert candidate(1) == (1.0, 0.0)\n    assert candidate(4) == (4.0, 0.0)\n    assert candidate(5) == (5.0, 0.0)\n\ndef test_check():\n    check(convert)\n\ntest_check()\n", "sample_io": ["assert convert(1) == (1.0, 0.0)"], "source_codes": ["\nfrom typing import Tuple\nimport cmath\n\ndef convert(number: complex) -> Tuple[float, float]:\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \n    Args:\n    number (complex): A complex number.\n    \n    Returns:\n    Tuple[float, float]: A tuple containing the magnitude (r) and the phase angle (theta in radians).\n    \"\"\"\n    r, theta = cmath.polar(number)\n    return r, theta\n\n\n"], "responses": ["```python\nfrom typing import Tuple\nimport cmath\n\ndef convert(number: complex) -> Tuple[float, float]:\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \n    Args:\n    number (complex): A complex number.\n    \n    Returns:\n    Tuple[float, float]: A tuple containing the magnitude (r) and the phase angle (theta in radians).\n    \"\"\"\n    r, theta = cmath.polar(number)\n    return r, theta\n```"], "prompt_tokens": [52], "completion_tokens": [99], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_252_convert"}
{"name": "mbpp_436_neg_nos", "language": "Python3", "prompt": "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to return the negative numbers in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "neg_nos", "test": "def check(candidate):\n    assert candidate([-1, 4, 5, -6]) == [-1, -6]\n    assert candidate([-1, -2, 3, 4]) == [-1, -2]\n    assert candidate([-7, -6, 8, 9]) == [-7, -6]\n\ndef test_check():\n    check(neg_nos)\n\ntest_check()\n", "sample_io": ["assert neg_nos([-1, 4, 5, -6]) == [-1, -6]"], "source_codes": ["\nfrom typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    return [num for num in list1 if num < 0]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    return [num for num in list1 if num < 0]\n```"], "prompt_tokens": [55], "completion_tokens": [56], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_436_neg_nos"}
{"name": "mbpp_397_median_numbers", "language": "Python3", "prompt": "def median_numbers(a: int, b: int, c: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of three numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "median_numbers", "test": "def check(candidate):\n    assert candidate(25, 55, 65) == 55.0\n    assert candidate(20, 10, 30) == 20.0\n    assert candidate(15, 45, 75) == 45.0\n\ndef test_check():\n    check(median_numbers)\n\ntest_check()\n", "sample_io": ["assert median_numbers(25, 55, 65) == 55.0"], "source_codes": ["\ndef median_numbers(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    nums = [a, b, c]\n    nums.sort()\n    return nums[1]\n\n\n"], "responses": ["```python\ndef median_numbers(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    nums = [a, b, c]\n    nums.sort()\n    return nums[1]\n```"], "prompt_tokens": [52], "completion_tokens": [58], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_397_median_numbers"}
{"name": "mbpp_462_combinations_list", "language": "Python3", "prompt": "from typing import List, Union\n\ndef combinations_list(list1: List[str]) -> List[Union[List[None], List[str]]]:\n    \"\"\"\n\tWrite a function to find all possible combinations of the elements of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_462_combinations_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "combinations_list", "test": "def check(candidate):\n    assert candidate(['orange', 'red', 'green', 'blue']) == [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange']) == [[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    assert candidate(['red', 'green', 'black', 'orange']) == [[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n\ndef test_check():\n    check(combinations_list)\n\ntest_check()\n", "sample_io": ["assert combinations_list(['orange', 'red', 'green', 'blue']) == [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"], "source_codes": ["\nfrom typing import List, Union\nfrom itertools import combinations\n\ndef combinations_list(list1: List[str]) -> List[Union[List[None], List[str]]]:\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    n = len(list1)\n    for r in range(n + 1):\n        for combo in combinations(list1, r):\n            # for r=0, combo is empty tuple (), convert to [None] as per type hint suggestion\n            if r == 0:\n                result.append([None])\n            else:\n                result.append(list(combo))\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Union\nfrom itertools import combinations\n\ndef combinations_list(list1: List[str]) -> List[Union[List[None], List[str]]]:\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    n = len(list1)\n    for r in range(n + 1):\n        for combo in combinations(list1, r):\n            # for r=0, combo is empty tuple (), convert to [None] as per type hint suggestion\n            if r == 0:\n                result.append([None])\n            else:\n                result.append(list(combo))\n    return result\n```\n"], "prompt_tokens": [67], "completion_tokens": [140], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_462_combinations_list"}
{"name": "mbpp_745_divisible_by_digits", "language": "Python3", "prompt": "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "divisible_by_digits", "test": "def check(candidate):\n    assert candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    assert candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n    assert candidate(20, 25) == [22, 24]\n\ndef test_check():\n    check(divisible_by_digits)\n\ntest_check()\n", "sample_io": ["assert divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"], "source_codes": ["\nfrom typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum\n    where every number is divisible by every digit it contains.\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num) if d != '0']  # exclude zero digit to avoid division by zero\n        if digits and all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n\n# Example usage:\n# print(divisible_by_digits(1, 50))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum\n    where every number is divisible by every digit it contains.\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num) if d != '0']  # exclude zero digit to avoid division by zero\n        if digits and all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n\n# Example usage:\n# print(divisible_by_digits(1, 50))\n```"], "prompt_tokens": [94], "completion_tokens": [150], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_745_divisible_by_digits"}
{"name": "mbpp_554_Split", "language": "Python3", "prompt": "from typing import List\n\ndef Split(list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Split", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5]\n    assert candidate([10, 11, 12, 13]) == [11, 13]\n    assert candidate([7, 8, 9, 1]) == [7, 9, 1]\n\ndef test_check():\n    check(Split)\n\ntest_check()\n", "sample_io": ["assert Split([1, 2, 3, 4, 5, 6]) == [1, 3, 5]"], "source_codes": ["\nfrom typing import List\n\ndef Split(lst: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [x for x in lst if x % 2 != 0]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Split(lst: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [x for x in lst if x % 2 != 0]\n```"], "prompt_tokens": [56], "completion_tokens": [59], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_554_Split"}
{"name": "mbpp_128_long_words", "language": "Python3", "prompt": "from typing import List\n\ndef long_words(n: int, str: str) -> List[str]:\n    \"\"\"\n\tWrite a function to find words that are longer than n characters from a given list of words.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "long_words", "test": "def check(candidate):\n    assert candidate(3, 'python is a programming language') == ['python', 'programming', 'language']\n    assert candidate(2, 'writing a program') == ['writing', 'program']\n    assert candidate(5, 'sorting list') == ['sorting']\n\ndef test_check():\n    check(long_words)\n\ntest_check()\n", "sample_io": ["assert long_words(3, 'python is a programming language') == ['python', 'programming', 'language']"], "source_codes": ["\nfrom typing import List\n\ndef long_words(n: int, words: List[str]) -> List[str]:\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef long_words(n: int, words: List[str]) -> List[str]:\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]\n```"], "prompt_tokens": [62], "completion_tokens": [64], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_128_long_words"}
{"name": "mbpp_69_is_sublist", "language": "Python3", "prompt": "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_sublist", "test": "def check(candidate):\n    assert candidate([2, 4, 3, 5, 7], [3, 7]) == False\n    assert candidate([2, 4, 3, 5, 7], [4, 3]) == True\n    assert candidate([2, 4, 3, 5, 7], [1, 6]) == False\n\ndef test_check():\n    check(is_sublist)\n\ntest_check()\n", "sample_io": ["assert is_sublist([2, 4, 3, 5, 7], [3, 7]) == False"], "source_codes": ["\nfrom typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True  # An empty list is always a sublist\n    \n    n, m = len(l), len(s)\n    if m > n:\n        return False\n    \n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True  # An empty list is always a sublist\n    \n    n, m = len(l), len(s)\n    if m > n:\n        return False\n    \n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False\n```"], "prompt_tokens": [60], "completion_tokens": [116], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_69_is_sublist"}
{"name": "mbpp_431_common_element", "language": "Python3", "prompt": "from typing import List, Any, Optional\n\ndef common_element(list1: List[Any], list2: List[Any]) -> Optional[bool]:\n    \"\"\"\n\tWrite a function that takes two lists and returns true if they have at least one common element.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "common_element", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == True\n    assert candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]) == None\n    assert candidate(['a', 'b', 'c'], ['d', 'b', 'e']) == True\n\ndef test_check():\n    check(common_element)\n\ntest_check()\n", "sample_io": ["assert common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == True"], "source_codes": ["\nfrom typing import List, Any, Optional\n\ndef common_element(list1: List[Any], list2: List[Any]) -> Optional[bool]:\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1.intersection(set2))\n\n\n"], "responses": ["```python\nfrom typing import List, Any, Optional\n\ndef common_element(list1: List[Any], list2: List[Any]) -> Optional[bool]:\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1.intersection(set2))\n```"], "prompt_tokens": [71], "completion_tokens": [82], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_431_common_element"}
{"name": "mbpp_732_replace_specialchar", "language": "Python3", "prompt": "def replace_specialchar(text: str) -> str:\n    \"\"\"\n\tWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_specialchar", "test": "def check(candidate):\n    assert candidate('Python language, Programming language.') == 'Python:language::Programming:language:'\n    assert candidate('a b c,d e f') == 'a:b:c:d:e:f'\n    assert candidate('ram reshma,ram rahim') == 'ram:reshma:ram:rahim'\n\ndef test_check():\n    check(replace_specialchar)\n\ntest_check()\n", "sample_io": ["assert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'"], "source_codes": ["\ndef replace_specialchar(text: str) -> str:\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n\n\n"], "responses": ["```python\ndef replace_specialchar(text: str) -> str:\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n```"], "prompt_tokens": [52], "completion_tokens": [54], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_732_replace_specialchar"}
{"name": "mbpp_141_pancake_sort", "language": "Python3", "prompt": "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a list of elements.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pancake_sort", "test": "def check(candidate):\n    assert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert candidate([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\n    assert candidate([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n\ndef test_check():\n    check(pancake_sort)\n\ntest_check()\n", "sample_io": ["assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"], "source_codes": ["\nfrom typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n    The function returns the sorted list.\n    \"\"\"\n    def flip(sublist: List[int], k: int):\n        # Reverse the order of the first k elements in the sublist\n        sublist[:k] = sublist[:k][::-1]\n\n    n = len(nums)\n    # Work from the largest element down to the smallest\n    for size in range(n, 1, -1):\n        # Find the index of the maximum element in nums[0:size]\n        max_idx = nums.index(max(nums[:size]))\n\n        # If max is not already at its correct position (size-1)\n        if max_idx != size - 1:\n            # If max is not at the first position, flip it to the front first\n            if max_idx != 0:\n                flip(nums, max_idx + 1)\n            # Now flip it to its correct position\n            flip(nums, size)\n    return nums\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n    The function returns the sorted list.\n    \"\"\"\n    def flip(sublist: List[int], k: int):\n        # Reverse the order of the first k elements in the sublist\n        sublist[:k] = sublist[:k][::-1]\n\n    n = len(nums)\n    # Work from the largest element down to the smallest\n    for size in range(n, 1, -1):\n        # Find the index of the maximum element in nums[0:size]\n        max_idx = nums.index(max(nums[:size]))\n\n        # If max is not already at its correct position (size-1)\n        if max_idx != size - 1:\n            # If max is not at the first position, flip it to the front first\n            if max_idx != 0:\n                flip(nums, max_idx + 1)\n            # Now flip it to its correct position\n            flip(nums, size)\n    return nums\n```"], "prompt_tokens": [51], "completion_tokens": [226], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_141_pancake_sort"}
{"name": "mbpp_308_large_product", "language": "Python3", "prompt": "from typing import List\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "large_product", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50]\n    assert candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4) == [60, 54, 50, 48]\n    assert candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5) == [60, 54, 50, 48, 45]\n\ndef test_check():\n    check(large_product)\n\ntest_check()\n", "sample_io": ["assert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50]"], "source_codes": ["\nfrom typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting \n    one factor from each list.\n\n    Args:\n    nums1: List[int] - First list of integers.\n    nums2: List[int] - Second list of integers.\n    N: int - Number of largest products to return.\n\n    Returns:\n    List[int] - List of N largest products sorted in descending order.\n    \"\"\"\n    if not nums1 or not nums2 or N <= 0:\n        return []\n\n    # Sort both lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Use a max heap to store the products along with indices\n    max_heap = []\n    visited = set()\n\n    # Initial push: product of first elements\n    initial_product = nums1[0] * nums2[0]\n    heapq.heappush(max_heap, (-initial_product, 0, 0))\n    visited.add((0, 0))\n\n    result = []\n\n    while max_heap and len(result) < N:\n        prod_neg, i, j = heapq.heappop(max_heap)\n        result.append(-prod_neg)\n        \n        # Push next possible products in the heap if not already pushed\n        if i + 1 < len(nums1) and (i + 1, j) not in visited:\n            heapq.heappush(max_heap, (-(nums1[i + 1] * nums2[j]), i + 1, j))\n            visited.add((i + 1, j))\n\n        if j + 1 < len(nums2) and (i, j + 1) not in visited:\n            heapq.heappush(max_heap, (-(nums1[i] * nums2[j + 1]), i, j + 1))\n            visited.add((i, j + 1))\n\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting \n    one factor from each list.\n\n    Args:\n    nums1: List[int] - First list of integers.\n    nums2: List[int] - Second list of integers.\n    N: int - Number of largest products to return.\n\n    Returns:\n    List[int] - List of N largest products sorted in descending order.\n    \"\"\"\n    if not nums1 or not nums2 or N <= 0:\n        return []\n\n    # Sort both lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Use a max heap to store the products along with indices\n    max_heap = []\n    visited = set()\n\n    # Initial push: product of first elements\n    initial_product = nums1[0] * nums2[0]\n    heapq.heappush(max_heap, (-initial_product, 0, 0))\n    visited.add((0, 0))\n\n    result = []\n\n    while max_heap and len(result) < N:\n        prod_neg, i, j = heapq.heappop(max_heap)\n        result.append(-prod_neg)\n        \n        # Push next possible products in the heap if not already pushed\n        if i + 1 < len(nums1) and (i + 1, j) not in visited:\n            heapq.heappush(max_heap, (-(nums1[i + 1] * nums2[j]), i + 1, j))\n            visited.add((i + 1, j))\n\n        if j + 1 < len(nums2) and (i, j + 1) not in visited:\n            heapq.heappush(max_heap, (-(nums1[i] * nums2[j + 1]), i, j + 1))\n            visited.add((i, j + 1))\n\n    return result\n```\n"], "prompt_tokens": [74], "completion_tokens": [426], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_308_large_product"}
{"name": "mbpp_293_otherside_rightangle", "language": "Python3", "prompt": "def otherside_rightangle(w: int, h: int) -> float:\n    \"\"\"\n\tWrite a function to find the third side of a right angled triangle.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "otherside_rightangle", "test": "def check(candidate):\n    assert candidate(7, 8) == 10.63014581273465\n    assert candidate(3, 4) == 5\n    assert candidate(7, 15) == 16.55294535724685\n\ndef test_check():\n    check(otherside_rightangle)\n\ntest_check()\n", "sample_io": ["assert otherside_rightangle(7, 8) == 10.63014581273465"], "source_codes": ["\ndef otherside_rightangle(w: int, h: int) -> float:\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    Given two sides `w` and `h`, the function assumes these are the lengths of two sides of the triangle.\n    Since a right-angled triangle has one right angle, the third side can be either the hypotenuse or one of the legs.\n    The function will return the length of the third side, considering `w` and `h` as legs, and calculate the hypotenuse.\n\n    If one of the sides is the hypotenuse and the other a leg, then the third side is sqrt(hypotenuse^2 - leg^2).\n    Without loss of generality, this function assumes w and h are legs and returns the hypotenuse.\n    \"\"\"\n    from math import sqrt\n    \n    # assuming w and h are legs of the right triangle\n    return sqrt(w**2 + h**2)\n\n\n"], "responses": ["```python\ndef otherside_rightangle(w: int, h: int) -> float:\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    Given two sides `w` and `h`, the function assumes these are the lengths of two sides of the triangle.\n    Since a right-angled triangle has one right angle, the third side can be either the hypotenuse or one of the legs.\n    The function will return the length of the third side, considering `w` and `h` as legs, and calculate the hypotenuse.\n\n    If one of the sides is the hypotenuse and the other a leg, then the third side is sqrt(hypotenuse^2 - leg^2).\n    Without loss of generality, this function assumes w and h are legs and returns the hypotenuse.\n    \"\"\"\n    from math import sqrt\n    \n    # assuming w and h are legs of the right triangle\n    return sqrt(w**2 + h**2)\n```"], "prompt_tokens": [53], "completion_tokens": [208], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_293_otherside_rightangle"}
{"name": "mbpp_106_add_lists", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef add_lists(test_list: List[int], test_tup: Tuple[int, int]) -> Tuple[int, int, int, int, int]:\n    \"\"\"\n\tWrite a function to append the given list to the given tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_lists", "test": "def check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    assert candidate([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\n    assert candidate([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n\ndef test_check():\n    check(add_lists)\n\ntest_check()\n", "sample_io": ["assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef add_lists(test_list: List[int], test_tup: Tuple[int, int]) -> Tuple[int, int, int, int, int]:\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert the tuple to a list\n    temp_list = list(test_tup)\n    # Extend the list with elements from test_list\n    temp_list.extend(test_list)\n    # Convert back to tuple before returning\n    return tuple(temp_list)\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef add_lists(test_list: List[int], test_tup: Tuple[int, int]) -> Tuple[int, int, int, int, int]:\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert the tuple to a list\n    temp_list = list(test_tup)\n    # Extend the list with elements from test_list\n    temp_list.extend(test_list)\n    # Convert back to tuple before returning\n    return tuple(temp_list)\n```"], "prompt_tokens": [73], "completion_tokens": [110], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_106_add_lists"}
{"name": "mbpp_720_add_dict_to_tuple", "language": "Python3", "prompt": "from typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple[int, int, int], test_dict: Dict[str, int]) -> Tuple[int, int, int, Dict[str, int]]:\n    \"\"\"\n\tWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_dict_to_tuple", "test": "def check(candidate):\n    assert candidate((4, 5, 6), { 'MSAM': 1, 'is': 2, 'best': 3 }) == (4, 5, 6, { 'MSAM': 1, 'is': 2, 'best': 3 })\n    assert candidate((1, 2, 3), { 'UTS': 2, 'is': 3, 'Worst': 4 }) == (1, 2, 3, { 'UTS': 2, 'is': 3, 'Worst': 4 })\n    assert candidate((8, 9, 10), { 'POS': 3, 'is': 4, 'Okay': 5 }) == (8, 9, 10, { 'POS': 3, 'is': 4, 'Okay': 5 })\n\ndef test_check():\n    check(add_dict_to_tuple)\n\ntest_check()\n", "sample_io": ["assert add_dict_to_tuple((4, 5, 6), { 'MSAM': 1, 'is': 2, 'best': 3 }) == (4, 5, 6, { 'MSAM': 1, 'is': 2, 'best': 3 })"], "source_codes": ["\nfrom typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple[int, int, int], test_dict: Dict[str, int]) -> Tuple[int, int, int, Dict[str, int]]:\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return test_tup + (test_dict,)\n\n\n"], "responses": ["```python\nfrom typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple[int, int, int], test_dict: Dict[str, int]) -> Tuple[int, int, int, Dict[str, int]]:\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return test_tup + (test_dict,)\n```"], "prompt_tokens": [85], "completion_tokens": [81], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_720_add_dict_to_tuple"}
{"name": "mbpp_395_first_non_repeating_character", "language": "Python3", "prompt": "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    \"\"\"\n\tWrite a python function to find the first non-repeated character in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "first_non_repeating_character", "test": "def check(candidate):\n    assert candidate('abcabc') == None\n    assert candidate('abc') == 'a'\n    assert candidate('ababc') == 'c'\n\ndef test_check():\n    check(first_non_repeating_character)\n\ntest_check()\n", "sample_io": ["assert first_non_repeating_character('abcabc') == None"], "source_codes": ["\nfrom typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n\n    # Count the occurrences of each character\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    # Find the first character with count 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None\n\n\n"], "responses": ["```python\nfrom typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n\n    # Count the occurrences of each character\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    # Find the first character with count 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None\n```"], "prompt_tokens": [60], "completion_tokens": [121], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_395_first_non_repeating_character"}
{"name": "mbpp_457_Find_Min", "language": "Python3", "prompt": "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n\tWrite a python function to find the sublist having minimum length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Min", "test": "def check(candidate):\n    assert candidate([[1], [1, 2], [1, 2, 3]]) == [1]\n    assert candidate([[1, 1], [1, 1, 1], [1, 2, 7, 8]]) == [1, 1]\n    assert candidate([['x'], ['x', 'y'], ['x', 'y', 'z']]) == ['x']\n\ndef test_check():\n    check(Find_Min)\n\ntest_check()\n", "sample_io": ["assert Find_Min([[1], [1, 2], [1, 2, 3]]) == [1]"], "source_codes": ["\nfrom typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    if not lst:\n        return []\n    min_sublist = lst[0]\n    for sublist in lst[1:]:\n        if len(sublist) < len(min_sublist):\n            min_sublist = sublist\n    return min_sublist\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    if not lst:\n        return []\n    min_sublist = lst[0]\n    for sublist in lst[1:]:\n        if len(sublist) < len(min_sublist):\n            min_sublist = sublist\n    return min_sublist\n```"], "prompt_tokens": [55], "completion_tokens": [91], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_457_Find_Min"}
{"name": "mbpp_725_extract_quotation", "language": "Python3", "prompt": "from typing import List, Any\n\ndef extract_quotation(text1: str) -> List[Any]:\n    \"\"\"\n\tWrite a function to extract values between quotation marks \" \" of the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_725_extract_quotation.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_quotation", "test": "def check(candidate):\n    assert candidate('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n    assert candidate('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\n    assert candidate('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\n    assert candidate(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []\n\ndef test_check():\n    check(extract_quotation)\n\ntest_check()\n", "sample_io": ["assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"], "source_codes": ["\nfrom typing import List, Any\nimport re\n\ndef extract_quotation(text1: str) -> List[Any]:\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    # Use regex to find all substrings enclosed in double quotes\n    return re.findall(r'\"(.*?)\"', text1)\n\n\n"], "responses": ["```python\nfrom typing import List, Any\nimport re\n\ndef extract_quotation(text1: str) -> List[Any]:\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    # Use regex to find all substrings enclosed in double quotes\n    return re.findall(r'\"(.*?)\"', text1)\n```"], "prompt_tokens": [59], "completion_tokens": [76], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_725_extract_quotation"}
{"name": "mbpp_9_find_Rotations", "language": "Python3", "prompt": "def find_Rotations(str: str) -> int:\n    \"\"\"\n\tWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Rotations", "test": "def check(candidate):\n    assert candidate('aaaa') == 1\n    assert candidate('ab') == 2\n    assert candidate('abc') == 3\n\ndef test_check():\n    check(find_Rotations)\n\ntest_check()\n", "sample_io": ["assert find_Rotations('aaaa') == 1"], "source_codes": ["\ndef find_Rotations(s: str) -> int:\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \n    A rotation means moving characters from the front to the back of the string.\n    For example:\n    s = \"abcabc\"\n    Rotations:\n    1 rotation: \"bcabca\"\n    2 rotations: \"cabcab\"\n    3 rotations: \"abcabc\" -> same as original\n    \n    So the minimum number of rotations required to get the same string again is 3.\n    \"\"\"\n    n = len(s)\n    for i in range(1, n + 1):\n        # rotate the string by i characters\n        rotated = s[i:] + s[:i]\n        if rotated == s:\n            return i\n    # If no rotation returns original string (which shouldn't happen),\n    # return length of string as it will repeat after full rotation\n    return n\n\n\n"], "responses": ["```python\ndef find_Rotations(s: str) -> int:\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \n    A rotation means moving characters from the front to the back of the string.\n    For example:\n    s = \"abcabc\"\n    Rotations:\n    1 rotation: \"bcabca\"\n    2 rotations: \"cabcab\"\n    3 rotations: \"abcabc\" -> same as original\n    \n    So the minimum number of rotations required to get the same string again is 3.\n    \"\"\"\n    n = len(s)\n    for i in range(1, n + 1):\n        # rotate the string by i characters\n        rotated = s[i:] + s[:i]\n        if rotated == s:\n            return i\n    # If no rotation returns original string (which shouldn't happen),\n    # return length of string as it will repeat after full rotation\n    return n\n```"], "prompt_tokens": [59], "completion_tokens": [210], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_9_find_Rotations"}
{"name": "mbpp_792_count_list", "language": "Python3", "prompt": "from typing import List\n\ndef count_list(input_list: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a python function to count the number of lists in a given number of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_792_count_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_list", "test": "def check(candidate):\n    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n    assert candidate([[1, 2], [2, 3], [4, 5]]) == 3\n    assert candidate([[1, 0], [2, 0]]) == 2\n\ndef test_check():\n    check(count_list)\n\ntest_check()\n", "sample_io": ["assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4"], "source_codes": ["\nfrom typing import List\n\ndef count_list(input_list: List[List[int]]) -> int:\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    return len(input_list)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_list(input_list: List[List[int]]) -> int:\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    return len(input_list)\n```"], "prompt_tokens": [58], "completion_tokens": [50], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_792_count_list"}
{"name": "mbpp_477_is_lower", "language": "Python3", "prompt": "def is_lower(string: str) -> str:\n    \"\"\"\n\tWrite a python function to convert the given string to lower case.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_lower", "test": "def check(candidate):\n    assert candidate('InValid') == 'invalid'\n    assert candidate('TruE') == 'true'\n    assert candidate('SenTenCE') == 'sentence'\n\ndef test_check():\n    check(is_lower)\n\ntest_check()\n", "sample_io": ["assert is_lower('InValid') == 'invalid'"], "source_codes": ["\ndef is_lower(string: str) -> str:\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()\n\n\n"], "responses": ["```python\ndef is_lower(string: str) -> str:\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()\n```"], "prompt_tokens": [46], "completion_tokens": [37], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_477_is_lower"}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "Python3", "prompt": "def find_Average_Of_Cube(n: int) -> float:\n    \"\"\"\n\tWrite a python function to find the average of cubes of first n natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Average_Of_Cube", "test": "def check(candidate):\n    assert candidate(2) == 4.5\n    assert candidate(3) == 12\n    assert candidate(1) == 1\n\ndef test_check():\n    check(find_Average_Of_Cube)\n\ntest_check()\n", "sample_io": ["assert find_Average_Of_Cube(2) == 4.5"], "source_codes": ["\ndef find_Average_Of_Cube(n: int) -> float:\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0.0\n    total = sum(i**3 for i in range(1, n + 1))\n    average = total / n\n    return average\n\n\n"], "responses": ["```python\ndef find_Average_Of_Cube(n: int) -> float:\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0.0\n    total = sum(i**3 for i in range(1, n + 1))\n    average = total / n\n    return average\n```"], "prompt_tokens": [53], "completion_tokens": [83], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_422_find_Average_Of_Cube"}
{"name": "mbpp_637_noprofit_noloss", "language": "Python3", "prompt": "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given amount has no profit and no loss\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "noprofit_noloss", "test": "def check(candidate):\n    assert candidate(1500, 1200) == False\n    assert candidate(100, 100) == True\n    assert candidate(2000, 5000) == False\n\ndef test_check():\n    check(noprofit_noloss)\n\ntest_check()\n", "sample_io": ["assert noprofit_noloss(1500, 1200) == False"], "source_codes": ["\ndef noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Parameters:\n    actual_cost (int): The actual cost price of the item\n    sale_amount (int): The sale price of the item\n    \n    Returns:\n    bool: True if there is no profit and no loss, False otherwise\n    \"\"\"\n    return actual_cost == sale_amount\n\n\n"], "responses": ["```python\ndef noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Parameters:\n    actual_cost (int): The actual cost price of the item\n    sale_amount (int): The sale price of the item\n    \n    Returns:\n    bool: True if there is no profit and no loss, False otherwise\n    \"\"\"\n    return actual_cost == sale_amount\n```"], "prompt_tokens": [59], "completion_tokens": [102], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_637_noprofit_noloss"}
{"name": "mbpp_557_toggle_string", "language": "Python3", "prompt": "def toggle_string(string: str) -> str:\n    \"\"\"\n\tWrite a function to toggle the case of all characters in a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "toggle_string", "test": "def check(candidate):\n    assert candidate('Python') == 'pYTHON'\n    assert candidate('Pangram') == 'pANGRAM'\n    assert candidate('LIttLE') == 'liTTle'\n\ndef test_check():\n    check(toggle_string)\n\ntest_check()\n", "sample_io": ["assert toggle_string('Python') == 'pYTHON'"], "source_codes": ["\ndef toggle_string(string: str) -> str:\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()\n\n\n"], "responses": ["```python\ndef toggle_string(string: str) -> str:\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()\n```"], "prompt_tokens": [47], "completion_tokens": [39], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_557_toggle_string"}
{"name": "mbpp_786_right_insertion", "language": "Python3", "prompt": "from typing import List\n\ndef right_insertion(a: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "right_insertion", "test": "def check(candidate):\n    assert candidate([1, 2, 4, 5], 6) == 4\n    assert candidate([1, 2, 4, 5], 3) == 2\n    assert candidate([1, 2, 4, 5], 7) == 4\n\ndef test_check():\n    check(right_insertion)\n\ntest_check()\n", "sample_io": ["assert right_insertion([1, 2, 4, 5], 6) == 4"], "source_codes": ["\nfrom typing import List\n\ndef right_insertion(a: List[int], x: int) -> int:\n    \"\"\"\n    Locate the right insertion point for x in a sorted list a.\n    The right insertion point is the index where x can be inserted\n    to maintain sorted order, considering all existing entries equal to x.\n    \n    Parameters:\n    a (List[int]): A list of sorted integers.\n    x (int): The value to insert.\n    \n    Returns:\n    int: The index to insert x on the right side of any existing entries of x.\n    \"\"\"\n    low, high = 0, len(a)\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] <= x:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef right_insertion(a: List[int], x: int) -> int:\n    \"\"\"\n    Locate the right insertion point for x in a sorted list a.\n    The right insertion point is the index where x can be inserted\n    to maintain sorted order, considering all existing entries equal to x.\n    \n    Parameters:\n    a (List[int]): A list of sorted integers.\n    x (int): The value to insert.\n    \n    Returns:\n    int: The index to insert x on the right side of any existing entries of x.\n    \"\"\"\n    low, high = 0, len(a)\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] <= x:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n```"], "prompt_tokens": [61], "completion_tokens": [177], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_786_right_insertion"}
{"name": "mbpp_807_first_odd", "language": "Python3", "prompt": "from typing import List\n\ndef first_odd(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the first odd number in a given list of numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "first_odd", "test": "def check(candidate):\n    assert candidate([1, 3, 5]) == 1\n    assert candidate([2, 4, 1, 3]) == 1\n    assert candidate([8, 9, 1]) == 9\n\ndef test_check():\n    check(first_odd)\n\ntest_check()\n", "sample_io": ["assert first_odd([1, 3, 5]) == 1"], "source_codes": ["\nfrom typing import List\n\ndef first_odd(nums: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return -1  # or raise an exception if no odd number is found\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef first_odd(nums: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return -1  # or raise an exception if no odd number is found\n```"], "prompt_tokens": [56], "completion_tokens": [79], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_807_first_odd"}
{"name": "mbpp_631_replace_spaces", "language": "Python3", "prompt": "def replace_spaces(text: str) -> str:\n    \"\"\"\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_spaces", "test": "def check(candidate):\n    assert candidate('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n    assert candidate('The_Avengers') == 'The Avengers'\n    assert candidate('Fast and Furious') == 'Fast_and_Furious'\n\ndef test_check():\n    check(replace_spaces)\n\ntest_check()\n", "sample_io": ["assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"], "source_codes": ["\ndef replace_spaces(text: str) -> str:\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    result = []\n    for char in text:\n        if char == ' ':\n            result.append('_')\n        elif char == '_':\n            result.append(' ')\n        else:\n            result.append(char)\n    return ''.join(result)\n\n\n"], "responses": ["```python\ndef replace_spaces(text: str) -> str:\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    result = []\n    for char in text:\n        if char == ' ':\n            result.append('_')\n        elif char == '_':\n            result.append(' ')\n        else:\n            result.append(char)\n    return ''.join(result)\n```"], "prompt_tokens": [51], "completion_tokens": [84], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_631_replace_spaces"}
{"name": "mbpp_573_unique_product", "language": "Python3", "prompt": "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to calculate the product of the unique numbers in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "unique_product", "test": "def check(candidate):\n    assert candidate([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000\n    assert candidate([1, 2, 3, 1]) == 6\n    assert candidate([7, 8, 9, 0, 1, 1]) == 0\n\ndef test_check():\n    check(unique_product)\n\ntest_check()\n", "sample_io": ["assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000"], "source_codes": ["\nfrom typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    product = 1\n    unique_numbers = set(list_data)\n    for num in unique_numbers:\n        product *= num\n    return product\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    product = 1\n    unique_numbers = set(list_data)\n    for num in unique_numbers:\n        product *= num\n    return product\n```"], "prompt_tokens": [57], "completion_tokens": [73], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_573_unique_product"}
{"name": "mbpp_643_text_match_wordz_middle", "language": "Python3", "prompt": "def text_match_wordz_middle(text: str) -> bool:\n    \"\"\"\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_wordz_middle", "test": "def check(candidate):\n    assert candidate('pythonzabc.') == True\n    assert candidate('zxyabc.') == False\n    assert candidate('  lang  .') == False\n\ndef test_check():\n    check(text_match_wordz_middle)\n\ntest_check()\n", "sample_io": ["assert text_match_wordz_middle('pythonzabc.') == True"], "source_codes": ["\ndef text_match_wordz_middle(text: str) -> bool:\n    \"\"\"\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    \"\"\"\n    words = text.split()\n    for word in words:\n        if 'z' in word[1:-1]:  # check 'z' in the middle of the word\n            return True\n    return False\n\n\n"], "responses": ["```python\ndef text_match_wordz_middle(text: str) -> bool:\n    \"\"\"\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    \"\"\"\n    words = text.split()\n    for word in words:\n        if 'z' in word[1:-1]:  # check 'z' in the middle of the word\n            return True\n    return False\n```"], "prompt_tokens": [58], "completion_tokens": [89], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_643_text_match_wordz_middle"}
{"name": "mbpp_299_max_aggregate", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    \"\"\"\n\tWrite a function to calculate the maximum aggregate from the list of tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_aggregate", "test": "def check(candidate):\n    assert candidate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]) == ('Juan Whelan', 212)\n    assert candidate([('Juan Whelan', 50), ('Sabah Colley', 48), ('Peter Nichols', 37), ('Juan Whelan', 22), ('Sabah Colley', 14)]) == ('Juan Whelan', 72)\n    assert candidate([('Juan Whelan', 10), ('Sabah Colley', 20), ('Peter Nichols', 30), ('Juan Whelan', 40), ('Sabah Colley', 50)]) == ('Sabah Colley', 70)\n\ndef test_check():\n    check(max_aggregate)\n\ntest_check()\n", "sample_io": ["assert max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]) == ('Juan Whelan', 212)"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \n    Args:\n    stdata (List[Tuple[str, int]]): A list of tuples where each tuple contains a string (key) and an integer (value).\n    \n    Returns:\n    Tuple[str, int]: A tuple containing the key with the maximum aggregate value and the aggregate value itself.\n    \"\"\"\n    aggregate = {}\n    for key, value in stdata:\n        aggregate[key] = aggregate.get(key, 0) + value\n        \n    max_key = max(aggregate, key=aggregate.get)\n    return max_key, aggregate[max_key]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \n    Args:\n    stdata (List[Tuple[str, int]]): A list of tuples where each tuple contains a string (key) and an integer (value).\n    \n    Returns:\n    Tuple[str, int]: A tuple containing the key with the maximum aggregate value and the aggregate value itself.\n    \"\"\"\n    aggregate = {}\n    for key, value in stdata:\n        aggregate[key] = aggregate.get(key, 0) + value\n        \n    max_key = max(aggregate, key=aggregate.get)\n    return max_key, aggregate[max_key]\n```"], "prompt_tokens": [64], "completion_tokens": [161], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_299_max_aggregate"}
{"name": "mbpp_474_replace_char", "language": "Python3", "prompt": "def replace_char(str1: str, ch: str, newch: str) -> str:\n    \"\"\"\n\tWrite a function to replace characters in a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_char", "test": "def check(candidate):\n    assert candidate('polygon', 'y', 'l') == 'pollgon'\n    assert candidate('character', 'c', 'a') == 'aharaater'\n    assert candidate('python', 'l', 'a') == 'python'\n\ndef test_check():\n    check(replace_char)\n\ntest_check()\n", "sample_io": ["assert replace_char('polygon', 'y', 'l') == 'pollgon'"], "source_codes": ["\ndef replace_char(str1: str, ch: str, newch: str) -> str:\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)\n\n\n"], "responses": ["```python\ndef replace_char(str1: str, ch: str, newch: str) -> str:\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)\n```"], "prompt_tokens": [53], "completion_tokens": [49], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_474_replace_char"}
{"name": "mbpp_433_check_greater", "language": "Python3", "prompt": "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the entered number is greater than the elements of the given array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_433_check_greater.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_greater", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], 4) == False\n    assert candidate([2, 3, 4, 5, 6], 8) == True\n    assert candidate([9, 7, 4, 8, 6, 1], 11) == True\n\ndef test_check():\n    check(check_greater)\n\ntest_check()\n", "sample_io": ["assert check_greater([1, 2, 3, 4, 5], 4) == False"], "source_codes": ["\nfrom typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    return all(number > x for x in arr)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    return all(number > x for x in arr)\n```"], "prompt_tokens": [62], "completion_tokens": [59], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_433_check_greater"}
{"name": "mbpp_427_change_date_format", "language": "Python3", "prompt": "def change_date_format(dt: str) -> str:\n    \"\"\"\n\tWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "change_date_format", "test": "def check(candidate):\n    assert candidate('2026-01-02') == '02-01-2026'\n    assert candidate('2020-11-13') == '13-11-2020'\n    assert candidate('2021-04-26') == '26-04-2021'\n\ndef test_check():\n    check(change_date_format)\n\ntest_check()\n", "sample_io": ["assert change_date_format('2026-01-02') == '02-01-2026'"], "source_codes": ["\ndef change_date_format(dt: str) -> str:\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    parts = dt.split('-')\n    if len(parts) != 3:\n        raise ValueError(\"Input date must be in yyyy-mm-dd format\")\n    yyyy, mm, dd = parts\n    return f\"{dd}-{mm}-{yyyy}\"\n\n\n"], "responses": ["```python\ndef change_date_format(dt: str) -> str:\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    parts = dt.split('-')\n    if len(parts) != 3:\n        raise ValueError(\"Input date must be in yyyy-mm-dd format\")\n    yyyy, mm, dd = parts\n    return f\"{dd}-{mm}-{yyyy}\"\n```"], "prompt_tokens": [52], "completion_tokens": [87], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_427_change_date_format"}
{"name": "mbpp_442_positive_count", "language": "Python3", "prompt": "from typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    \"\"\"\n\tWrite a function to find the ration of positive numbers in an array of integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "positive_count", "test": "def check(candidate):\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56\n\ndef test_check():\n    check(positive_count)\n\ntest_check()\n", "sample_io": ["assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54"], "source_codes": ["\nfrom typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    \"\"\"\n    Write a function to find the ratio of positive numbers in an array of integers.\n    \"\"\"\n    if not nums:\n        return 0.0\n    positive_nums = [num for num in nums if num > 0]\n    return len(positive_nums) / len(nums)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    \"\"\"\n    Write a function to find the ratio of positive numbers in an array of integers.\n    \"\"\"\n    if not nums:\n        return 0.0\n    positive_nums = [num for num in nums if num > 0]\n    return len(positive_nums) / len(nums)\n```"], "prompt_tokens": [55], "completion_tokens": [80], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_442_positive_count"}
{"name": "mbpp_453_sumofFactors", "language": "Python3", "prompt": "def sumofFactors(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of even factors of a number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sumofFactors", "test": "def check(candidate):\n    assert candidate(18) == 26\n    assert candidate(30) == 48\n    assert candidate(6) == 8\n\ndef test_check():\n    check(sumofFactors)\n\ntest_check()\n", "sample_io": ["assert sumofFactors(18) == 26"], "source_codes": ["\ndef sumofFactors(n: int) -> int:\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    total = 0\n    for i in range(2, n + 1, 2):  # iterate only even numbers\n        if n % i == 0:\n            total += i\n    return total\n\n# Example usage:\n# print(sumofFactors(12))  # Output: 2 + 4 + 6 + 12 = 24\n\n\n"], "responses": ["```python\ndef sumofFactors(n: int) -> int:\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    total = 0\n    for i in range(2, n + 1, 2):  # iterate only even numbers\n        if n % i == 0:\n            total += i\n    return total\n\n# Example usage:\n# print(sumofFactors(12))  # Output: 2 + 4 + 6 + 12 = 24\n```"], "prompt_tokens": [49], "completion_tokens": [113], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_453_sumofFactors"}
{"name": "mbpp_478_remove_lowercase", "language": "Python3", "prompt": "def remove_lowercase(str1: str) -> str:\n    \"\"\"\n\tWrite a function to remove lowercase substrings from a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_lowercase", "test": "def check(candidate):\n    assert candidate('PYTHon') == 'PYTH'\n    assert candidate('FInD') == 'FID'\n    assert candidate('STRinG') == 'STRG'\n\ndef test_check():\n    check(remove_lowercase)\n\ntest_check()\n", "sample_io": ["assert remove_lowercase('PYTHon') == 'PYTH'"], "source_codes": ["\nprint(remove_lowercase(\"HelloWORLD\"))  # Output: \"HWORD\"\nprint(remove_lowercase(\"abcXYZdef\"))   # Output: \"XYZ\"\nprint(remove_lowercase(\"123abc456\"))   # Output: \"123456\"\n\n\n"], "responses": ["```python\ndef remove_lowercase(str1: str) -> str:\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    result = []\n    temp = []\n\n    for ch in str1:\n        if ch.islower():\n            # Accumulate lowercase characters\n            temp.append(ch)\n        else:\n            # When hitting a non-lowercase char, clear the temp and append this char\n            temp = []\n            result.append(ch)\n\n    return ''.join(result)\n```\n\n**Explanation:**\n- The function iterates over the string character by character.\n- Whenever it encounters a lowercase character, it accumulates it into a temporary list `temp`.\n- However, since all lowercase substrings need to be removed, we do not add these to the result.\n- When a non-lowercase character is encountered, the temporary list of lowercase is discarded, and the non-lowercase character is added to the `result`.\n- Effectively, this removes sequences of lowercase characters from the input string.\n\n**Example:**\n```python\nprint(remove_lowercase(\"HelloWORLD\"))  # Output: \"HWORD\"\nprint(remove_lowercase(\"abcXYZdef\"))   # Output: \"XYZ\"\nprint(remove_lowercase(\"123abc456\"))   # Output: \"123456\"\n```"], "prompt_tokens": [47], "completion_tokens": [264], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_478_remove_lowercase"}
{"name": "mbpp_18_remove_dirty_chars", "language": "Python3", "prompt": "def remove_dirty_chars(string: str, second_string: str) -> str:\n    \"\"\"\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_dirty_chars", "test": "def check(candidate):\n    assert candidate('probasscurve', 'pros') == 'bacuve'\n    assert candidate('digitalindia', 'talent') == 'digiidi'\n    assert candidate('exoticmiles', 'toxic') == 'emles'\n\ndef test_check():\n    check(remove_dirty_chars)\n\ntest_check()\n", "sample_io": ["assert remove_dirty_chars('probasscurve', 'pros') == 'bacuve'"], "source_codes": ["\ndef remove_dirty_chars(string: str, second_string: str) -> str:\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert second_string into a set for O(1) lookup times\n    chars_to_remove = set(second_string)\n    # Build and return a new string by including only characters not in chars_to_remove\n    return ''.join(char for char in string if char not in chars_to_remove)\n\n\n"], "responses": ["```python\ndef remove_dirty_chars(string: str, second_string: str) -> str:\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert second_string into a set for O(1) lookup times\n    chars_to_remove = set(second_string)\n    # Build and return a new string by including only characters not in chars_to_remove\n    return ''.join(char for char in string if char not in chars_to_remove)\n```"], "prompt_tokens": [57], "completion_tokens": [103], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_18_remove_dirty_chars"}
{"name": "mbpp_730_consecutive_duplicates", "language": "Python3", "prompt": "from typing import List, Any\n\ndef consecutive_duplicates(nums: List[Any]) -> List[Any]:\n    \"\"\"\n\tWrite a function to remove consecutive duplicates of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "consecutive_duplicates", "test": "def check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [10, 15, 19, 18, 17, 26, 17, 18, 10]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == ['a', 'b', 'c', 'd']\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a']) == ['a', 'b', 'c', 'd', 'a']\n\ndef test_check():\n    check(consecutive_duplicates)\n\ntest_check()\n", "sample_io": ["assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"], "source_codes": ["\nfrom typing import List, Any\n\ndef consecutive_duplicates(nums: List[Any]) -> List[Any]:\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    if not nums:\n        return []\n    \n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef consecutive_duplicates(nums: List[Any]) -> List[Any]:\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    if not nums:\n        return []\n    \n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result\n```"], "prompt_tokens": [54], "completion_tokens": [82], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_730_consecutive_duplicates"}
{"name": "mbpp_446_count_Occurrence", "language": "Python3", "prompt": "from typing import Any, List\n\ndef count_Occurrence(tup: Any, lst: List[Any]) -> int:\n    \"\"\"\n\tWrite a python function to count the occurence of all elements of list in a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Occurrence", "test": "def check(candidate):\n    assert candidate(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3\n    assert candidate((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]) == 6\n    assert candidate((1, 2, 3, 4, 5, 6), [1, 2]) == 2\n\ndef test_check():\n    check(count_Occurrence)\n\ntest_check()\n", "sample_io": ["assert count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3"], "source_codes": ["\nfrom typing import Any, List\n\ndef count_Occurrence(tup: Any, lst: List[Any]) -> int:\n    \"\"\"\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    \n    Parameters:\n    tup (tuple): The tuple in which to count occurrences.\n    lst (List[Any]): The list of elements whose occurrences need to be counted in the tuple.\n    \n    Returns:\n    int: The total count of all occurrences of elements from the list in the tuple.\n    \"\"\"\n    total_count = 0\n    for element in lst:\n        total_count += tup.count(element)\n    return total_count\n\n# Example usage:\n# tup = (1, 2, 3, 2, 4, 2, 5)\n# lst = [2, 3]\n# print(count_Occurrence(tup, lst))  # Output: 4 (2 occurs 3 times, 3 occurs 1 time)\n\n\n"], "responses": ["```python\nfrom typing import Any, List\n\ndef count_Occurrence(tup: Any, lst: List[Any]) -> int:\n    \"\"\"\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    \n    Parameters:\n    tup (tuple): The tuple in which to count occurrences.\n    lst (List[Any]): The list of elements whose occurrences need to be counted in the tuple.\n    \n    Returns:\n    int: The total count of all occurrences of elements from the list in the tuple.\n    \"\"\"\n    total_count = 0\n    for element in lst:\n        total_count += tup.count(element)\n    return total_count\n\n# Example usage:\n# tup = (1, 2, 3, 2, 4, 2, 5)\n# lst = [2, 3]\n# print(count_Occurrence(tup, lst))  # Output: 4 (2 occurs 3 times, 3 occurs 1 time)\n```"], "prompt_tokens": [66], "completion_tokens": [204], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_446_count_Occurrence"}
{"name": "mbpp_772_remove_length", "language": "Python3", "prompt": "def remove_length(test_str: str, K: int) -> str:\n    \"\"\"\n\tWrite a function to remove all the words with k length in the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_length", "test": "def check(candidate):\n    assert candidate('The person is most value tet', 3) == 'person is most value'\n    assert candidate('If you told me about this ok', 4) == 'If you me about ok'\n    assert candidate('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'\n\ndef test_check():\n    check(remove_length)\n\ntest_check()\n", "sample_io": ["assert remove_length('The person is most value tet', 3) == 'person is most value'"], "source_codes": ["\ndef remove_length(test_str: str, K: int) -> str:\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n    # Filter out words with length K\n    filtered_words = [word for word in words if len(word) != K]\n    # Join the filtered words back into a string\n    return ' '.join(filtered_words)\n\n\n"], "responses": ["```python\ndef remove_length(test_str: str, K: int) -> str:\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n    # Filter out words with length K\n    filtered_words = [word for word in words if len(word) != K]\n    # Join the filtered words back into a string\n    return ' '.join(filtered_words)\n```"], "prompt_tokens": [54], "completion_tokens": [100], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_772_remove_length"}
{"name": "mbpp_752_jacobsthal_num", "language": "Python3", "prompt": "def jacobsthal_num(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "jacobsthal_num", "test": "def check(candidate):\n    assert candidate(5) == 11\n    assert candidate(2) == 1\n    assert candidate(4) == 5\n    assert candidate(13) == 2731\n\ndef test_check():\n    check(jacobsthal_num)\n\ntest_check()\n", "sample_io": ["assert jacobsthal_num(5) == 11"], "source_codes": ["\ndef jacobsthal_num(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    Sequence: 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, ... \n    Formula: J(n) = J(n-1) + 2*J(n-2) with J(0) = 0, J(1) = 1\n    \n    Parameters:\n    n (int): The index (0-based) of the Jacobsthal number to find.\n    \n    Returns:\n    int: The nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, b + 2 * a\n    return b\n\n\n"], "responses": ["```python\ndef jacobsthal_num(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    Sequence: 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, ... \n    Formula: J(n) = J(n-1) + 2*J(n-2) with J(0) = 0, J(1) = 1\n    \n    Parameters:\n    n (int): The index (0-based) of the Jacobsthal number to find.\n    \n    Returns:\n    int: The nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, b + 2 * a\n    return b\n```"], "prompt_tokens": [116], "completion_tokens": [210], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_752_jacobsthal_num"}
{"name": "mbpp_145_max_Abs_Diff", "language": "Python3", "prompt": "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the maximum difference between any two elements in a given array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_145_max_Abs_Diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_Abs_Diff", "test": "def check(candidate):\n    assert candidate([2, 1, 5, 3]) == 4\n    assert candidate([9, 3, 2, 5, 1]) == 8\n    assert candidate([3, 2, 1]) == 2\n\ndef test_check():\n    check(max_Abs_Diff)\n\ntest_check()\n", "sample_io": ["assert max_Abs_Diff([2, 1, 5, 3]) == 4"], "source_codes": ["\nfrom typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    if not arr:\n        return 0  # or raise an error depending on requirement\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return abs(max_val - min_val)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    if not arr:\n        return 0  # or raise an error depending on requirement\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return abs(max_val - min_val)\n```"], "prompt_tokens": [60], "completion_tokens": [89], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_145_max_Abs_Diff"}
{"name": "mbpp_572_two_unique_nums", "language": "Python3", "prompt": "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "two_unique_nums", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5]\n    assert candidate([1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef test_check():\n    check(two_unique_nums)\n\ntest_check()\n", "sample_io": ["assert two_unique_nums([1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5]"], "source_codes": ["\nfrom typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Assuming the input is a list of numbers, \n    # and the goal is to remove duplicates from this list\n    return list(set(nums))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Assuming the input is a list of numbers, \n    # and the goal is to remove duplicates from this list\n    return list(set(nums))\n```\n\nIf your input is a list of lists (multiple lists), please clarify so I can adjust the solution accordingly."], "prompt_tokens": [56], "completion_tokens": [96], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_572_two_unique_nums"}
{"name": "mbpp_556_find_Odd_Pair", "language": "Python3", "prompt": "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of pairs whose xor value is odd.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Odd_Pair", "test": "def check(candidate):\n    assert candidate([5, 4, 7, 2, 1], 5) == 6\n    assert candidate([7, 2, 8, 1, 0, 5, 11], 7) == 12\n    assert candidate([1, 2, 3], 3) == 2\n\ndef test_check():\n    check(find_Odd_Pair)\n\ntest_check()\n", "sample_io": ["assert find_Odd_Pair([5, 4, 7, 2, 1], 5) == 6"], "source_codes": ["\nfrom typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    # XOR of two numbers is odd if and only if one number is even and other is odd.\n    count_odd = sum(1 for x in A if x % 2 != 0)\n    count_even = N - count_odd\n    \n    # Number of pairs with one even and one odd\n    return count_odd * count_even\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    # XOR of two numbers is odd if and only if one number is even and other is odd.\n    count_odd = sum(1 for x in A if x % 2 != 0)\n    count_even = N - count_odd\n    \n    # Number of pairs with one even and one odd\n    return count_odd * count_even\n```"], "prompt_tokens": [62], "completion_tokens": [118], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_556_find_Odd_Pair"}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "Python3", "prompt": "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sum_increasing_subseq", "test": "def check(candidate):\n    assert candidate([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11\n    assert candidate([1, 101, 2, 3, 100, 4, 5], 7, 2, 5) == 7\n    assert candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n\ndef test_check():\n    check(max_sum_increasing_subseq)\n\ntest_check()\n", "sample_io": ["assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11"], "source_codes": ["\nfrom typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    \"\"\"\n    Find the maximum sum of an increasing subsequence that:\n    - is chosen from the prefix of the array up to 'index' (inclusive),\n    - includes the element at position 'k' (where k > index),\n    - and the subsequence is strictly increasing.\n\n    Returns the maximum sum of such a subsequence. If no valid subsequence exists, returns 0.\n    \"\"\"\n    if not (0 <= index < n) or not (index < k < n):\n        return 0\n\n    # Compute max sum increasing subseq ending at each position up to 'index'\n    dp_prefix = [0] * n\n    for i in range(index + 1):\n        dp_prefix[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i] and dp_prefix[j] + a[i] > dp_prefix[i]:\n                dp_prefix[i] = dp_prefix[j] + a[i]\n\n    # For subsequence including a[k], choose prefix subsequences ending at some i <= index\n    # such that a[i] < a[k]. Then sum = dp_prefix[i] + a[k]\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            curr_sum = dp_prefix[i] + a[k]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n\n    return max_sum\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    \"\"\"\n    Find the maximum sum of an increasing subsequence that:\n    - is chosen from the prefix of the array up to 'index' (inclusive),\n    - includes the element at position 'k' (where k > index),\n    - and the subsequence is strictly increasing.\n\n    Returns the maximum sum of such a subsequence. If no valid subsequence exists, returns 0.\n    \"\"\"\n    if not (0 <= index < n) or not (index < k < n):\n        return 0\n\n    # Compute max sum increasing subseq ending at each position up to 'index'\n    dp_prefix = [0] * n\n    for i in range(index + 1):\n        dp_prefix[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i] and dp_prefix[j] + a[i] > dp_prefix[i]:\n                dp_prefix[i] = dp_prefix[j] + a[i]\n\n    # For subsequence including a[k], choose prefix subsequences ending at some i <= index\n    # such that a[i] < a[k]. Then sum = dp_prefix[i] + a[k]\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            curr_sum = dp_prefix[i] + a[k]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n\n    return max_sum\n```\n"], "prompt_tokens": [92], "completion_tokens": [333], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_306_max_sum_increasing_subseq"}
{"name": "mbpp_388_highest_Power_of_2", "language": "Python3", "prompt": "def highest_Power_of_2(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the highest power of 2 that is less than or equal to n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "highest_Power_of_2", "test": "def check(candidate):\n    assert candidate(10) == 8\n    assert candidate(19) == 16\n    assert candidate(32) == 32\n\ndef test_check():\n    check(highest_Power_of_2)\n\ntest_check()\n", "sample_io": ["assert highest_Power_of_2(10) == 8"], "source_codes": ["\ndef highest_Power_of_2(n: int) -> int:\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n < 1:\n        return 0  # No power of 2 less than or equal to n if n < 1\n\n    power = 1\n    while power << 1 <= n:\n        power <<= 1\n    return power\n\n\n"], "responses": ["```python\ndef highest_Power_of_2(n: int) -> int:\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n < 1:\n        return 0  # No power of 2 less than or equal to n if n < 1\n\n    power = 1\n    while power << 1 <= n:\n        power <<= 1\n    return power\n```"], "prompt_tokens": [58], "completion_tokens": [99], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_388_highest_Power_of_2"}
{"name": "mbpp_401_add_nested_tuples", "language": "Python3", "prompt": "from typing import List\n\ndef add_nested_tuples(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of list elements in the given two nested lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_nested_tuples", "test": "def check(candidate):\n    assert candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[7, 10], [7, 14], [3, 10], [8, 13]]\n    assert candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]) == [[9, 12], [9, 16], [5, 12], [10, 15]]\n    assert candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]) == [[11, 14], [11, 18], [7, 14], [12, 17]]\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n", "sample_io": ["assert add_nested_tuples([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[7, 10], [7, 14], [3, 10], [8, 13]]"], "source_codes": ["\nfrom typing import List\n\ndef add_nested_tuples(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Write a function to perform index wise addition of list elements in the given two nested lists.\n    \"\"\"\n    # Assuming both nested lists have the same structure\n    return [[a + b for a, b in zip(sub1, sub2)] for sub1, sub2 in zip(test_tup1, test_tup2)]\n\n# Example usage:\n# test_tup1 = [[1, 2, 3], [4, 5, 6]]\n# test_tup2 = [[7, 8, 9], [10, 11, 12]]\n# print(add_nested_tuples(test_tup1, test_tup2)) \n# Output: [[8, 10, 12], [14, 16, 18]]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef add_nested_tuples(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Write a function to perform index wise addition of list elements in the given two nested lists.\n    \"\"\"\n    # Assuming both nested lists have the same structure\n    return [[a + b for a, b in zip(sub1, sub2)] for sub1, sub2 in zip(test_tup1, test_tup2)]\n\n# Example usage:\n# test_tup1 = [[1, 2, 3], [4, 5, 6]]\n# test_tup2 = [[7, 8, 9], [10, 11, 12]]\n# print(add_nested_tuples(test_tup1, test_tup2)) \n# Output: [[8, 10, 12], [14, 16, 18]]\n```"], "prompt_tokens": [73], "completion_tokens": [195], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_401_add_nested_tuples"}
{"name": "mbpp_435_last_Digit", "language": "Python3", "prompt": "def last_Digit(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the last digit of a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_435_last_Digit.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "last_Digit", "test": "def check(candidate):\n    assert candidate(123) == 3\n    assert candidate(25) == 5\n    assert candidate(30) == 0\n\ndef test_check():\n    check(last_Digit)\n\ntest_check()\n", "sample_io": ["assert last_Digit(123) == 3"], "source_codes": ["\ndef last_Digit(n: int) -> int:\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return abs(n) % 10\n\n\n"], "responses": ["```python\ndef last_Digit(n: int) -> int:\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return abs(n) % 10\n```"], "prompt_tokens": [48], "completion_tokens": [43], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_435_last_Digit"}
{"name": "mbpp_611_max_of_nth", "language": "Python3", "prompt": "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    \"\"\"\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_of_nth", "test": "def check(candidate):\n    assert candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n    assert candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\n    assert candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11\n\ndef test_check():\n    check(max_of_nth)\n\ntest_check()\n", "sample_io": ["assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19"], "source_codes": ["\nfrom typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    \"\"\"\n    # Extract the Nth element from each row (if the row has enough elements)\n    nth_column = [row[N] for row in test_list if len(row) > N]\n    # Return the maximum value from the extracted elements\n    return max(nth_column) if nth_column else None\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    \"\"\"\n    # Extract the Nth element from each row (if the row has enough elements)\n    nth_column = [row[N] for row in test_list if len(row) > N]\n    # Return the maximum value from the extracted elements\n    return max(nth_column) if nth_column else None\n```"], "prompt_tokens": [69], "completion_tokens": [117], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_611_max_of_nth"}
{"name": "mbpp_280_sequential_search", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    \"\"\"\n\tWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sequential_search", "test": "def check(candidate):\n    assert candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31) == (True, 3)\n    assert candidate([12, 32, 45, 62, 35, 47, 44, 61], 61) == (True, 7)\n    assert candidate([9, 10, 17, 19, 22, 39, 48, 56], 48) == (True, 6)\n\ndef test_check():\n    check(sequential_search)\n\ntest_check()\n", "sample_io": ["assert sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31) == (True, 3)"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for index, element in enumerate(dlist):\n        if element == item:\n            return True, index\n    return False, -1\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [4, 2, 5, 1, 3]\n    item_to_find = 5\n\n    found, position = sequential_search(arr, item_to_find)\n    print(f\"Found: {found}, Position: {position}\")  # Output: Found: True, Position: 2\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for index, element in enumerate(dlist):\n        if element == item:\n            return True, index\n    return False, -1\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [4, 2, 5, 1, 3]\n    item_to_find = 5\n\n    found, position = sequential_search(arr, item_to_find)\n    print(f\"Found: {found}, Position: {position}\")  # Output: Found: True, Position: 2\n```"], "prompt_tokens": [94], "completion_tokens": [187], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_280_sequential_search"}
{"name": "mbpp_576_is_Sub_Array", "language": "Python3", "prompt": "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Sub_Array", "test": "def check(candidate):\n    assert candidate([1, 4, 3, 5], [1, 2]) == False\n    assert candidate([1, 2, 1], [1, 2, 1]) == True\n    assert candidate([1, 0, 2, 2], [2, 2, 0]) == False\n\ndef test_check():\n    check(is_Sub_Array)\n\ntest_check()\n", "sample_io": ["assert is_Sub_Array([1, 4, 3, 5], [1, 2]) == False"], "source_codes": ["\nfrom typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if not B:\n        # An empty list is always a sublist\n        return True\n    if not A or len(B) > len(A):\n        return False\n    \n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n\n\n# Example usage:\n# print(is_Sub_Array([1, 2, 3, 4, 5], [3, 4]))  # True\n# print(is_Sub_Array([1, 2, 3, 4, 5], [4, 3]))  # False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if not B:\n        # An empty list is always a sublist\n        return True\n    if not A or len(B) > len(A):\n        return False\n    \n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n\n\n# Example usage:\n# print(is_Sub_Array([1, 2, 3, 4, 5], [3, 4]))  # True\n# print(is_Sub_Array([1, 2, 3, 4, 5], [4, 3]))  # False\n```"], "prompt_tokens": [61], "completion_tokens": [181], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_576_is_Sub_Array"}
{"name": "mbpp_131_reverse_vowels", "language": "Python3", "prompt": "def reverse_vowels(str1: str) -> str:\n    \"\"\"\n\tWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "reverse_vowels", "test": "def check(candidate):\n    assert candidate('Python') == 'Python'\n    assert candidate('USA') == 'ASU'\n    assert candidate('ab') == 'ab'\n\ndef test_check():\n    check(reverse_vowels)\n\ntest_check()\n", "sample_io": ["assert reverse_vowels('Python') == 'Python'"], "source_codes": ["\ndef reverse_vowels(str1: str) -> str:\n    \"\"\"\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    i, j = 0, len(str1) - 1\n\n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n\n    return \"\".join(str_list)\n\n\n"], "responses": ["```python\ndef reverse_vowels(str1: str) -> str:\n    \"\"\"\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    i, j = 0, len(str1) - 1\n\n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n\n    return \"\".join(str_list)\n```"], "prompt_tokens": [57], "completion_tokens": [155], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_131_reverse_vowels"}
{"name": "mbpp_432_median_trapezium", "language": "Python3", "prompt": "def median_trapezium(base1: int, base2: int, height: int) -> float:\n    \"\"\"\n\tWrite a function to find the median length of a trapezium.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "median_trapezium", "test": "def check(candidate):\n    assert candidate(15, 25, 35) == 20\n    assert candidate(10, 20, 30) == 15\n    assert candidate(6, 9, 4) == 7.5\n\ndef test_check():\n    check(median_trapezium)\n\ntest_check()\n", "sample_io": ["assert median_trapezium(15, 25, 35) == 20"], "source_codes": ["\ndef median_trapezium(base1: int, base2: int, height: int) -> float:\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \n    The median (also called the mid-segment) of a trapezium is the segment that joins the midpoints \n    of the non-parallel sides. Its length is the average of the lengths of the two parallel sides (bases).\n    \n    Parameters:\n    base1 (int): length of the first base\n    base2 (int): length of the second base\n    height (int): height of the trapezium (not used in calculation of median)\n    \n    Returns:\n    float: length of the median of the trapezium\n    \"\"\"\n    return (base1 + base2) / 2\n\n\n"], "responses": ["```python\ndef median_trapezium(base1: int, base2: int, height: int) -> float:\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \n    The median (also called the mid-segment) of a trapezium is the segment that joins the midpoints \n    of the non-parallel sides. Its length is the average of the lengths of the two parallel sides (bases).\n    \n    Parameters:\n    base1 (int): length of the first base\n    base2 (int): length of the second base\n    height (int): height of the trapezium (not used in calculation of median)\n    \n    Returns:\n    float: length of the median of the trapezium\n    \"\"\"\n    return (base1 + base2) / 2\n```"], "prompt_tokens": [61], "completion_tokens": [177], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_432_median_trapezium"}
{"name": "mbpp_161_remove_elements", "language": "Python3", "prompt": "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to remove all elements from a given list present in another list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_elements", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]\n\ndef test_check():\n    check(remove_elements)\n\ntest_check()\n", "sample_io": ["assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"], "source_codes": ["\nfrom typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return [item for item in list1 if item not in set(list2)]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return [item for item in list1 if item not in set(list2)]\n```"], "prompt_tokens": [63], "completion_tokens": [66], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_161_remove_elements"}
{"name": "mbpp_597_find_kth", "language": "Python3", "prompt": "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    \"\"\"\n\tWrite a function to find kth element from the given two sorted arrays.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_kth", "test": "def check(candidate):\n    assert candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n    assert candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256\n    assert candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8\n\ndef test_check():\n    check(find_kth)\n\ntest_check()\n", "sample_io": ["assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6"], "source_codes": ["\nfrom typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n\n    def kth_helper(a, b, k):\n        len_a, len_b = len(a), len(b)\n\n        # Always assume a is the smaller array for simplicity\n        if len_a > len_b:\n            return kth_helper(b, a, k)\n        if len_a == 0:\n            return b[k-1]\n        if k == 1:\n            return min(a[0], b[0])\n\n        # Partition the arrays\n        i = min(len_a, k // 2)\n        j = k - i\n\n        if a[i-1] < b[j-1]:\n            # Discard first i elements of a\n            return kth_helper(a[i:], b, k - i)\n        else:\n            # Discard first j elements of b\n            return kth_helper(a, b[j:], k - j)\n\n    return kth_helper(arr1, arr2, k)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n\n    def kth_helper(a, b, k):\n        len_a, len_b = len(a), len(b)\n\n        # Always assume a is the smaller array for simplicity\n        if len_a > len_b:\n            return kth_helper(b, a, k)\n        if len_a == 0:\n            return b[k-1]\n        if k == 1:\n            return min(a[0], b[0])\n\n        # Partition the arrays\n        i = min(len_a, k // 2)\n        j = k - i\n\n        if a[i-1] < b[j-1]:\n            # Discard first i elements of a\n            return kth_helper(a[i:], b, k - i)\n        else:\n            # Discard first j elements of b\n            return kth_helper(a, b[j:], k - j)\n\n    return kth_helper(arr1, arr2, k)\n```"], "prompt_tokens": [66], "completion_tokens": [242], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_597_find_kth"}
{"name": "mbpp_226_odd_values_string", "language": "Python3", "prompt": "def odd_values_string(str: str) -> str:\n    \"\"\"\n\tWrite a python function to remove the characters which have odd index values of a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_values_string", "test": "def check(candidate):\n    assert candidate('abcdef') == 'ace'\n    assert candidate('python') == 'pto'\n    assert candidate('data') == 'dt'\n    assert candidate('lambs') == 'lms'\n\ndef test_check():\n    check(odd_values_string)\n\ntest_check()\n", "sample_io": ["assert odd_values_string('abcdef') == 'ace'"], "source_codes": ["\ndef odd_values_string(s: str) -> str:\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])\n\n\n"], "responses": ["```python\ndef odd_values_string(s: str) -> str:\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])\n```"], "prompt_tokens": [52], "completion_tokens": [62], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_226_odd_values_string"}
{"name": "mbpp_278_count_first_elements", "language": "Python3", "prompt": "from typing import List, Union, Tuple\n\ndef count_first_elements(test_tup: List[Union[int, Tuple[int, int]]]) -> int:\n    \"\"\"\n\tWrite a function to find the number of elements that occurs before the list element in the given tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_278_count_first_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_first_elements", "test": "def check(candidate):\n    assert candidate([1, 5, 7, (4, 6), 10]) == 3\n    assert candidate([2, 9, (5, 7), 11]) == 2\n    assert candidate([11, 15, 5, 8, (2, 3), 8]) == 4\n\ndef test_check():\n    check(count_first_elements)\n\ntest_check()\n", "sample_io": ["assert count_first_elements([1, 5, 7, (4, 6), 10]) == 3"], "source_codes": ["\nfrom typing import List, Union, Tuple\n\ndef count_first_elements(test_tup: List[Union[int, Tuple[int, int]]]) -> int:\n    \"\"\"\n    Write a function to find the number of elements that occurs before the list element in the given tuple.\n    \n    Here, assuming \"list element\" means the first tuple element in the list.\n    So the function returns the count of elements before the first tuple occurs.\n    \"\"\"\n    for idx, ele in enumerate(test_tup):\n        if isinstance(ele, tuple):\n            return idx\n    return 0  # if no tuple found, then 0 elements before it\n\n# Example usage:\n# test_tup = [1, 2, (3, 4), 5]\n# The first tuple is at index 2, so the answer is 2\n# print(count_first_elements(test_tup))  # Output: 2\n\n\n"], "responses": ["```python\nfrom typing import List, Union, Tuple\n\ndef count_first_elements(test_tup: List[Union[int, Tuple[int, int]]]) -> int:\n    \"\"\"\n    Write a function to find the number of elements that occurs before the list element in the given tuple.\n    \n    Here, assuming \"list element\" means the first tuple element in the list.\n    So the function returns the count of elements before the first tuple occurs.\n    \"\"\"\n    for idx, ele in enumerate(test_tup):\n        if isinstance(ele, tuple):\n            return idx\n    return 0  # if no tuple found, then 0 elements before it\n\n# Example usage:\n# test_tup = [1, 2, (3, 4), 5]\n# The first tuple is at index 2, so the answer is 2\n# print(count_first_elements(test_tup))  # Output: 2\n```"], "prompt_tokens": [74], "completion_tokens": [190], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_278_count_first_elements"}
{"name": "mbpp_269_ascii_value", "language": "Python3", "prompt": "def ascii_value(k: str) -> int:\n    \"\"\"\n\tWrite a function to find the ascii value of a character.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_269_ascii_value.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "ascii_value", "test": "def check(candidate):\n    assert candidate('A') == 65\n    assert candidate('R') == 82\n    assert candidate('S') == 83\n\ndef test_check():\n    check(ascii_value)\n\ntest_check()\n", "sample_io": ["assert ascii_value('A') == 65"], "source_codes": ["\ndef ascii_value(k: str) -> int:\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)\n\n\n"], "responses": ["```python\ndef ascii_value(k: str) -> int:\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)\n```"], "prompt_tokens": [45], "completion_tokens": [36], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_269_ascii_value"}
{"name": "mbpp_739_find_Index", "language": "Python3", "prompt": "def find_Index(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Index", "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 14\n    assert candidate(4) == 45\n\ndef test_check():\n    check(find_Index)\n\ntest_check()\n", "sample_io": ["assert find_Index(2) == 4"], "source_codes": ["\nimport math\n\ndef find_Index(n: int) -> int:\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n    \n    A triangular number T_k = k(k+1)/2.\n    We want the smallest k such that T_k has n digits:\n    T_k >= 10^(n-1)\n    \n    Solve for k:\n    k(k+1)/2 >= 10^(n-1)\n    k^2 + k - 2*10^(n-1) >= 0\n    \n    Using quadratic formula for equality:\n    k = (-1 + sqrt(1 + 8 * 10^(n-1))) / 2\n    \n    Take the ceiling to get smallest integer k satisfying the condition.\n    \"\"\"\n    # Calculate the threshold\n    threshold = 10 ** (n - 1)\n    \n    # Calculate k using quadratic formula\n    k = (-1 + math.sqrt(1 + 8 * threshold)) / 2\n    \n    # Return the smallest integer index greater than or equal to k\n    return math.ceil(k)\n\n\n"], "responses": ["```python\nimport math\n\ndef find_Index(n: int) -> int:\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n    \n    A triangular number T_k = k(k+1)/2.\n    We want the smallest k such that T_k has n digits:\n    T_k >= 10^(n-1)\n    \n    Solve for k:\n    k(k+1)/2 >= 10^(n-1)\n    k^2 + k - 2*10^(n-1) >= 0\n    \n    Using quadratic formula for equality:\n    k = (-1 + sqrt(1 + 8 * 10^(n-1))) / 2\n    \n    Take the ceiling to get smallest integer k satisfying the condition.\n    \"\"\"\n    # Calculate the threshold\n    threshold = 10 ** (n - 1)\n    \n    # Calculate k using quadratic formula\n    k = (-1 + math.sqrt(1 + 8 * threshold)) / 2\n    \n    # Return the smallest integer index greater than or equal to k\n    return math.ceil(k)\n```\n"], "prompt_tokens": [70], "completion_tokens": [227], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_739_find_Index"}
{"name": "mbpp_19_test_duplicate", "language": "Python3", "prompt": "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to find whether a given array of integers contains any duplicate element.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "test_duplicate", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 4]) == True\n    assert candidate([1, 1, 2, 2, 3, 3, 4, 4, 5]) == True\n\ndef test_check():\n    check(test_duplicate)\n\ntest_check()\n", "sample_io": ["assert test_duplicate([1, 2, 3, 4, 5]) == False"], "source_codes": ["\nfrom typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n```"], "prompt_tokens": [56], "completion_tokens": [73], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_19_test_duplicate"}
{"name": "mbpp_62_smallest_num", "language": "Python3", "prompt": "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find smallest number in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "smallest_num", "test": "def check(candidate):\n    assert candidate([10, 20, 1, 45, 99]) == 1\n    assert candidate([1, 2, 3]) == 1\n    assert candidate([45, 46, 50, 60]) == 45\n\ndef test_check():\n    check(smallest_num)\n\ntest_check()\n", "sample_io": ["assert smallest_num([10, 20, 1, 45, 99]) == 1"], "source_codes": ["\nfrom typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    if not xs:\n        raise ValueError(\"List is empty\")\n    smallest = xs[0]\n    for num in xs[1:]:\n        if num < smallest:\n            smallest = num\n    return smallest\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    if not xs:\n        raise ValueError(\"List is empty\")\n    smallest = xs[0]\n    for num in xs[1:]:\n        if num < smallest:\n            smallest = num\n    return smallest\n```"], "prompt_tokens": [51], "completion_tokens": [80], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_62_smallest_num"}
{"name": "mbpp_746_sector_area", "language": "Python3", "prompt": "from typing import Optional\n\ndef sector_area(r: int, a: int) -> Optional[float]:\n    \"\"\"\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sector_area", "test": "def check(candidate):\n    assert candidate(4, 45) == 6.283185307179586\n    assert candidate(9, 45) == 31.808625617596654\n    assert candidate(9, 361) == None\n\ndef test_check():\n    check(sector_area)\n\ntest_check()\n", "sample_io": ["assert sector_area(4, 45) == 6.283185307179586"], "source_codes": ["\nfrom typing import Optional\nimport math\n\ndef sector_area(r: int, a: int) -> Optional[float]:\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs.\n    Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    # Area of sector = (angle/360) * \u03c0 * r^2\n    area = (a / 360) * math.pi * r * r\n    return area\n\n\n"], "responses": ["```python\nfrom typing import Optional\nimport math\n\ndef sector_area(r: int, a: int) -> Optional[float]:\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs.\n    Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    # Area of sector = (angle/360) * \u03c0 * r^2\n    area = (a / 360) * math.pi * r * r\n    return area\n```"], "prompt_tokens": [77], "completion_tokens": [117], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_746_sector_area"}
{"name": "mbpp_142_count_samepair", "language": "Python3", "prompt": "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    \"\"\"\n\tWrite a function to count number items that are identical in the same position of three given lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_samepair", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]) == 3\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]) == 4\n    assert candidate([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]) == 5\n\ndef test_check():\n    check(count_samepair)\n\ntest_check()\n", "sample_io": ["assert count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]) == 3"], "source_codes": ["\nfrom typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:\n            count += 1\n    return count\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:\n            count += 1\n    return count\n```"], "prompt_tokens": [72], "completion_tokens": [100], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_142_count_samepair"}
{"name": "mbpp_400_extract_freq", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef extract_freq(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to extract the number of unique tuples in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_freq", "test": "def check(candidate):\n    assert candidate([(3, 4), (1, 2), (4, 3), (5, 6)]) == 3\n    assert candidate([(4, 15), (2, 3), (5, 4), (6, 7)]) == 4\n    assert candidate([(5, 16), (2, 3), (6, 5), (6, 9)]) == 4\n\ndef test_check():\n    check(extract_freq)\n\ntest_check()\n", "sample_io": ["assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]) == 3"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef extract_freq(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set(test_list)\n    return len(unique_tuples)\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef extract_freq(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set(test_list)\n    return len(unique_tuples)\n```"], "prompt_tokens": [61], "completion_tokens": [61], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_400_extract_freq"}
{"name": "mbpp_595_min_Swaps", "language": "Python3", "prompt": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_Swaps", "test": "def check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n", "sample_io": ["assert min_Swaps('1101', '1110') == 1"], "source_codes": ["\nfrom typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n    Write a python function to count minimum number of swaps required \n    to convert one binary number represented as a string to another.\n    Swapping here means swapping characters in str1 to get str2.\n\n    Parameters:\n    str1 (str): The original binary string.\n    str2 (str): The target binary string.\n\n    Returns:\n    int or str: Minimum number of swaps required, or -1 if conversion is not possible.\n    \"\"\"\n    # If lengths differ, return -1 immediately\n    if len(str1) != len(str2):\n        return -1\n\n    # Check if both strings have the same number of 0s and 1s\n    if str1.count('0') != str2.count('0') or str1.count('1') != str2.count('1'):\n        return -1\n\n    # Identify the positions where characters differ\n    diff_0_to_1 = 0  # count of positions where str1 has '0' but str2 has '1'\n    diff_1_to_0 = 0  # count of positions where str1 has '1' but str2 has '0'\n\n    for c1, c2 in zip(str1, str2):\n        if c1 != c2:\n            if c1 == '0' and c2 == '1':\n                diff_0_to_1 += 1\n            elif c1 == '1' and c2 == '0':\n                diff_1_to_0 += 1\n\n    # Minimum swaps required to convert str1 to str2\n    # Each swap fixes one mismatch of each type\n    if diff_0_to_1 != diff_1_to_0:\n        # If mismatches are not balanced, conversion not possible by swaps\n        return -1\n\n    return diff_0_to_1\n\n# Example usage:\n# print(min_Swaps(\"1100\", \"0011\"))  # Output: 2\n\n\n"], "responses": ["```python\nfrom typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n    Write a python function to count minimum number of swaps required \n    to convert one binary number represented as a string to another.\n    Swapping here means swapping characters in str1 to get str2.\n\n    Parameters:\n    str1 (str): The original binary string.\n    str2 (str): The target binary string.\n\n    Returns:\n    int or str: Minimum number of swaps required, or -1 if conversion is not possible.\n    \"\"\"\n    # If lengths differ, return -1 immediately\n    if len(str1) != len(str2):\n        return -1\n\n    # Check if both strings have the same number of 0s and 1s\n    if str1.count('0') != str2.count('0') or str1.count('1') != str2.count('1'):\n        return -1\n\n    # Identify the positions where characters differ\n    diff_0_to_1 = 0  # count of positions where str1 has '0' but str2 has '1'\n    diff_1_to_0 = 0  # count of positions where str1 has '1' but str2 has '0'\n\n    for c1, c2 in zip(str1, str2):\n        if c1 != c2:\n            if c1 == '0' and c2 == '1':\n                diff_0_to_1 += 1\n            elif c1 == '1' and c2 == '0':\n                diff_1_to_0 += 1\n\n    # Minimum swaps required to convert str1 to str2\n    # Each swap fixes one mismatch of each type\n    if diff_0_to_1 != diff_1_to_0:\n        # If mismatches are not balanced, conversion not possible by swaps\n        return -1\n\n    return diff_0_to_1\n\n# Example usage:\n# print(min_Swaps(\"1100\", \"0011\"))  # Output: 2\n```\n"], "prompt_tokens": [69], "completion_tokens": [437], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_595_min_Swaps"}
{"name": "mbpp_135_hexagonal_num", "language": "Python3", "prompt": "def hexagonal_num(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth hexagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "hexagonal_num", "test": "def check(candidate):\n    assert candidate(10) == 190\n    assert candidate(5) == 45\n    assert candidate(7) == 91\n\ndef test_check():\n    check(hexagonal_num)\n\ntest_check()\n", "sample_io": ["assert hexagonal_num(10) == 190"], "source_codes": ["\ndef hexagonal_num(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    Hexagonal number formula: H(n) = n * (2n - 1)\n    \"\"\"\n    return n * (2 * n - 1)\n\n\n"], "responses": ["```python\ndef hexagonal_num(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    Hexagonal number formula: H(n) = n * (2n - 1)\n    \"\"\"\n    return n * (2 * n - 1)\n```"], "prompt_tokens": [45], "completion_tokens": [62], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_135_hexagonal_num"}
{"name": "mbpp_800_remove_all_spaces", "language": "Python3", "prompt": "def remove_all_spaces(text: str) -> str:\n    \"\"\"\n\tWrite a function to remove all whitespaces from a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_800_remove_all_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_all_spaces", "test": "def check(candidate):\n    assert candidate('python  program') == 'pythonprogram'\n    assert candidate('python   programming    language') == 'pythonprogramminglanguage'\n    assert candidate('python                     program') == 'pythonprogram'\n    assert candidate('   python                     program') == 'pythonprogram'\n\ndef test_check():\n    check(remove_all_spaces)\n\ntest_check()\n", "sample_io": ["assert remove_all_spaces('python  program') == 'pythonprogram'"], "source_codes": ["\ndef remove_all_spaces(text: str) -> str:\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return ''.join(text.split())\n\n\n"], "responses": ["```python\ndef remove_all_spaces(text: str) -> str:\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return ''.join(text.split())\n```"], "prompt_tokens": [46], "completion_tokens": [39], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_800_remove_all_spaces"}
{"name": "mbpp_127_multiply_int", "language": "Python3", "prompt": "def multiply_int(x: int, y: int) -> int:\n    \"\"\"\n\tWrite a function to multiply two integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "multiply_int", "test": "def check(candidate):\n    assert candidate(10, 20) == 200\n    assert candidate(5, 10) == 50\n    assert candidate(4, 8) == 32\n\ndef test_check():\n    check(multiply_int)\n\ntest_check()\n", "sample_io": ["assert multiply_int(10, 20) == 200"], "source_codes": ["\ndef multiply_int(x: int, y: int) -> int:\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y\n\n\n"], "responses": ["```python\ndef multiply_int(x: int, y: int) -> int:\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y\n```"], "prompt_tokens": [45], "completion_tokens": [37], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_127_multiply_int"}
{"name": "mbpp_764_number_ctr", "language": "Python3", "prompt": "def number_ctr(str: str) -> int:\n    \"\"\"\n\tWrite a python function to count number of digits in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "number_ctr", "test": "def check(candidate):\n    assert candidate('program2bedone') == 1\n    assert candidate('3wonders') == 1\n    assert candidate('123') == 3\n    assert candidate('3wond-1ers2') == 3\n\ndef test_check():\n    check(number_ctr)\n\ntest_check()\n", "sample_io": ["assert number_ctr('program2bedone') == 1"], "source_codes": ["\ndef number_ctr(s: str) -> int:\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count\n\n\n"], "responses": ["```python\ndef number_ctr(s: str) -> int:\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count\n```"], "prompt_tokens": [47], "completion_tokens": [60], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_764_number_ctr"}
{"name": "mbpp_767_get_pairs_count", "language": "Python3", "prompt": "from typing import List\n\ndef get_pairs_count(arr: List[int], sum: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_pairs_count", "test": "def check(candidate):\n    assert candidate([1, 1, 1, 1], 2) == 6\n    assert candidate([1, 5, 7, -1, 5], 6) == 3\n    assert candidate([1, -2, 3], 1) == 1\n    assert candidate([-1, -2, 3], -3) == 1\n\ndef test_check():\n    check(get_pairs_count)\n\ntest_check()\n", "sample_io": ["assert get_pairs_count([1, 1, 1, 1], 2) == 6"], "source_codes": ["\nfrom typing import List\n\ndef get_pairs_count(arr: List[int], sum: int) -> int:\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum.\n\n    Args:\n    arr (List[int]): List of integers.\n    sum (int): Target sum for pairs.\n\n    Returns:\n    int: Number of pairs whose sum is equal to `sum`.\n    \"\"\"\n    count = 0\n    freq = {}\n\n    for num in arr:\n        complement = sum - num\n        if complement in freq and freq[complement] > 0:\n            count += 1\n            freq[complement] -= 1\n        else:\n            freq[num] = freq.get(num, 0) + 1\n\n    return count\n\n# Example usage:\n# arr = [1, 5, 7, -1, 5]\n# target_sum = 6\n# print(get_pairs_count(arr, target_sum))  # Output: 3\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef get_pairs_count(arr: List[int], sum: int) -> int:\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum.\n\n    Args:\n    arr (List[int]): List of integers.\n    sum (int): Target sum for pairs.\n\n    Returns:\n    int: Number of pairs whose sum is equal to `sum`.\n    \"\"\"\n    count = 0\n    freq = {}\n\n    for num in arr:\n        complement = sum - num\n        if complement in freq and freq[complement] > 0:\n            count += 1\n            freq[complement] -= 1\n        else:\n            freq[num] = freq.get(num, 0) + 1\n\n    return count\n\n# Example usage:\n# arr = [1, 5, 7, -1, 5]\n# target_sum = 6\n# print(get_pairs_count(arr, target_sum))  # Output: 3\n```"], "prompt_tokens": [76], "completion_tokens": [224], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_767_get_pairs_count"}
{"name": "mbpp_99_decimal_to_binary", "language": "Python3", "prompt": "def decimal_to_binary(n: int) -> str:\n    \"\"\"\n\tWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "decimal_to_binary", "test": "def check(candidate):\n    assert candidate(8) == '1000'\n    assert candidate(18) == '10010'\n    assert candidate(7) == '111'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n", "sample_io": ["assert decimal_to_binary(8) == '1000'"], "source_codes": ["\ndef decimal_to_binary(n: int) -> str:\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str\n\n\n"], "responses": ["```python\ndef decimal_to_binary(n: int) -> str:\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str\n```"], "prompt_tokens": [57], "completion_tokens": [92], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_99_decimal_to_binary"}
{"name": "mbpp_119_search", "language": "Python3", "prompt": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "search", "test": "def check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n", "sample_io": ["assert search([1, 1, 2, 2, 3]) == 3"], "source_codes": ["\nfrom typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        # Ensure mid is even for comparison pairing\n        if mid % 2 == 1:\n            mid -= 1\n\n        # If the pair is equal, the single element is in the right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n\n    return arr[left]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        # Ensure mid is even for comparison pairing\n        if mid % 2 == 1:\n            mid -= 1\n\n        # If the pair is equal, the single element is in the right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n\n    return arr[left]\n```\n"], "prompt_tokens": [55], "completion_tokens": [151], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_119_search"}
{"name": "mbpp_92_is_undulating", "language": "Python3", "prompt": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_undulating", "test": "def check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n", "sample_io": ["assert is_undulating(1212121) == True"], "source_codes": ["\ndef is_undulating(n: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    An undulating number has at least three digits and its digits alternate between two different digits.\n    For example:\n    121212 is undulating\n    343434 is undulating\n    123123 is not undulating\n    111111 is not undulating\n    \"\"\"\n    s = str(n)\n    if len(s) < 3:\n        return False\n    \n    # The number must alternate between exactly two different digits\n    # Check if positions even indices have one digit and odd indices have another digit\n    even_digit = s[0]\n    odd_digit = s[1]\n    if even_digit == odd_digit:\n        return False\n    \n    for i, ch in enumerate(s):\n        if i % 2 == 0:\n            if ch != even_digit:\n                return False\n        else:\n            if ch != odd_digit:\n                return False\n    return True\n\n\n"], "responses": ["```python\ndef is_undulating(n: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    An undulating number has at least three digits and its digits alternate between two different digits.\n    For example:\n    121212 is undulating\n    343434 is undulating\n    123123 is not undulating\n    111111 is not undulating\n    \"\"\"\n    s = str(n)\n    if len(s) < 3:\n        return False\n    \n    # The number must alternate between exactly two different digits\n    # Check if positions even indices have one digit and odd indices have another digit\n    even_digit = s[0]\n    odd_digit = s[1]\n    if even_digit == odd_digit:\n        return False\n    \n    for i, ch in enumerate(s):\n        if i % 2 == 0:\n            if ch != even_digit:\n                return False\n        else:\n            if ch != odd_digit:\n                return False\n    return True\n```"], "prompt_tokens": [50], "completion_tokens": [217], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_92_is_undulating"}
{"name": "mbpp_105_count", "language": "Python3", "prompt": "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    \"\"\"\n\tWrite a python function to count true booleans in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count", "test": "def check(candidate):\n    assert candidate([True, False, True]) == 2\n    assert candidate([False, False]) == 0\n    assert candidate([True, True, True]) == 3\n\ndef test_check():\n    check(count)\n\ntest_check()\n", "sample_io": ["assert count([True, False, True]) == 2"], "source_codes": ["\nfrom typing import List\n\ndef count(lst: List[bool]) -> int:\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    return sum(lst)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count(lst: List[bool]) -> int:\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    return sum(lst)\n```"], "prompt_tokens": [53], "completion_tokens": [44], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_105_count"}
{"name": "mbpp_766_pair_wise", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n\tWrite a function to return a list of all pairs of consecutive items in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pair_wise", "test": "def check(candidate):\n    assert candidate([1, 1, 2, 3, 3, 4, 4, 5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    assert candidate([1, 5, 7, 9, 10]) == [(1, 5), (5, 7), (7, 9), (9, 10)]\n    assert candidate([5, 1, 9, 7, 10]) == [(5, 1), (1, 9), (9, 7), (7, 10)]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n\ndef test_check():\n    check(pair_wise)\n\ntest_check()\n", "sample_io": ["assert pair_wise([1, 1, 2, 3, 3, 4, 4, 5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    return [(l1[i], l1[i+1]) for i in range(len(l1) - 1)]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    return [(l1[i], l1[i+1]) for i in range(len(l1) - 1)]\n```"], "prompt_tokens": [66], "completion_tokens": [77], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_766_pair_wise"}
{"name": "mbpp_464_check_value", "language": "Python3", "prompt": "from typing import Dict\n\ndef check_value(dict: Dict[str, int], n: int) -> bool:\n    \"\"\"\n\tWrite a function to check if all values are same in a dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_464_check_value.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_value", "test": "def check(candidate):\n    assert candidate({ 'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12 }, 10) == False\n    assert candidate({ 'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12 }, 12) == True\n    assert candidate({ 'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12 }, 5) == False\n\ndef test_check():\n    check(check_value)\n\ntest_check()\n", "sample_io": ["assert check_value({ 'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12 }, 10) == False"], "source_codes": ["\nfrom typing import Dict\n\ndef check_value(d: Dict[str, int], n: int) -> bool:\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    # If dictionary is empty, return True (all values are trivially the same)\n    if not d:\n        return True\n    \n    # Get all values\n    values = list(d.values())\n    \n    # Check if all values are equal to the first value\n    first_value = values[0]\n    for value in values[1:]:\n        if value != first_value:\n            return False\n    return True\n\n\n"], "responses": ["```python\nfrom typing import Dict\n\ndef check_value(d: Dict[str, int], n: int) -> bool:\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    # If dictionary is empty, return True (all values are trivially the same)\n    if not d:\n        return True\n    \n    # Get all values\n    values = list(d.values())\n    \n    # Check if all values are equal to the first value\n    first_value = values[0]\n    for value in values[1:]:\n        if value != first_value:\n            return False\n    return True\n```"], "prompt_tokens": [59], "completion_tokens": [130], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_464_check_value"}
{"name": "mbpp_443_largest_neg", "language": "Python3", "prompt": "from typing import List\n\ndef largest_neg(list1: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the largest negative number from the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "largest_neg", "test": "def check(candidate):\n    assert candidate([1, 2, 3, -4, -6]) == -6\n    assert candidate([1, 2, 3, -8, -9]) == -9\n    assert candidate([1, 2, 3, 4, -1]) == -1\n\ndef test_check():\n    check(largest_neg)\n\ntest_check()\n", "sample_io": ["assert largest_neg([1, 2, 3, -4, -6]) == -6"], "source_codes": ["\nfrom typing import List\n\ndef largest_neg(list1: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    negatives = [num for num in list1 if num < 0]\n    if not negatives:\n        raise ValueError(\"No negative numbers in the list\")\n    return max(negatives)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef largest_neg(list1: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    negatives = [num for num in list1 if num < 0]\n    if not negatives:\n        raise ValueError(\"No negative numbers in the list\")\n    return max(negatives)\n```"], "prompt_tokens": [55], "completion_tokens": [80], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_443_largest_neg"}
{"name": "mbpp_602_first_repeated_char", "language": "Python3", "prompt": "from typing import Optional\n\ndef first_repeated_char(str1: str) -> Optional[str]:\n    \"\"\"\n\tWrite a python function to find the first repeated character in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "first_repeated_char", "test": "def check(candidate):\n    assert candidate('abcabc') == 'a'\n    assert candidate('abc') == None\n    assert candidate('123123') == '1'\n\ndef test_check():\n    check(first_repeated_char)\n\ntest_check()\n", "sample_io": ["assert first_repeated_char('abcabc') == 'a'"], "source_codes": ["\nfrom typing import Optional\n\ndef first_repeated_char(str1: str) -> Optional[str]:\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n\n\n"], "responses": ["```python\nfrom typing import Optional\n\ndef first_repeated_char(str1: str) -> Optional[str]:\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n```"], "prompt_tokens": [57], "completion_tokens": [74], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_602_first_repeated_char"}
{"name": "mbpp_770_odd_num_sum", "language": "Python3", "prompt": "def odd_num_sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_num_sum", "test": "def check(candidate):\n    assert candidate(2) == 82\n    assert candidate(3) == 707\n    assert candidate(4) == 3108\n\ndef test_check():\n    check(odd_num_sum)\n\ntest_check()\n", "sample_io": ["assert odd_num_sum(2) == 82"], "source_codes": ["\ndef odd_num_sum(n: int) -> int:\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(n):\n        odd_num = 2 * i + 1\n        total += odd_num ** 4\n    return total\n\n\n"], "responses": ["```python\ndef odd_num_sum(n: int) -> int:\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(n):\n        odd_num = 2 * i + 1\n        total += odd_num ** 4\n    return total\n```"], "prompt_tokens": [52], "completion_tokens": [76], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_770_odd_num_sum"}
{"name": "mbpp_424_extract_rear", "language": "Python3", "prompt": "from typing import Tuple, List\n\ndef extract_rear(test_tuple: Tuple[str, str, str]) -> List[str]:\n    \"\"\"\n\tWrite a function to extract only the rear index element of each string in the given tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_rear", "test": "def check(candidate):\n    assert candidate(('Mers', 'for', 'Vers')) == ['s', 'r', 's']\n    assert candidate(('Avenge', 'for', 'People')) == ['e', 'r', 'e']\n    assert candidate(('Gotta', 'get', 'go')) == ['a', 't', 'o']\n\ndef test_check():\n    check(extract_rear)\n\ntest_check()\n", "sample_io": ["assert extract_rear(('Mers', 'for', 'Vers')) == ['s', 'r', 's']"], "source_codes": ["\nfrom typing import Tuple, List\n\ndef extract_rear(test_tuple: Tuple[str, str, str]) -> List[str]:\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    return [s[-1] for s in test_tuple]\n\n\n"], "responses": ["```python\nfrom typing import Tuple, List\n\ndef extract_rear(test_tuple: Tuple[str, str, str]) -> List[str]:\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    return [s[-1] for s in test_tuple]\n```"], "prompt_tokens": [66], "completion_tokens": [65], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_424_extract_rear"}
{"name": "mbpp_133_sum_negativenum", "language": "Python3", "prompt": "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_negativenum", "test": "def check(candidate):\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32\n    assert candidate([10, 15, -14, 13, -18, 12, -20]) == -52\n    assert candidate([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]) == -894\n\ndef test_check():\n    check(sum_negativenum)\n\ntest_check()\n", "sample_io": ["assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32"], "source_codes": ["\nfrom typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    return sum(num for num in nums if num < 0)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    return sum(num for num in nums if num < 0)\n```"], "prompt_tokens": [60], "completion_tokens": [60], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_133_sum_negativenum"}
{"name": "mbpp_760_unique_Element", "language": "Python3", "prompt": "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "unique_Element", "test": "def check(candidate):\n    assert candidate([1, 1, 1]) == True\n    assert candidate([1, 2, 1, 2]) == False\n    assert candidate([1, 2, 3, 4, 5]) == False\n\ndef test_check():\n    check(unique_Element)\n\ntest_check()\n", "sample_io": ["assert unique_Element([1, 1, 1]) == True"], "source_codes": ["\nfrom typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    return len(set(arr)) == 1\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    return len(set(arr)) == 1\n```"], "prompt_tokens": [58], "completion_tokens": [54], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_760_unique_Element"}
{"name": "mbpp_281_all_unique", "language": "Python3", "prompt": "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check if the elements of a given list are unique or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "all_unique", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == True\n    assert candidate([1, 2, 1, 2]) == False\n    assert candidate([1, 2, 3, 4, 5]) == True\n\ndef test_check():\n    check(all_unique)\n\ntest_check()\n", "sample_io": ["assert all_unique([1, 2, 3]) == True"], "source_codes": ["\nfrom typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    return len(test_list) == len(set(test_list))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    return len(test_list) == len(set(test_list))\n```"], "prompt_tokens": [58], "completion_tokens": [56], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_281_all_unique"}
{"name": "mbpp_406_find_Parity", "language": "Python3", "prompt": "def find_Parity(x: int) -> bool:\n    \"\"\"\n\tWrite a python function to find whether the parity of a given number is odd.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Parity", "test": "def check(candidate):\n    assert candidate(12) == False\n    assert candidate(7) == True\n    assert candidate(10) == False\n\ndef test_check():\n    check(find_Parity)\n\ntest_check()\n", "sample_io": ["assert find_Parity(12) == False"], "source_codes": ["\ndef find_Parity(x: int) -> bool:\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    Parity here means the count of set bits (1s) in the binary representation of the number.\n\n    Returns True if number of set bits is odd, otherwise False.\n    \"\"\"\n    count = 0\n    while x:\n        count ^= (x & 1)\n        x >>= 1\n    return bool(count)\n\n\n"], "responses": ["```python\ndef find_Parity(x: int) -> bool:\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    Parity here means the count of set bits (1s) in the binary representation of the number.\n\n    Returns True if number of set bits is odd, otherwise False.\n    \"\"\"\n    count = 0\n    while x:\n        count ^= (x & 1)\n        x >>= 1\n    return bool(count)\n```"], "prompt_tokens": [50], "completion_tokens": [102], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_406_find_Parity"}
{"name": "mbpp_562_Find_Max_Length", "language": "Python3", "prompt": "from typing import List\n\ndef Find_Max_Length(lst: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a python function to find the length of the longest sublists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Max_Length", "test": "def check(candidate):\n    assert candidate([[1], [1, 4], [5, 6, 7, 8]]) == 4\n    assert candidate([[0, 1], [2, 2], [3, 2, 1]]) == 3\n    assert candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5\n\ndef test_check():\n    check(Find_Max_Length)\n\ntest_check()\n", "sample_io": ["assert Find_Max_Length([[1], [1, 4], [5, 6, 7, 8]]) == 4"], "source_codes": ["\nfrom typing import List\n\ndef Find_Max_Length(lst: List[List[int]]) -> int:\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    if not lst:\n        return 0\n    return max(len(sublist) for sublist in lst)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Find_Max_Length(lst: List[List[int]]) -> int:\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    if not lst:\n        return 0\n    return max(len(sublist) for sublist in lst)\n```"], "prompt_tokens": [55], "completion_tokens": [63], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_562_Find_Max_Length"}
{"name": "mbpp_87_merge_dictionaries_three", "language": "Python3", "prompt": "from typing import Dict\n\ndef merge_dictionaries_three(dict1: Dict[str, str], dict2: Dict[str, str], dict3: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"\n\tWrite a function to merge three dictionaries into a single dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_87_merge_dictionaries_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "merge_dictionaries_three", "test": "def check(candidate):\n    assert candidate({ 'R': 'Red', 'B': 'Black', 'P': 'Pink' }, { 'G': 'Green', 'W': 'White' }, { 'O': 'Orange', 'W': 'White', 'B': 'Black' }) == { 'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange' }\n    assert candidate({ 'R': 'Red', 'B': 'Black', 'P': 'Pink' }, { 'G': 'Green', 'W': 'White' }, { 'L': 'lavender', 'B': 'Blue' }) == { 'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender' }\n    assert candidate({ 'R': 'Red', 'B': 'Black', 'P': 'Pink' }, { 'L': 'lavender', 'B': 'Blue' }, { 'G': 'Green', 'W': 'White' }) == { 'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White' }\n\ndef test_check():\n    check(merge_dictionaries_three)\n\ntest_check()\n", "sample_io": ["assert merge_dictionaries_three({ 'R': 'Red', 'B': 'Black', 'P': 'Pink' }, { 'G': 'Green', 'W': 'White' }, { 'O': 'Orange', 'W': 'White', 'B': 'Black' }) == { 'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange' }"], "source_codes": ["\nfrom typing import Dict\n\ndef merge_dictionaries_three(dict1: Dict[str, str], dict2: Dict[str, str], dict3: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    If there are duplicate keys, values from later dictionaries overwrite earlier ones.\n    \"\"\"\n    merged_dict = dict1.copy()  # start with dict1\n    merged_dict.update(dict2)   # update with dict2\n    merged_dict.update(dict3)   # update with dict3\n    return merged_dict\n\n\n"], "responses": ["```python\nfrom typing import Dict\n\ndef merge_dictionaries_three(dict1: Dict[str, str], dict2: Dict[str, str], dict3: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    If there are duplicate keys, values from later dictionaries overwrite earlier ones.\n    \"\"\"\n    merged_dict = dict1.copy()  # start with dict1\n    merged_dict.update(dict2)   # update with dict2\n    merged_dict.update(dict3)   # update with dict3\n    return merged_dict\n```"], "prompt_tokens": [75], "completion_tokens": [124], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_87_merge_dictionaries_three"}
{"name": "mbpp_11_remove_Occ", "language": "Python3", "prompt": "def remove_Occ(s: str, ch: str) -> str:\n    \"\"\"\n\tWrite a python function to remove first and last occurrence of a given character from the string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_Occ", "test": "def check(candidate):\n    assert candidate('hello', 'l') == 'heo'\n    assert candidate('abcda', 'a') == 'bcd'\n    assert candidate('PHP', 'P') == 'H'\n\ndef test_check():\n    check(remove_Occ)\n\ntest_check()\n", "sample_io": ["assert remove_Occ('hello', 'l') == 'heo'"], "source_codes": ["\ndef remove_Occ(s: str, ch: str) -> str:\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    # If character not found or only one occurrence, remove only once\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index+1:]\n    \n    # Remove last occurrence first to avoid shifting indices\n    s = s[:last_index] + s[last_index+1:]\n    s = s[:first_index] + s[first_index+1:]\n    return s\n\n\n"], "responses": ["```python\ndef remove_Occ(s: str, ch: str) -> str:\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    # If character not found or only one occurrence, remove only once\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index+1:]\n    \n    # Remove last occurrence first to avoid shifting indices\n    s = s[:last_index] + s[last_index+1:]\n    s = s[:first_index] + s[first_index+1:]\n    return s\n```"], "prompt_tokens": [56], "completion_tokens": [155], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_11_remove_Occ"}
{"name": "mbpp_751_check_min_heap", "language": "Python3", "prompt": "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_min_heap", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([2, 3, 4, 5, 10, 15]) == True\n    assert candidate([2, 10, 4, 5, 3, 15]) == False\n\ndef test_check():\n    check(check_min_heap)\n\ntest_check()\n", "sample_io": ["assert check_min_heap([1, 2, 3, 4, 5, 6]) == True"], "source_codes": ["\nfrom typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    \"\"\"\n    Write a function to check if the given array represents a min heap or not.\n    A min heap satisfies the heap property: for every node i other than the root,\n    arr[parent(i)] <= arr[i].\n    \n    :param arr: List[int] - input array representing a binary tree\n    :return: bool - True if arr represents a min heap, else False\n    \"\"\"\n    n = len(arr)\n    for i in range(n // 2):  # only need to check for internal nodes\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        # Check left child exists and is >= arr[i]\n        if left < n and arr[i] > arr[left]:\n            return False\n        \n        # Check right child exists and is >= arr[i]\n        if right < n and arr[i] > arr[right]:\n            return False\n    \n    return True\n\n\n# Example usage:\n# print(check_min_heap([1, 3, 5, 7, 9, 8]))  # True\n# print(check_min_heap([10, 9, 8, 7, 6]))    # False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    \"\"\"\n    Write a function to check if the given array represents a min heap or not.\n    A min heap satisfies the heap property: for every node i other than the root,\n    arr[parent(i)] <= arr[i].\n    \n    :param arr: List[int] - input array representing a binary tree\n    :return: bool - True if arr represents a min heap, else False\n    \"\"\"\n    n = len(arr)\n    for i in range(n // 2):  # only need to check for internal nodes\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        # Check left child exists and is >= arr[i]\n        if left < n and arr[i] > arr[left]:\n            return False\n        \n        # Check right child exists and is >= arr[i]\n        if right < n and arr[i] > arr[right]:\n            return False\n    \n    return True\n\n\n# Example usage:\n# print(check_min_heap([1, 3, 5, 7, 9, 8]))  # True\n# print(check_min_heap([10, 9, 8, 7, 6]))    # False\n```"], "prompt_tokens": [79], "completion_tokens": [268], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_751_check_min_heap"}
{"name": "mbpp_410_min_val", "language": "Python3", "prompt": "from typing import List, Union\n\ndef min_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the minimum value in a given heterogeneous list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_410_min_val.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_val", "test": "def check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 2\n    assert candidate(['Python', 15, 20, 25]) == 15\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 20\n\ndef test_check():\n    check(min_val)\n\ntest_check()\n", "sample_io": ["assert min_val(['Python', 3, 2, 4, 5, 'version']) == 2"], "source_codes": ["\nfrom typing import List, Union\n\ndef min_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    Assumes that the list contains both integers and strings that can be converted to integers.\n    \"\"\"\n    # Convert all elements to int\n    int_values = [int(x) for x in listval]\n    return min(int_values)\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef min_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    Assumes that the list contains both integers and strings that can be converted to integers.\n    \"\"\"\n    # Convert all elements to int\n    int_values = [int(x) for x in listval]\n    return min(int_values)\n```"], "prompt_tokens": [60], "completion_tokens": [91], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_410_min_val"}
{"name": "mbpp_578_interleave_lists", "language": "Python3", "prompt": "from typing import List\n\ndef interleave_lists(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "interleave_lists", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    assert candidate([10, 20], [15, 2], [5, 10]) == [10, 15, 5, 20, 2, 10]\n    assert candidate([11, 44], [10, 15], [20, 5]) == [11, 10, 20, 44, 15, 5]\n\ndef test_check():\n    check(interleave_lists)\n\ntest_check()\n", "sample_io": ["assert interleave_lists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"], "source_codes": ["\nfrom typing import List\n\ndef interleave_lists(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for a, b, c in zip(list1, list2, list3):\n        result.extend([a, b, c])\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef interleave_lists(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for a, b, c in zip(list1, list2, list3):\n        result.extend([a, b, c])\n    return result\n```"], "prompt_tokens": [73], "completion_tokens": [95], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_578_interleave_lists"}
{"name": "mbpp_90_len_log", "language": "Python3", "prompt": "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    \"\"\"\n\tWrite a python function to find the length of the longest word.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "len_log", "test": "def check(candidate):\n    assert candidate(['python', 'PHP', 'bigdata']) == 7\n    assert candidate(['a', 'ab', 'abc']) == 3\n    assert candidate(['small', 'big', 'tall']) == 5\n\ndef test_check():\n    check(len_log)\n\ntest_check()\n", "sample_io": ["assert len_log(['python', 'PHP', 'bigdata']) == 7"], "source_codes": ["\nfrom typing import List\n\ndef len_log(list1: List[str]) -> int:\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    if not list1:\n        return 0\n    return max(len(word) for word in list1)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef len_log(list1: List[str]) -> int:\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    if not list1:\n        return 0\n    return max(len(word) for word in list1)\n```"], "prompt_tokens": [53], "completion_tokens": [62], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_90_len_log"}
{"name": "mbpp_452_loss_amount", "language": "Python3", "prompt": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "loss_amount", "test": "def check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n", "sample_io": ["assert loss_amount(1500, 1200) == 0"], "source_codes": ["\ndef loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n    Write a function that gives loss amount on a sale \n    if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\n"], "responses": ["```python\ndef loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n    Write a function that gives loss amount on a sale \n    if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n```"], "prompt_tokens": [60], "completion_tokens": [72], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_452_loss_amount"}
{"name": "mbpp_798__sum", "language": "Python3", "prompt": "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of an array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_798__sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "_sum", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([15, 12, 13, 10]) == 50\n    assert candidate([0, 1, 2]) == 3\n\ndef test_check():\n    check(_sum)\n\ntest_check()\n", "sample_io": ["assert _sum([1, 2, 3]) == 6"], "source_codes": ["\nfrom typing import List\n\ndef _sum(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef _sum(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)\n```"], "prompt_tokens": [51], "completion_tokens": [42], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_798__sum"}
{"name": "mbpp_393_max_length_list", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_length_list(input_list: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\"\n\tWrite a function to find the list with maximum length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_length_list", "test": "def check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])\n    assert candidate([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]) == (5, [1, 2, 3, 4, 5])\n    assert candidate([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]) == (4, [6, 7, 8, 9])\n\ndef test_check():\n    check(max_length_list)\n\ntest_check()\n", "sample_io": ["assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_length_list(input_list: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\"\n    Write a function to find the list with maximum length.\n    Returns a tuple containing the length of the longest list and the list itself.\n    If multiple lists have the same maximum length, the first one is returned.\n    \"\"\"\n    if not input_list:\n        return 0, []\n    \n    max_list = max(input_list, key=len)\n    return len(max_list), max_list\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_length_list(input_list: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\"\n    Write a function to find the list with maximum length.\n    Returns a tuple containing the length of the longest list and the list itself.\n    If multiple lists have the same maximum length, the first one is returned.\n    \"\"\"\n    if not input_list:\n        return 0, []\n    \n    max_list = max(input_list, key=len)\n    return len(max_list), max_list\n```"], "prompt_tokens": [59], "completion_tokens": [110], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_393_max_length_list"}
{"name": "mbpp_272_rear_extract", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple[int, str, int]]) -> List[int]:\n    \"\"\"\n\tWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rear_extract", "test": "def check(candidate):\n    assert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n    assert candidate([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\n    assert candidate([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n\ndef test_check():\n    check(rear_extract)\n\ntest_check()\n", "sample_io": ["assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple[int, str, int]]) -> List[int]:\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    return [t[-1] for t in test_list]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple[int, str, int]]) -> List[int]:\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    return [t[-1] for t in test_list]\n```"], "prompt_tokens": [71], "completion_tokens": [70], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_272_rear_extract"}
{"name": "mbpp_564_count_Pairs", "language": "Python3", "prompt": "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Pairs", "test": "def check(candidate):\n    assert candidate([1, 2, 1], 3) == 2\n    assert candidate([1, 1, 1, 1], 4) == 0\n    assert candidate([1, 2, 3, 4, 5], 5) == 10\n\ndef test_check():\n    check(count_Pairs)\n\ntest_check()\n", "sample_io": ["assert count_Pairs([1, 2, 1], 3) == 2"], "source_codes": ["\nfrom typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number \n    of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    # Total number of unordered pairs = n * (n-1) // 2\n    total_pairs = n * (n - 1) // 2\n    \n    # Count frequency of each element\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Count number of pairs with equal elements\n    equal_pairs = 0\n    for count in freq.values():\n        if count > 1:\n            equal_pairs += count * (count - 1) // 2\n    \n    # Number of pairs with unequal elements = total_pairs - equal_pairs\n    return total_pairs - equal_pairs\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number \n    of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    # Total number of unordered pairs = n * (n-1) // 2\n    total_pairs = n * (n - 1) // 2\n    \n    # Count frequency of each element\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Count number of pairs with equal elements\n    equal_pairs = 0\n    for count in freq.values():\n        if count > 1:\n            equal_pairs += count * (count - 1) // 2\n    \n    # Number of pairs with unequal elements = total_pairs - equal_pairs\n    return total_pairs - equal_pairs\n```\n"], "prompt_tokens": [68], "completion_tokens": [196], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_564_count_Pairs"}
{"name": "mbpp_438_count_bidirectional", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to count bidirectional tuple pairs.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_bidirectional", "test": "def check(candidate):\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3\n    assert candidate([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]) == 2\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]) == 4\n\ndef test_check():\n    check(count_bidirectional)\n\ntest_check()\n", "sample_io": ["assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n\n    A bidirectional tuple pair is when a pair (a, b) and (b, a) both exist in the list.\n    Each such pair should be counted once.\n\n    Example:\n    Input: [(1, 2), (2, 1), (3, 4), (4, 3), (5, 6)]\n    Output: 2  # because (1, 2)-(2, 1) and (3, 4)-(4, 3)\n\n    \"\"\"\n    seen = set(test_list)\n    counted = set()\n    count = 0\n\n    for a, b in test_list:\n        if (b, a) in seen and (b, a) not in counted and (a, b) not in counted:\n            if a != b:  # optionally avoid counting pairs like (1,1)\n                count += 1\n                counted.add((a, b))\n                counted.add((b, a))\n\n    return count\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n\n    A bidirectional tuple pair is when a pair (a, b) and (b, a) both exist in the list.\n    Each such pair should be counted once.\n\n    Example:\n    Input: [(1, 2), (2, 1), (3, 4), (4, 3), (5, 6)]\n    Output: 2  # because (1, 2)-(2, 1) and (3, 4)-(4, 3)\n\n    \"\"\"\n    seen = set(test_list)\n    counted = set()\n    count = 0\n\n    for a, b in test_list:\n        if (b, a) in seen and (b, a) not in counted and (a, b) not in counted:\n            if a != b:  # optionally avoid counting pairs like (1,1)\n                count += 1\n                counted.add((a, b))\n                counted.add((b, a))\n\n    return count\n```"], "prompt_tokens": [57], "completion_tokens": [245], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_438_count_bidirectional"}
{"name": "mbpp_640_remove_parenthesis", "language": "Python3", "prompt": "from typing import List\n\ndef remove_parenthesis(items: List[str]) -> str:\n    \"\"\"\n\tWrite a function to remove the parenthesis and what is inbetween them from a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_parenthesis", "test": "def check(candidate):\n    assert candidate(['python (chrome)']) == 'python'\n    assert candidate(['string(.abc)']) == 'string'\n    assert candidate(['alpha(num)']) == 'alpha'\n\ndef test_check():\n    check(remove_parenthesis)\n\ntest_check()\n", "sample_io": ["assert remove_parenthesis(['python (chrome)']) == 'python'"], "source_codes": ["\nfrom typing import List\nimport re\n\ndef remove_parenthesis(items: List[str]) -> str:\n    \"\"\"\n    Write a function to remove the parenthesis and what is in between them from a string.\n    The input is a list of strings, which will be joined into a single string.\n    Parentheses and their contents will be removed from the resulting string.\n    \"\"\"\n    combined_str = \"\".join(items)\n    # Remove all occurrences of parentheses and their contents (non-greedy)\n    result = re.sub(r'\\([^)]*\\)', '', combined_str)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\nimport re\n\ndef remove_parenthesis(items: List[str]) -> str:\n    \"\"\"\n    Write a function to remove the parenthesis and what is in between them from a string.\n    The input is a list of strings, which will be joined into a single string.\n    Parentheses and their contents will be removed from the resulting string.\n    \"\"\"\n    combined_str = \"\".join(items)\n    # Remove all occurrences of parentheses and their contents (non-greedy)\n    result = re.sub(r'\\([^)]*\\)', '', combined_str)\n    return result\n```"], "prompt_tokens": [58], "completion_tokens": [122], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_640_remove_parenthesis"}
{"name": "mbpp_72_dif_Square", "language": "Python3", "prompt": "def dif_Square(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "dif_Square", "test": "def check(candidate):\n    assert candidate(5) == True\n    assert candidate(10) == False\n    assert candidate(15) == True\n\ndef test_check():\n    check(dif_Square)\n\ntest_check()\n", "sample_io": ["assert dif_Square(5) == True"], "source_codes": ["\ndef dif_Square(n: int) -> bool:\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n    A number n can be represented as a difference of squares if and only if n is not of the form 4k+2.\n    \n    Explanation:\n    Any integer n can be expressed as:\n        n = a^2 - b^2 = (a+b)(a-b)\n    For integers a and b, (a+b) and (a-b) must be both even or both odd.\n    This implies n \u2260 2 mod 4.\n    \n    Args:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if n can be represented as difference of squares, False otherwise.\n    \"\"\"\n    # Numbers that are 2 mod 4 cannot be represented as difference of squares\n    return n % 4 != 2\n\n\n"], "responses": ["```python\ndef dif_Square(n: int) -> bool:\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n    A number n can be represented as a difference of squares if and only if n is not of the form 4k+2.\n    \n    Explanation:\n    Any integer n can be expressed as:\n        n = a^2 - b^2 = (a+b)(a-b)\n    For integers a and b, (a+b) and (a-b) must be both even or both odd.\n    This implies n \u2260 2 mod 4.\n    \n    Args:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if n can be represented as difference of squares, False otherwise.\n    \"\"\"\n    # Numbers that are 2 mod 4 cannot be represented as difference of squares\n    return n % 4 != 2\n```"], "prompt_tokens": [56], "completion_tokens": [194], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_72_dif_Square"}
{"name": "mbpp_448_cal_sum", "language": "Python3", "prompt": "def cal_sum(n: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the sum of perrin numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cal_sum", "test": "def check(candidate):\n    assert candidate(9) == 49\n    assert candidate(10) == 66\n    assert candidate(11) == 88\n\ndef test_check():\n    check(cal_sum)\n\ntest_check()\n", "sample_io": ["assert cal_sum(9) == 49"], "source_codes": ["\ndef cal_sum(n: int) -> int:\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers up to the nth term (0-indexed).\n\n    Perrin sequence is defined as:\n      P(0) = 3\n      P(1) = 0\n      P(2) = 2\n    and for n >= 3,\n      P(n) = P(n-2) + P(n-3)\n\n    This function calculates the sum P(0) + P(1) + ... + P(n).\n    \"\"\"\n    if n < 0:\n        return 0\n\n    # Perrin base values\n    perrin = [3, 0, 2]\n\n    # Calculate Perrin sequence up to n\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n\n    # Return the sum of the Perrin sequence terms up to n\n    return sum(perrin[:n+1])\n\n# Example:\n# print(cal_sum(5))  # Output: sum of P(0) to P(5)\n\n\n"], "responses": ["```python\ndef cal_sum(n: int) -> int:\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers up to the nth term (0-indexed).\n\n    Perrin sequence is defined as:\n      P(0) = 3\n      P(1) = 0\n      P(2) = 2\n    and for n >= 3,\n      P(n) = P(n-2) + P(n-3)\n\n    This function calculates the sum P(0) + P(1) + ... + P(n).\n    \"\"\"\n    if n < 0:\n        return 0\n\n    # Perrin base values\n    perrin = [3, 0, 2]\n\n    # Calculate Perrin sequence up to n\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n\n    # Return the sum of the Perrin sequence terms up to n\n    return sum(perrin[:n+1])\n\n# Example:\n# print(cal_sum(5))  # Output: sum of P(0) to P(5)\n```"], "prompt_tokens": [46], "completion_tokens": [249], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_448_cal_sum"}
{"name": "mbpp_96_divisor", "language": "Python3", "prompt": "def divisor(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the number of divisors of a given integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "divisor", "test": "def check(candidate):\n    assert candidate(15) == 4\n    assert candidate(12) == 6\n    assert candidate(9) == 3\n\ndef test_check():\n    check(divisor)\n\ntest_check()\n", "sample_io": ["assert divisor(15) == 4"], "source_codes": ["\ndef divisor(n: int) -> int:\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            # if divisors are equal, count only once\n            if i * i == n:\n                count += 1\n            else:\n                # count both i and n//i\n                count += 2\n        i += 1\n    return count\n\n\n"], "responses": ["```python\ndef divisor(n: int) -> int:\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            # if divisors are equal, count only once\n            if i * i == n:\n                count += 1\n            else:\n                # count both i and n//i\n                count += 2\n        i += 1\n    return count\n```"], "prompt_tokens": [48], "completion_tokens": [118], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_96_divisor"}
{"name": "mbpp_296_get_Inv_Count", "language": "Python3", "prompt": "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_Inv_Count", "test": "def check(candidate):\n    assert candidate([1, 20, 6, 4, 5]) == 5\n    assert candidate([1, 2, 1]) == 1\n    assert candidate([1, 2, 5, 6, 1]) == 3\n\ndef test_check():\n    check(get_Inv_Count)\n\ntest_check()\n", "sample_io": ["assert get_Inv_Count([1, 20, 6, 4, 5]) == 5"], "source_codes": ["\nfrom typing import List\n\ndef merge_sort(arr: List[int], temp: List[int], left: int, right: int) -> int:\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += merge_sort(arr, temp, left, mid)\n        inv_count += merge_sort(arr, temp, mid + 1, right)\n        inv_count += merge(arr, temp, left, mid, right)\n    return inv_count\n\ndef merge(arr: List[int], temp: List[int], left: int, mid: int, right: int) -> int:\n    i = left       # Starting index of left subarray\n    j = mid + 1    # Starting index of right subarray\n    k = left       # Starting index of temp array\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        else:\n            temp[k] = arr[j]\n            inv_count += (mid - i + 1)  # Count inversions\n            j += 1\n            k += 1\n\n    # Copy remaining elements of left subarray if any\n    while i <= mid:\n        temp[k] = arr[i]\n        i += 1\n        k += 1\n\n    # Copy remaining elements of right subarray if any\n    while j <= right:\n        temp[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Copy back to original array\n    for x in range(left, right + 1):\n        arr[x] = temp[x]\n\n    return inv_count\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to count inversions in an array.\n    An inversion is when arr[i] > arr[j] and i < j.\n    \"\"\"\n    temp = [0]*len(arr)\n    return merge_sort(arr, temp, 0, len(arr) - 1)\n\n# Example usage:\n# arr = [2, 4, 1, 3, 5]\n# print(get_Inv_Count(arr))  # Output: 3\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef merge_sort(arr: List[int], temp: List[int], left: int, right: int) -> int:\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += merge_sort(arr, temp, left, mid)\n        inv_count += merge_sort(arr, temp, mid + 1, right)\n        inv_count += merge(arr, temp, left, mid, right)\n    return inv_count\n\ndef merge(arr: List[int], temp: List[int], left: int, mid: int, right: int) -> int:\n    i = left       # Starting index of left subarray\n    j = mid + 1    # Starting index of right subarray\n    k = left       # Starting index of temp array\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        else:\n            temp[k] = arr[j]\n            inv_count += (mid - i + 1)  # Count inversions\n            j += 1\n            k += 1\n\n    # Copy remaining elements of left subarray if any\n    while i <= mid:\n        temp[k] = arr[i]\n        i += 1\n        k += 1\n\n    # Copy remaining elements of right subarray if any\n    while j <= right:\n        temp[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Copy back to original array\n    for x in range(left, right + 1):\n        arr[x] = temp[x]\n\n    return inv_count\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to count inversions in an array.\n    An inversion is when arr[i] > arr[j] and i < j.\n    \"\"\"\n    temp = [0]*len(arr)\n    return merge_sort(arr, temp, 0, len(arr) - 1)\n\n# Example usage:\n# arr = [2, 4, 1, 3, 5]\n# print(get_Inv_Count(arr))  # Output: 3\n```"], "prompt_tokens": [53], "completion_tokens": [484], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_296_get_Inv_Count"}
{"name": "mbpp_57_find_Max_Num", "language": "Python3", "prompt": "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the largest number that can be formed with the given list of digits.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Max_Num", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 321\n    assert candidate([4, 5, 6, 1]) == 6541\n    assert candidate([1, 2, 3, 9]) == 9321\n\ndef test_check():\n    check(find_Max_Num)\n\ntest_check()\n", "sample_io": ["assert find_Max_Num([1, 2, 3]) == 321"], "source_codes": ["\nfrom typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Convert all digits to strings\n    str_digits = list(map(str, arr))\n    # Sort digits in such a way that concatenation results in largest number\n    str_digits.sort(key=lambda x: x*10, reverse=True)  # multiply to ensure comparison by repetition\n    \n    # Join all digits\n    largest_num_str = ''.join(str_digits)\n    \n    # Convert to int to remove leading zeros if any, and return\n    return int(largest_num_str)\n\n# Example usage:\n# print(find_Max_Num([3, 30, 34, 5, 9]))  # Output: 9534330\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Convert all digits to strings\n    str_digits = list(map(str, arr))\n    # Sort digits in such a way that concatenation results in largest number\n    str_digits.sort(key=lambda x: x*10, reverse=True)  # multiply to ensure comparison by repetition\n    \n    # Join all digits\n    largest_num_str = ''.join(str_digits)\n    \n    # Convert to int to remove leading zeros if any, and return\n    return int(largest_num_str)\n\n# Example usage:\n# print(find_Max_Num([3, 30, 34, 5, 9]))  # Output: 9534330\n```\n"], "prompt_tokens": [60], "completion_tokens": [178], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_57_find_Max_Num"}
{"name": "mbpp_614_cummulative_sum", "language": "Python3", "prompt": "from typing import List\n\ndef cummulative_sum(test_list: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a function to find the cumulative sum of all the values that are present in the given list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_614_cummulative_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cummulative_sum", "test": "def check(candidate):\n    assert candidate([[1, 3], [5, 6, 7], [2, 6]]) == 30\n    assert candidate([[2, 4], [6, 7, 8], [3, 7]]) == 37\n    assert candidate([[3, 5], [7, 8, 9], [4, 8]]) == 44\n\ndef test_check():\n    check(cummulative_sum)\n\ntest_check()\n", "sample_io": ["assert cummulative_sum([[1, 3], [5, 6, 7], [2, 6]]) == 30"], "source_codes": ["\nfrom typing import List\n\ndef cumulative_sum(test_list: List[List[int]]) -> int:\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given list of lists.\n    \"\"\"\n    total = 0\n    for sublist in test_list:\n        total += sum(sublist)\n    return total\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_list = [[1, 2, 3], [4, 5], [6]]\n    print(cumulative_sum(test_list))  # Output: 21\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef cumulative_sum(test_list: List[List[int]]) -> int:\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given list of lists.\n    \"\"\"\n    total = 0\n    for sublist in test_list:\n        total += sum(sublist)\n    return total\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_list = [[1, 2, 3], [4, 5], [6]]\n    print(cumulative_sum(test_list))  # Output: 21\n```"], "prompt_tokens": [65], "completion_tokens": [123], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_614_cummulative_sum"}
{"name": "mbpp_623_nth_nums", "language": "Python3", "prompt": "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a function to compute the n-th power of each number in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "nth_nums", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10, 20, 30], 3) == [1000, 8000, 27000]\n    assert candidate([12, 15], 5) == [248832, 759375]\n\ndef test_check():\n    check(nth_nums)\n\ntest_check()\n", "sample_io": ["assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"], "source_codes": ["\nfrom typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    return [num ** n for num in nums]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    return [num ** n for num in nums]\n```"], "prompt_tokens": [60], "completion_tokens": [57], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_623_nth_nums"}
{"name": "mbpp_799_left_rotate", "language": "Python3", "prompt": "def left_rotate(n: int, d: int) -> int:\n    \"\"\"\n\tWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "left_rotate", "test": "def check(candidate):\n    assert candidate(16, 2) == 64\n    assert candidate(10, 2) == 40\n    assert candidate(99, 3) == 792\n    assert candidate(99, 3) == 792\n    assert candidate(1, 3) == 8\n    assert candidate(5, 3) == 40\n    assert candidate(29, 3) == 232\n\ndef test_check():\n    check(left_rotate)\n\ntest_check()\n", "sample_io": ["assert left_rotate(16, 2) == 64"], "source_codes": ["\ndef left_rotate(n: int, d: int) -> int:\n    \"\"\"\n    Rotate left bits of a 32-bit number n by d bits.\n    \n    Args:\n        n (int): The number to rotate (assumed to be 32-bit).\n        d (int): The number of bits to rotate left.\n        \n    Returns:\n        int: The result after left rotating n by d bits.\n    \"\"\"\n    d = d % 32  # Ensure rotation is within 0-31\n    # Left shift n by d bits and right shift n by (32 - d) bits, then combine \n    return ((n << d) & 0xFFFFFFFF) | (n >> (32 - d))\n\n\n"], "responses": ["```python\ndef left_rotate(n: int, d: int) -> int:\n    \"\"\"\n    Rotate left bits of a 32-bit number n by d bits.\n    \n    Args:\n        n (int): The number to rotate (assumed to be 32-bit).\n        d (int): The number of bits to rotate left.\n        \n    Returns:\n        int: The result after left rotating n by d bits.\n    \"\"\"\n    d = d % 32  # Ensure rotation is within 0-31\n    # Left shift n by d bits and right shift n by (32 - d) bits, then combine \n    return ((n << d) & 0xFFFFFFFF) | (n >> (32 - d))\n```"], "prompt_tokens": [62], "completion_tokens": [151], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_799_left_rotate"}
{"name": "mbpp_247_lps", "language": "Python3", "prompt": "def lps(str: str) -> int:\n    \"\"\"\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lps", "test": "def check(candidate):\n    assert candidate('TENS FOR TENS') == 5\n    assert candidate('CARDIO FOR CARDS') == 7\n    assert candidate('PART OF THE JOURNEY IS PART') == 9\n\ndef test_check():\n    check(lps)\n\ntest_check()\n", "sample_io": ["assert lps('TENS FOR TENS') == 5"], "source_codes": ["\ndef lps(s: str) -> int:\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    # dp[i][j] will hold the length of the longest palindromic subsequence in s[i..j]\n    dp = [[0] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the dp table\n    for length in range(2, n+1):  # substring lengths\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                if length == 2:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n\n\n"], "responses": ["```python\ndef lps(s: str) -> int:\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    # dp[i][j] will hold the length of the longest palindromic subsequence in s[i..j]\n    dp = [[0] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the dp table\n    for length in range(2, n+1):  # substring lengths\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                if length == 2:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n```"], "prompt_tokens": [54], "completion_tokens": [247], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_247_lps"}
{"name": "mbpp_735_toggle_middle_bits", "language": "Python3", "prompt": "def toggle_middle_bits(n: int) -> int:\n    \"\"\"\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "toggle_middle_bits", "test": "def check(candidate):\n    assert candidate(9) == 15\n    assert candidate(10) == 12\n    assert candidate(11) == 13\n    assert candidate(65) == 127\n    assert candidate(77) == 115\n\ndef test_check():\n    check(toggle_middle_bits)\n\ntest_check()\n", "sample_io": ["assert toggle_middle_bits(9) == 15"], "source_codes": ["\ndef toggle_middle_bits(n: int) -> int:\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    For example, if n = 44 (binary 101100), first bit (1) and last bit (0)\n    remain unchanged; middle bits toggled.\n    \n    Reference: https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # find the number of bits in n\n    num_bits = n.bit_length()\n    \n    # if number has less than or equal to 2 bits, nothing to toggle\n    if num_bits <= 2:\n        return n\n    \n    # first bit mask (most significant bit)\n    first_bit_mask = 1 << (num_bits - 1)\n    \n    # last bit mask (least significant bit)\n    last_bit_mask = 1\n    \n    # mask for all bits toggling\n    all_bits_mask = (1 << num_bits) - 1\n    \n    # mask with first and last bits set to 1, others to 0\n    first_last_mask = first_bit_mask | last_bit_mask\n    \n    # mask for middle bits = all bits - first and last bits\n    middle_bits_mask = all_bits_mask & ~first_last_mask\n    \n    # toggle only middle bits\n    toggled_middle = n ^ middle_bits_mask\n    \n    return toggled_middle\n\n\n"], "responses": ["```python\ndef toggle_middle_bits(n: int) -> int:\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    For example, if n = 44 (binary 101100), first bit (1) and last bit (0)\n    remain unchanged; middle bits toggled.\n    \n    Reference: https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # find the number of bits in n\n    num_bits = n.bit_length()\n    \n    # if number has less than or equal to 2 bits, nothing to toggle\n    if num_bits <= 2:\n        return n\n    \n    # first bit mask (most significant bit)\n    first_bit_mask = 1 << (num_bits - 1)\n    \n    # last bit mask (least significant bit)\n    last_bit_mask = 1\n    \n    # mask for all bits toggling\n    all_bits_mask = (1 << num_bits) - 1\n    \n    # mask with first and last bits set to 1, others to 0\n    first_last_mask = first_bit_mask | last_bit_mask\n    \n    # mask for middle bits = all bits - first and last bits\n    middle_bits_mask = all_bits_mask & ~first_last_mask\n    \n    # toggle only middle bits\n    toggled_middle = n ^ middle_bits_mask\n    \n    return toggled_middle\n```"], "prompt_tokens": [72], "completion_tokens": [293], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_735_toggle_middle_bits"}
{"name": "mbpp_132_tup_string", "language": "Python3", "prompt": "from typing import List\n\ndef tup_string(tup1: List[str]) -> str:\n    \"\"\"\n\tWrite a function to convert a list to a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_132_tup_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tup_string", "test": "def check(candidate):\n    assert candidate(['e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's']) == 'exercises'\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n']) == 'python'\n    assert candidate(['p', 'r', 'o', 'g', 'r', 'a', 'm']) == 'program'\n\ndef test_check():\n    check(tup_string)\n\ntest_check()\n", "sample_io": ["assert tup_string(['e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's']) == 'exercises'"], "source_codes": ["\nfrom typing import List\n\ndef tup_string(tup1: List[str]) -> str:\n    \"\"\"\n    Write a function to convert a list to a string.\n    \"\"\"\n    return ''.join(tup1)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef tup_string(tup1: List[str]) -> str:\n    \"\"\"\n    Write a function to convert a list to a string.\n    \"\"\"\n    return ''.join(tup1)\n```"], "prompt_tokens": [52], "completion_tokens": [46], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_132_tup_string"}
{"name": "mbpp_460_Extract", "language": "Python3", "prompt": "from typing import List\n\ndef Extract(lst: List[List[int]]) -> List[int]:\n    \"\"\"\n\tWrite a python function to get the first element of each sublist.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Extract", "test": "def check(candidate):\n    assert candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert candidate([[1, 2, 3], [4, 5]]) == [1, 4]\n    assert candidate([[9, 8, 1], [1, 2]]) == [9, 1]\n\ndef test_check():\n    check(Extract)\n\ntest_check()\n", "sample_io": ["assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]"], "source_codes": ["\nfrom typing import List\n\ndef Extract(lst: List[List[int]]) -> List[int]:\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lst if sublist]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Extract(lst: List[List[int]]) -> List[int]:\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lst if sublist]\n```"], "prompt_tokens": [53], "completion_tokens": [54], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_460_Extract"}
{"name": "mbpp_606_radian_degree", "language": "Python3", "prompt": "def radian_degree(degree: int) -> float:\n    \"\"\"\n\tWrite a function to convert degrees to radians.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "radian_degree", "test": "def check(candidate):\n    assert candidate(90) == 1.5707963267948966\n    assert candidate(60) == 1.0471975511965976\n    assert candidate(120) == 2.0943951023931953\n\ndef test_check():\n    check(radian_degree)\n\ntest_check()\n", "sample_io": ["assert radian_degree(90) == 1.5707963267948966"], "source_codes": ["\nimport math\n\ndef radian_degree(degree: int) -> float:\n    \"\"\"\n    Write a function to convert degrees to radians.\n    \"\"\"\n    return degree * (math.pi / 180)\n\n\n"], "responses": ["```python\nimport math\n\ndef radian_degree(degree: int) -> float:\n    \"\"\"\n    Write a function to convert degrees to radians.\n    \"\"\"\n    return degree * (math.pi / 180)\n```"], "prompt_tokens": [44], "completion_tokens": [44], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_606_radian_degree"}
{"name": "mbpp_167_next_power_of_2", "language": "Python3", "prompt": "def next_power_of_2(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the smallest power of 2 greater than or equal to n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "next_power_of_2", "test": "def check(candidate):\n    assert candidate(0) == 1\n    assert candidate(5) == 8\n    assert candidate(17) == 32\n\ndef test_check():\n    check(next_power_of_2)\n\ntest_check()\n", "sample_io": ["assert next_power_of_2(0) == 1"], "source_codes": ["\ndef next_power_of_2(n: int) -> int:\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 1:\n        return 1\n    power = 1\n    while power < n:\n        power <<= 1\n    return power\n\n\n"], "responses": ["```python\ndef next_power_of_2(n: int) -> int:\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 1:\n        return 1\n    power = 1\n    while power < n:\n        power <<= 1\n    return power\n```"], "prompt_tokens": [55], "completion_tokens": [75], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_167_next_power_of_2"}
{"name": "mbpp_756_text_match_zero_one", "language": "Python3", "prompt": "def text_match_zero_one(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_zero_one", "test": "def check(candidate):\n    assert candidate('ac') == False\n    assert candidate('dc') == False\n    assert candidate('abbbba') == True\n    assert candidate('dsabbbba') == True\n    assert candidate('asbbbba') == False\n    assert candidate('abaaa') == True\n\ndef test_check():\n    check(text_match_zero_one)\n\ntest_check()\n", "sample_io": ["assert text_match_zero_one('ac') == False"], "source_codes": ["\nimport re\n\ndef text_match_zero_one(text: str) -> bool:\n    \"\"\"\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    \"\"\"\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    return bool(match)\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_zero_one(text: str) -> bool:\n    \"\"\"\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    \"\"\"\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    return bool(match)\n```"], "prompt_tokens": [76], "completion_tokens": [68], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_756_text_match_zero_one"}
{"name": "mbpp_633_pair_xor_Sum", "language": "Python3", "prompt": "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pair_xor_Sum", "test": "def check(candidate):\n    assert candidate([5, 9, 7, 6], 4) == 47\n    assert candidate([7, 3, 5], 3) == 12\n    assert candidate([7, 3], 2) == 4\n\ndef test_check():\n    check(pair_xor_Sum)\n\ntest_check()\n", "sample_io": ["assert pair_xor_Sum([5, 9, 7, 6], 4) == 47"], "source_codes": ["\nfrom typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    result = 0\n    # Considering 32 bits for integers\n    for bit in range(32):\n        count_ones = 0\n        for num in arr:\n            if num & (1 << bit):\n                count_ones += 1\n        count_zeros = n - count_ones\n        # Each differing bit contributes 2^bit to the XOR\n        # Number of pairs with differing bits at this bit is count_ones * count_zeros\n        result += (1 << bit) * count_ones * count_zeros\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    result = 0\n    # Considering 32 bits for integers\n    for bit in range(32):\n        count_ones = 0\n        for num in arr:\n            if num & (1 << bit):\n                count_ones += 1\n        count_zeros = n - count_ones\n        # Each differing bit contributes 2^bit to the XOR\n        # Number of pairs with differing bits at this bit is count_ones * count_zeros\n        result += (1 << bit) * count_ones * count_zeros\n    return result\n```"], "prompt_tokens": [65], "completion_tokens": [168], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_633_pair_xor_Sum"}
{"name": "mbpp_458_rectangle_area", "language": "Python3", "prompt": "def rectangle_area(l: int, b: int) -> int:\n    \"\"\"\n\tWrite a function to find the area of a rectangle.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rectangle_area", "test": "def check(candidate):\n    assert candidate(10, 20) == 200\n    assert candidate(10, 5) == 50\n    assert candidate(4, 2) == 8\n\ndef test_check():\n    check(rectangle_area)\n\ntest_check()\n", "sample_io": ["assert rectangle_area(10, 20) == 200"], "source_codes": ["\ndef rectangle_area(l: int, b: int) -> int:\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b\n\n\n"], "responses": ["```python\ndef rectangle_area(l: int, b: int) -> int:\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b\n```"], "prompt_tokens": [48], "completion_tokens": [40], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_458_rectangle_area"}
{"name": "mbpp_738_geometric_sum", "language": "Python3", "prompt": "def geometric_sum(n: int) -> float:\n    \"\"\"\n\tWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "geometric_sum", "test": "def check(candidate):\n    assert candidate(7) == 1.9921875\n    assert candidate(4) == 1.9375\n    assert candidate(8) == 1.99609375\n\ndef test_check():\n    check(geometric_sum)\n\ntest_check()\n", "sample_io": ["assert geometric_sum(7) == 1.9921875"], "source_codes": ["\ndef geometric_sum(n: int) -> float:\n    \"\"\"\n    Calculate the geometric sum of the first n terms:\n    sum = 1/2^0 + 1/2^1 + 1/2^2 + ... + 1/2^(n-1)\n    \n    Parameters:\n    n (int): Number of terms to sum\n    \n    Returns:\n    float: Geometric sum\n    \"\"\"\n    if n == 0:\n        return 0.0\n    else:\n        return 1 / (2 ** (n - 1)) + geometric_sum(n - 1)\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5\n    print(f\"Geometric sum for n={n}: {geometric_sum(n)}\")\n\n\n"], "responses": ["```python\ndef geometric_sum(n: int) -> float:\n    \"\"\"\n    Calculate the geometric sum of the first n terms:\n    sum = 1/2^0 + 1/2^1 + 1/2^2 + ... + 1/2^(n-1)\n    \n    Parameters:\n    n (int): Number of terms to sum\n    \n    Returns:\n    float: Geometric sum\n    \"\"\"\n    if n == 0:\n        return 0.0\n    else:\n        return 1 / (2 ** (n - 1)) + geometric_sum(n - 1)\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5\n    print(f\"Geometric sum for n={n}: {geometric_sum(n)}\")\n```\n"], "prompt_tokens": [71], "completion_tokens": [166], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_738_geometric_sum"}
{"name": "mbpp_426_filter_oddnumbers", "language": "Python3", "prompt": "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to filter odd numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "filter_oddnumbers", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n    assert candidate([10, 20, 45, 67, 84, 93]) == [45, 67, 93]\n    assert candidate([5, 7, 9, 8, 6, 4, 3]) == [5, 7, 9, 3]\n\ndef test_check():\n    check(filter_oddnumbers)\n\ntest_check()\n", "sample_io": ["assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]"], "source_codes": ["\nfrom typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]\n```"], "prompt_tokens": [49], "completion_tokens": [52], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_426_filter_oddnumbers"}
{"name": "mbpp_437_remove_odd", "language": "Python3", "prompt": "def remove_odd(str1: str) -> str:\n    \"\"\"\n\tWrite a function to remove odd characters in a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_odd", "test": "def check(candidate):\n    assert candidate('python') == 'yhn'\n    assert candidate('program') == 'rga'\n    assert candidate('language') == 'agae'\n\ndef test_check():\n    check(remove_odd)\n\ntest_check()\n", "sample_io": ["assert remove_odd('python') == 'yhn'"], "source_codes": ["\ndef remove_odd(str1: str) -> str:\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Keep only characters at even indices (0-based indexing)\n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])\n\n\n"], "responses": ["```python\ndef remove_odd(str1: str) -> str:\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Keep only characters at even indices (0-based indexing)\n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])\n```"], "prompt_tokens": [45], "completion_tokens": [68], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_437_remove_odd"}
{"name": "mbpp_227_min_of_three", "language": "Python3", "prompt": "def min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n\tWrite a function to find minimum of three numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_of_three", "test": "def check(candidate):\n    assert candidate(10, 20, 0) == 0\n    assert candidate(19, 15, 18) == 15\n    assert candidate(-10, -20, -30) == -30\n\ndef test_check():\n    check(min_of_three)\n\ntest_check()\n", "sample_io": ["assert min_of_three(10, 20, 0) == 0"], "source_codes": ["\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    return min(a, b, c)\n\n\n"], "responses": ["```python\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    return min(a, b, c)\n```"], "prompt_tokens": [52], "completion_tokens": [47], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_227_min_of_three"}
{"name": "mbpp_172_count_occurance", "language": "Python3", "prompt": "def count_occurance(s: str) -> int:\n    \"\"\"\n\tWrite a function to count the number of occurence of the string 'std' in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_occurance", "test": "def check(candidate):\n    assert candidate('letstdlenstdporstd') == 3\n    assert candidate('truststdsolensporsd') == 1\n    assert candidate('makestdsostdworthit') == 2\n    assert candidate('stds') == 1\n    assert candidate('') == 0\n\ndef test_check():\n    check(count_occurance)\n\ntest_check()\n", "sample_io": ["assert count_occurance('letstdlenstdporstd') == 3"], "source_codes": ["\ndef count_occurance(s: str) -> int:\n    \"\"\"\n    Write a function to count the number of occurrence of the string 'std' in a given string.\n    \"\"\"\n    return s.count('std')\n\n\n"], "responses": ["```python\ndef count_occurance(s: str) -> int:\n    \"\"\"\n    Write a function to count the number of occurrence of the string 'std' in a given string.\n    \"\"\"\n    return s.count('std')\n```"], "prompt_tokens": [56], "completion_tokens": [48], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_172_count_occurance"}
{"name": "mbpp_434_text_match_one", "language": "Python3", "prompt": "def text_match_one(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an a followed by one or more b's.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_one", "test": "def check(candidate):\n    assert candidate('ac') == False\n    assert candidate('dc') == False\n    assert candidate('abba') == True\n\ndef test_check():\n    check(text_match_one)\n\ntest_check()\n", "sample_io": ["assert text_match_one('ac') == False"], "source_codes": ["\nimport re\n\ndef text_match_one(text: str) -> bool:\n    \"\"\"\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    \"\"\"\n    pattern = r\"ab+\"\n    if re.search(pattern, text):\n        return True\n    return False\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_one(text: str) -> bool:\n    \"\"\"\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    \"\"\"\n    pattern = r\"ab+\"\n    if re.search(pattern, text):\n        return True\n    return False\n```"], "prompt_tokens": [53], "completion_tokens": [69], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_434_text_match_one"}
{"name": "mbpp_291_count_no_of_ways", "language": "Python3", "prompt": "def count_no_of_ways(n: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_no_of_ways", "test": "def check(candidate):\n    assert candidate(2, 4) == 16\n    assert candidate(3, 2) == 6\n    assert candidate(4, 4) == 228\n\ndef test_check():\n    check(count_no_of_ways)\n\ntest_check()\n", "sample_io": ["assert count_no_of_ways(2, 4) == 16"], "source_codes": ["\ndef count_no_of_ways(n: int, k: int) -> int:\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that\n    at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n\n    # dp[i][0] -> number of ways to paint i posts with the last two posts having different colors\n    # dp[i][1] -> number of ways to paint i posts with the last two posts having the same color\n    dp = [[0, 0] for _ in range(n + 1)]\n\n    # Base cases\n    dp[1][0] = k  # Only one post, so no adjacent posts to compare, consider as different\n    dp[1][1] = 0  # Can't have two posts same color when there's only one post\n\n    for i in range(2, n + 1):\n        # For different color at post i:\n        # We can paint post i with a different color than post i-1 regardless of dp[i-1] states\n        dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) * (k - 1)\n\n        # For same color at post i:\n        # We can paint post i same as post i-1 only if last two posts were different colors\n        dp[i][1] = dp[i - 1][0] * 1  # same color as previous post\n\n    return dp[n][0] + dp[n][1]\n\n\n"], "responses": ["```python\ndef count_no_of_ways(n: int, k: int) -> int:\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that\n    at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n\n    # dp[i][0] -> number of ways to paint i posts with the last two posts having different colors\n    # dp[i][1] -> number of ways to paint i posts with the last two posts having the same color\n    dp = [[0, 0] for _ in range(n + 1)]\n\n    # Base cases\n    dp[1][0] = k  # Only one post, so no adjacent posts to compare, consider as different\n    dp[1][1] = 0  # Can't have two posts same color when there's only one post\n\n    for i in range(2, n + 1):\n        # For different color at post i:\n        # We can paint post i with a different color than post i-1 regardless of dp[i-1] states\n        dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) * (k - 1)\n\n        # For same color at post i:\n        # We can paint post i same as post i-1 only if last two posts were different colors\n        dp[i][1] = dp[i - 1][0] * 1  # same color as previous post\n\n    return dp[n][0] + dp[n][1]\n```"], "prompt_tokens": [77], "completion_tokens": [361], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_291_count_no_of_ways"}
{"name": "mbpp_471_find_remainder", "language": "Python3", "prompt": "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the product of the array multiplication modulo n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_remainder", "test": "def check(candidate):\n    assert candidate([100, 10, 5, 25, 35, 14], 11) == 9\n    assert candidate([1, 1, 1], 1) == 0\n    assert candidate([1, 2, 1], 2) == 0\n\ndef test_check():\n    check(find_remainder)\n\ntest_check()\n", "sample_io": ["assert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9"], "source_codes": ["\nfrom typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n```"], "prompt_tokens": [59], "completion_tokens": [72], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_471_find_remainder"}
{"name": "mbpp_808_check_K", "language": "Python3", "prompt": "from typing import List\n\ndef check_K(test_tup: List[int], K: int) -> bool:\n    \"\"\"\n\tWrite a function to check if the given tuples contain the k or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_K", "test": "def check(candidate):\n    assert candidate([10, 4, 5, 6, 8], 6) == True\n    assert candidate([1, 2, 3, 4, 5, 6], 7) == False\n    assert candidate([7, 8, 9, 44, 11, 12], 11) == True\n\ndef test_check():\n    check(check_K)\n\ntest_check()\n", "sample_io": ["assert check_K([10, 4, 5, 6, 8], 6) == True"], "source_codes": ["\nfrom typing import List\n\ndef check_K(test_tup: List[int], K: int) -> bool:\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    return K in test_tup\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_K(test_tup: List[int], K: int) -> bool:\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    return K in test_tup\n```"], "prompt_tokens": [60], "completion_tokens": [54], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_808_check_K"}
{"name": "mbpp_68_is_Monotonic", "language": "Python3", "prompt": "from typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Monotonic", "test": "def check(candidate):\n    assert candidate([6, 5, 4, 4]) == True\n    assert candidate([1, 2, 2, 3]) == True\n    assert candidate([1, 3, 2]) == False\n\ndef test_check():\n    check(is_Monotonic)\n\ntest_check()\n", "sample_io": ["assert is_Monotonic([6, 5, 4, 4]) == True"], "source_codes": ["\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    \"\"\"\n    Check whether the given array is monotonic or not.\n    An array is monotonic if it is either entirely non-increasing or non-decreasing.\n    \"\"\"\n    if not A:\n        return True  # An empty array can be considered monotonic\n\n    increasing = decreasing = True\n\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    \"\"\"\n    Check whether the given array is monotonic or not.\n    An array is monotonic if it is either entirely non-increasing or non-decreasing.\n    \"\"\"\n    if not A:\n        return True  # An empty array can be considered monotonic\n\n    increasing = decreasing = True\n\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n```"], "prompt_tokens": [58], "completion_tokens": [135], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_68_is_Monotonic"}
{"name": "mbpp_430_parabola_directrix", "language": "Python3", "prompt": "def parabola_directrix(a: int, b: int, c: int) -> int:\n    \"\"\"\n\tWrite a function to find the directrix of a parabola.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "parabola_directrix", "test": "def check(candidate):\n    assert candidate(5, 3, 2) == -198\n    assert candidate(9, 8, 4) == -2336\n    assert candidate(2, 4, 6) == -130\n\ndef test_check():\n    check(parabola_directrix)\n\ntest_check()\n", "sample_io": ["assert parabola_directrix(5, 3, 2) == -198"], "source_codes": ["\ndef parabola_directrix(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given a parabola in the form y = ax^2 + bx + c,\n    this function returns the y-coordinate of the directrix.\n\n    The vertex of the parabola y = ax^2 + bx + c is at:\n        x_v = -b/(2a)\n        y_v = a*(x_v)^2 + b*(x_v) + c\n\n    The focal length (distance from vertex to focus) is:\n        f = 1/(4a)\n\n    The directrix is a horizontal line given by:\n        y = y_v - f\n\n    Parameters:\n        a (int): coefficient of x^2\n        b (int): coefficient of x\n        c (int): constant term\n\n    Returns:\n        float: the y-coordinate of the directrix\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero for a parabola.\")\n\n    x_v = -b / (2 * a)\n    y_v = a * x_v**2 + b * x_v + c\n    focal_length = 1 / (4 * a)\n    directrix_y = y_v - focal_length\n    return directrix_y\n\n\n"], "responses": ["```python\ndef parabola_directrix(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given a parabola in the form y = ax^2 + bx + c,\n    this function returns the y-coordinate of the directrix.\n\n    The vertex of the parabola y = ax^2 + bx + c is at:\n        x_v = -b/(2a)\n        y_v = a*(x_v)^2 + b*(x_v) + c\n\n    The focal length (distance from vertex to focus) is:\n        f = 1/(4a)\n\n    The directrix is a horizontal line given by:\n        y = y_v - f\n\n    Parameters:\n        a (int): coefficient of x^2\n        b (int): coefficient of x\n        c (int): constant term\n\n    Returns:\n        float: the y-coordinate of the directrix\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero for a parabola.\")\n\n    x_v = -b / (2 * a)\n    y_v = a * x_v**2 + b * x_v + c\n    focal_length = 1 / (4 * a)\n    directrix_y = y_v - focal_length\n    return directrix_y\n```"], "prompt_tokens": [58], "completion_tokens": [279], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_430_parabola_directrix"}
{"name": "mbpp_618_div_list", "language": "Python3", "prompt": "from typing import List\n\ndef div_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    \"\"\"\n\tWrite a function to divide two lists element wise.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "div_list", "test": "def check(candidate):\n    assert candidate([4, 5, 6], [1, 2, 3]) == [4.0, 2.5, 2.0]\n    assert candidate([3, 2], [1, 4]) == [3.0, 0.5]\n    assert candidate([90, 120], [50, 70]) == [1.8, 1.7142857142857142]\n\ndef test_check():\n    check(div_list)\n\ntest_check()\n", "sample_io": ["assert div_list([4, 5, 6], [1, 2, 3]) == [4.0, 2.5, 2.0]"], "source_codes": ["\nfrom typing import List\n\ndef div_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    result = []\n    for a, b in zip(nums1, nums2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero encountered in the second list.\")\n        result.append(a / b)\n    \n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef div_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    result = []\n    for a, b in zip(nums1, nums2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero encountered in the second list.\")\n        result.append(a / b)\n    \n    return result\n```"], "prompt_tokens": [57], "completion_tokens": [118], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_618_div_list"}
{"name": "mbpp_421_concatenate_tuple", "language": "Python3", "prompt": "from typing import Tuple\n\ndef concatenate_tuple(test_tup: Tuple[str, str, int, str]) -> str:\n    \"\"\"\n\tWrite a function to concatenate each element of tuple by the delimiter.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "concatenate_tuple", "test": "def check(candidate):\n    assert candidate(('ID', 'is', 4, 'UTS')) == 'ID-is-4-UTS'\n    assert candidate(('QWE', 'is', 4, 'RTY')) == 'QWE-is-4-RTY'\n    assert candidate(('ZEN', 'is', 4, 'OP')) == 'ZEN-is-4-OP'\n\ndef test_check():\n    check(concatenate_tuple)\n\ntest_check()\n", "sample_io": ["assert concatenate_tuple(('ID', 'is', 4, 'UTS')) == 'ID-is-4-UTS'"], "source_codes": ["\nfrom typing import Tuple\n\ndef concatenate_tuple(test_tup: Tuple[str, str, int, str], delimiter: str = \"-\") -> str:\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Args:\n    test_tup (Tuple[str, str, int, str]): Input tuple containing three strings and one integer.\n    delimiter (str): Delimiter to concatenate the tuple elements.\n\n    Returns:\n    str: Concatenated string of all elements separated by delimiter.\n    \"\"\"\n    # Convert all elements to string and join by delimiter\n    return delimiter.join(map(str, test_tup))\n\n\n# Example usage:\ntest_tup = (\"apple\", \"banana\", 5, \"cherry\")\nprint(concatenate_tuple(test_tup, \",\"))  # Output: apple,banana,5,cherry\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef concatenate_tuple(test_tup: Tuple[str, str, int, str], delimiter: str = \"-\") -> str:\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Args:\n    test_tup (Tuple[str, str, int, str]): Input tuple containing three strings and one integer.\n    delimiter (str): Delimiter to concatenate the tuple elements.\n\n    Returns:\n    str: Concatenated string of all elements separated by delimiter.\n    \"\"\"\n    # Convert all elements to string and join by delimiter\n    return delimiter.join(map(str, test_tup))\n\n\n# Example usage:\ntest_tup = (\"apple\", \"banana\", 5, \"cherry\")\nprint(concatenate_tuple(test_tup, \",\"))  # Output: apple,banana,5,cherry\n```"], "prompt_tokens": [60], "completion_tokens": [174], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_421_concatenate_tuple"}
{"name": "mbpp_750_add_tuple", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef add_tuple(test_list: List[int], test_tup: Tuple[int, int]) -> List[int]:\n    \"\"\"\n\tWrite a function to add the given tuple to the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_tuple", "test": "def check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n    assert candidate([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\n    assert candidate([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]\n\ndef test_check():\n    check(add_tuple)\n\ntest_check()\n", "sample_io": ["assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef add_tuple(test_list: List[int], test_tup: Tuple[int, int]) -> List[int]:\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Convert the tuple to a list and extend the original list\n    test_list.extend(list(test_tup))\n    return test_list\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef add_tuple(test_list: List[int], test_tup: Tuple[int, int]) -> List[int]:\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Convert the tuple to a list and extend the original list\n    test_list.extend(list(test_tup))\n    return test_list\n```"], "prompt_tokens": [65], "completion_tokens": [79], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_750_add_tuple"}
{"name": "mbpp_304_find_Element", "language": "Python3", "prompt": "from typing import List\n\ndef find_Element(arr: List[int], ranges: List[List[int]], rotations: int, index: int) -> int:\n    \"\"\"\n\tWrite a python function to find element at a given index after number of rotations.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Element", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1) == 3\n    assert candidate([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2) == 3\n    assert candidate([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1) == 1\n\ndef test_check():\n    check(find_Element)\n\ntest_check()\n", "sample_io": ["assert find_Element([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1) == 3"], "source_codes": ["\nfrom typing import List\n\ndef find_Element(arr: List[int], ranges: List[List[int]], rotations: int, index: int) -> int:\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \n    :param arr: List[int] - initial array\n    :param ranges: List[List[int]] - list of [start, end] indices specifying sub-arrays to rotate\n    :param rotations: int - number of times to rotate each specified sub-array to the right\n    :param index: int - index of element to return after rotations\n    :return: int - element at the specified index after rotations\n    \"\"\"\n    # Make a copy to avoid mutating input\n    arr = arr[:]\n\n    for start, end in ranges:\n        # Extract the sub-array we want to rotate\n        sub_arr = arr[start:end+1]\n        length = len(sub_arr)\n        # Effective rotations to the right \n        effective_rotations = rotations % length\n        # Rotate sub-array to the right by effective_rotations\n        rotated_sub_arr = sub_arr[-effective_rotations:] + sub_arr[:-effective_rotations]\n        # Put the rotated sub-array back into the array\n        arr[start:end+1] = rotated_sub_arr\n        \n    return arr[index]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_Element(arr: List[int], ranges: List[List[int]], rotations: int, index: int) -> int:\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \n    :param arr: List[int] - initial array\n    :param ranges: List[List[int]] - list of [start, end] indices specifying sub-arrays to rotate\n    :param rotations: int - number of times to rotate each specified sub-array to the right\n    :param index: int - index of element to return after rotations\n    :return: int - element at the specified index after rotations\n    \"\"\"\n    # Make a copy to avoid mutating input\n    arr = arr[:]\n\n    for start, end in ranges:\n        # Extract the sub-array we want to rotate\n        sub_arr = arr[start:end+1]\n        length = len(sub_arr)\n        # Effective rotations to the right \n        effective_rotations = rotations % length\n        # Rotate sub-array to the right by effective_rotations\n        rotated_sub_arr = sub_arr[-effective_rotations:] + sub_arr[:-effective_rotations]\n        # Put the rotated sub-array back into the array\n        arr[start:end+1] = rotated_sub_arr\n        \n    return arr[index]\n```\n"], "prompt_tokens": [69], "completion_tokens": [274], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_304_find_Element"}
{"name": "mbpp_740_tuple_to_dict", "language": "Python3", "prompt": "from typing import Tuple, Dict\n\ndef tuple_to_dict(test_tup: Tuple[int, int, int, int, int, int]) -> Dict[int, int]:\n    \"\"\"\n\tWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tuple_to_dict", "test": "def check(candidate):\n    assert candidate((1, 5, 7, 10, 13, 5)) == { 1: 5, 7: 10, 13: 5 }\n    assert candidate((1, 2, 3, 4, 5, 6)) == { 1: 2, 3: 4, 5: 6 }\n    assert candidate((7, 8, 9, 10, 11, 12)) == { 7: 8, 9: 10, 11: 12 }\n\ndef test_check():\n    check(tuple_to_dict)\n\ntest_check()\n", "sample_io": ["assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == { 1: 5, 7: 10, 13: 5 }"], "source_codes": ["\nfrom typing import Tuple, Dict\n\ndef tuple_to_dict(test_tup: Tuple[int, int, int, int, int, int]) -> Dict[int, int]:\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    # Using dictionary comprehension and range with step 2\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n\n# Example usage\nif __name__ == \"__main__\":\n    test_tup = (1, 2, 3, 4, 5, 6)\n    print(tuple_to_dict(test_tup))  # Output: {1: 2, 3: 4, 5: 6}\n\n\n"], "responses": ["```python\nfrom typing import Tuple, Dict\n\ndef tuple_to_dict(test_tup: Tuple[int, int, int, int, int, int]) -> Dict[int, int]:\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    # Using dictionary comprehension and range with step 2\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n\n# Example usage\nif __name__ == \"__main__\":\n    test_tup = (1, 2, 3, 4, 5, 6)\n    print(tuple_to_dict(test_tup))  # Output: {1: 2, 3: 4, 5: 6}\n```"], "prompt_tokens": [96], "completion_tokens": [191], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_740_tuple_to_dict"}
{"name": "mbpp_627_find_First_Missing", "language": "Python3", "prompt": "from typing import List\n\ndef find_First_Missing(array: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_First_Missing", "test": "def check(candidate):\n    assert candidate([0, 1, 2, 3]) == 4\n    assert candidate([0, 1, 2, 6, 9]) == 3\n    assert candidate([2, 3, 5, 8, 9]) == 0\n\ndef test_check():\n    check(find_First_Missing)\n\ntest_check()\n", "sample_io": ["assert find_First_Missing([0, 1, 2, 3]) == 4"], "source_codes": ["\nfrom typing import List\n\ndef find_First_Missing(array: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # Assuming natural numbers start from 1\n    low, high = 0, len(array) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        # If the element at mid matches its expected value (mid + 1),\n        # the missing number must be on the right side\n        if array[mid] == mid + 1:\n            low = mid + 1\n        else:\n            # Missing number is on the left side or at mid\n            high = mid - 1\n\n    # After the loop, low is the index where the missing number should be\n    return low + 1  # small missing number\n    \n# Example usage:\n# print(find_First_Missing([1, 2, 3, 5, 6, 7]))  # Output: 4\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_First_Missing(array: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # Assuming natural numbers start from 1\n    low, high = 0, len(array) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        # If the element at mid matches its expected value (mid + 1),\n        # the missing number must be on the right side\n        if array[mid] == mid + 1:\n            low = mid + 1\n        else:\n            # Missing number is on the left side or at mid\n            high = mid - 1\n\n    # After the loop, low is the index where the missing number should be\n    return low + 1  # small missing number\n    \n# Example usage:\n# print(find_First_Missing([1, 2, 3, 5, 6, 7]))  # Output: 4\n```\n"], "prompt_tokens": [59], "completion_tokens": [225], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_627_find_First_Missing"}
{"name": "mbpp_294_max_val", "language": "Python3", "prompt": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_val", "test": "def check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n", "sample_io": ["assert max_val(['Python', 3, 2, 4, 5, 'version']) == 5"], "source_codes": ["\nfrom typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    The list contains integers and strings; strings should be converted to integers if possible.\n    \"\"\"\n    max_value = None\n    for item in listval:\n        # Convert strings to int if possible\n        if isinstance(item, str):\n            try:\n                value = int(item)\n            except ValueError:\n                continue  # skip non-integer strings\n        elif isinstance(item, int):\n            value = item\n        else:\n            continue  # skip items of other types if any\n        \n        if max_value is None or value > max_value:\n            max_value = value\n            \n    if max_value is None:\n        raise ValueError(\"No valid integer values found in the list.\")\n    return max_value\n\n\n# Example usage\nif __name__ == \"__main__\":\n    test_list = [1, \"20\", 15, \"3\", \"abc\", 7]\n    print(max_val(test_list))  # Output: 20\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    The list contains integers and strings; strings should be converted to integers if possible.\n    \"\"\"\n    max_value = None\n    for item in listval:\n        # Convert strings to int if possible\n        if isinstance(item, str):\n            try:\n                value = int(item)\n            except ValueError:\n                continue  # skip non-integer strings\n        elif isinstance(item, int):\n            value = item\n        else:\n            continue  # skip items of other types if any\n        \n        if max_value is None or value > max_value:\n            max_value = value\n            \n    if max_value is None:\n        raise ValueError(\"No valid integer values found in the list.\")\n    return max_value\n\n\n# Example usage\nif __name__ == \"__main__\":\n    test_list = [1, \"20\", 15, \"3\", \"abc\", 7]\n    print(max_val(test_list))  # Output: 20\n```"], "prompt_tokens": [60], "completion_tokens": [233], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_294_max_val"}
{"name": "mbpp_165_count_char_position", "language": "Python3", "prompt": "def count_char_position(str1: str) -> int:\n    \"\"\"\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_char_position", "test": "def check(candidate):\n    assert candidate('xbcefg') == 2\n    assert candidate('ABcED') == 3\n    assert candidate('AbgdeF') == 5\n\ndef test_check():\n    check(count_char_position)\n\ntest_check()\n", "sample_io": ["assert count_char_position('xbcefg') == 2"], "source_codes": ["\ndef count_char_position(str1: str) -> int:\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string\n    as in the English alphabet (case insensitive).\n    \"\"\"\n    count = 0\n    str1 = str1.lower()\n    for i, ch in enumerate(str1, start=1):\n        # check if character is a letter\n        if 'a' <= ch <= 'z':\n            # position of character in alphabet (a=1, b=2, ...)\n            char_pos = ord(ch) - ord('a') + 1\n            if i == char_pos:\n                count += 1\n    return count\n\n\n"], "responses": ["```python\ndef count_char_position(str1: str) -> int:\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string\n    as in the English alphabet (case insensitive).\n    \"\"\"\n    count = 0\n    str1 = str1.lower()\n    for i, ch in enumerate(str1, start=1):\n        # check if character is a letter\n        if 'a' <= ch <= 'z':\n            # position of character in alphabet (a=1, b=2, ...)\n            char_pos = ord(ch) - ord('a') + 1\n            if i == char_pos:\n                count += 1\n    return count\n```"], "prompt_tokens": [65], "completion_tokens": [151], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_165_count_char_position"}
{"name": "mbpp_589_perfect_squares", "language": "Python3", "prompt": "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find perfect squares between two given numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "perfect_squares", "test": "def check(candidate):\n    assert candidate(1, 30) == [1, 4, 9, 16, 25]\n    assert candidate(50, 100) == [64, 81, 100]\n    assert candidate(100, 200) == [100, 121, 144, 169, 196]\n\ndef test_check():\n    check(perfect_squares)\n\ntest_check()\n", "sample_io": ["assert perfect_squares(1, 30) == [1, 4, 9, 16, 25]"], "source_codes": ["\nfrom typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Ensure a is the smaller and b is the larger number\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    \n    result = [x*x for x in range(start, end+1)]\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Ensure a is the smaller and b is the larger number\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    \n    result = [x*x for x in range(start, end+1)]\n    return result\n```"], "prompt_tokens": [56], "completion_tokens": [98], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_589_perfect_squares"}
{"name": "mbpp_744_check_none", "language": "Python3", "prompt": "from typing import Any\n\ndef check_none(test_tup: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if the given tuple has any none value or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_744_check_none.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_none", "test": "def check(candidate):\n    assert candidate((10, 4, 5, 6, None)) == True\n    assert candidate((7, 8, 9, 11, 14)) == False\n    assert candidate((1, 2, 3, 4, None)) == True\n\ndef test_check():\n    check(check_none)\n\ntest_check()\n", "sample_io": ["assert check_none((10, 4, 5, 6, None)) == True"], "source_codes": ["\nfrom typing import Any\n\ndef check_none(test_tup: Any) -> bool:\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    if not isinstance(test_tup, tuple):\n        raise ValueError(\"Input must be a tuple\")\n    return any(element is None for element in test_tup)\n\n\n"], "responses": ["```python\nfrom typing import Any\n\ndef check_none(test_tup: Any) -> bool:\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    if not isinstance(test_tup, tuple):\n        raise ValueError(\"Input must be a tuple\")\n    return any(element is None for element in test_tup)\n```"], "prompt_tokens": [56], "completion_tokens": [75], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_744_check_none"}
{"name": "mbpp_726_multiply_elements", "language": "Python3", "prompt": "from typing import List, Any\n\ndef multiply_elements(test_tup: List[int]) -> List[Any]:\n    \"\"\"\n\tWrite a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_726_multiply_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "multiply_elements", "test": "def check(candidate):\n    assert candidate([1, 5, 7, 8, 10]) == [5, 35, 56, 80]\n    assert candidate([2, 4, 5, 6, 7]) == [8, 20, 30, 42]\n    assert candidate([12, 13, 14, 9, 15]) == [156, 182, 126, 135]\n    assert candidate([12]) == []\n\ndef test_check():\n    check(multiply_elements)\n\ntest_check()\n", "sample_io": ["assert multiply_elements([1, 5, 7, 8, 10]) == [5, 35, 56, 80]"], "source_codes": ["\nfrom typing import List, Any\n\ndef multiply_elements(test_tup: List[int]) -> List[Any]:\n    \"\"\"\n    Write a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N \n    where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    return [test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)]\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef multiply_elements(test_tup: List[int]) -> List[Any]:\n    \"\"\"\n    Write a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N \n    where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    return [test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)]\n```"], "prompt_tokens": [94], "completion_tokens": [112], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_726_multiply_elements"}
{"name": "mbpp_736_left_insertion", "language": "Python3", "prompt": "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "left_insertion", "test": "def check(candidate):\n    assert candidate([1, 2, 4, 5], 6) == 4\n    assert candidate([1, 2, 4, 5], 3) == 2\n    assert candidate([1, 2, 4, 5], 7) == 4\n\ndef test_check():\n    check(left_insertion)\n\ntest_check()\n", "sample_io": ["assert left_insertion([1, 2, 4, 5], 6) == 4"], "source_codes": ["\nfrom typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n    This function returns the index where `x` should be inserted to maintain sorted order,\n    inserting to the left of any existing entries of `x`.\n\n    Args:\n    a (List[int]): A sorted list of integers.\n    x (int): The value to insert.\n\n    Returns:\n    int: The left insertion point index.\n    \"\"\"\n    low, high = 0, len(a)\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [1, 2, 4, 4, 5]\n    x = 4\n    idx = left_insertion(arr, x)\n    print(f\"Left insertion point for {x} in {arr} is {idx}\")  # Output: 2\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n    This function returns the index where `x` should be inserted to maintain sorted order,\n    inserting to the left of any existing entries of `x`.\n\n    Args:\n    a (List[int]): A sorted list of integers.\n    x (int): The value to insert.\n\n    Returns:\n    int: The left insertion point index.\n    \"\"\"\n    low, high = 0, len(a)\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [1, 2, 4, 4, 5]\n    x = 4\n    idx = left_insertion(arr, x)\n    print(f\"Left insertion point for {x} in {arr} is {idx}\")  # Output: 2\n```\n"], "prompt_tokens": [87], "completion_tokens": [241], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_736_left_insertion"}
{"name": "mbpp_63_max_difference", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum difference between available pairs in the given tuple list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_difference", "test": "def check(candidate):\n    assert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n    assert candidate([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\n    assert candidate([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n\ndef test_check():\n    check(max_difference)\n\ntest_check()\n", "sample_io": ["assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    The difference between two pairs (a, b) and (c, d) is defined here as the absolute difference\n    between their sums (a+b) and (c+d).\n\n    Args:\n    test_list (List[Tuple[int, int]]): List of tuples with integer pairs.\n\n    Returns:\n    int: Maximum difference between sums of any two pairs.\n    \"\"\"\n    if not test_list or len(test_list) == 1:\n        # If the list is empty or has only one pair, difference is 0\n        return 0\n    \n    # Calculate the sum of each tuple\n    sums = [a + b for (a, b) in test_list]\n    \n    # Maximum difference is the difference between max and min sums\n    return max(sums) - min(sums)\n\n\n# Example usage:\n# pairs = [(1, 2), (4, 5), (1, 0), (7, 8)]\n# print(max_difference(pairs))  # Output: 14  (since max sum is 15 and min sum is 1)\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    The difference between two pairs (a, b) and (c, d) is defined here as the absolute difference\n    between their sums (a+b) and (c+d).\n\n    Args:\n    test_list (List[Tuple[int, int]]): List of tuples with integer pairs.\n\n    Returns:\n    int: Maximum difference between sums of any two pairs.\n    \"\"\"\n    if not test_list or len(test_list) == 1:\n        # If the list is empty or has only one pair, difference is 0\n        return 0\n    \n    # Calculate the sum of each tuple\n    sums = [a + b for (a, b) in test_list]\n    \n    # Maximum difference is the difference between max and min sums\n    return max(sums) - min(sums)\n\n\n# Example usage:\n# pairs = [(1, 2), (4, 5), (1, 0), (7, 8)]\n# print(max_difference(pairs))  # Output: 14  (since max sum is 15 and min sum is 1)\n```"], "prompt_tokens": [63], "completion_tokens": [271], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_63_max_difference"}
{"name": "mbpp_264_dog_age", "language": "Python3", "prompt": "def dog_age(h_age: int) -> int:\n    \"\"\"\n\tWrite a function to calculate a dog's age in dog's years.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_264_dog_age.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "dog_age", "test": "def check(candidate):\n    assert candidate(12) == 61\n    assert candidate(15) == 73\n    assert candidate(24) == 109\n\ndef test_check():\n    check(dog_age)\n\ntest_check()\n", "sample_io": ["assert dog_age(12) == 61"], "source_codes": ["\ndef dog_age(h_age: int) -> int:\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    Commonly, 1 human year is approximately equal to 7 dog years.\n    \"\"\"\n    return h_age * 7\n\n\n"], "responses": ["```python\ndef dog_age(h_age: int) -> int:\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    Commonly, 1 human year is approximately equal to 7 dog years.\n    \"\"\"\n    return h_age * 7\n```"], "prompt_tokens": [48], "completion_tokens": [59], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_264_dog_age"}
{"name": "mbpp_273_substract_elements", "language": "Python3", "prompt": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> Tuple[int, int, int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "substract_elements", "test": "def check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n", "sample_io": ["assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"], "source_codes": ["\nfrom typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> Tuple[int, int, int]:\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> Tuple[int, int, int]:\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n```"], "prompt_tokens": [93], "completion_tokens": [101], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_273_substract_elements"}
{"name": "mbpp_83_get_Char", "language": "Python3", "prompt": "def get_Char(strr: str) -> str:\n    \"\"\"\n\tWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_Char", "test": "def check(candidate):\n    assert candidate('abc') == 'f'\n    assert candidate('gfg') == 't'\n    assert candidate('ab') == 'c'\n\ndef test_check():\n    check(get_Char)\n\ntest_check()\n", "sample_io": ["assert get_Char('abc') == 'f'"], "source_codes": ["\ndef get_Char(strr: str) -> str:\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters \n    of the given string modulo 26.\n    \"\"\"\n    total_ascii = sum(ord(c) for c in strr)\n    # Map the result modulo 26 to a lowercase alphabet (a-z)\n    result_char = chr((total_ascii % 26) + ord('a'))\n    return result_char\n\n\n"], "responses": ["```python\ndef get_Char(strr: str) -> str:\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters \n    of the given string modulo 26.\n    \"\"\"\n    total_ascii = sum(ord(c) for c in strr)\n    # Map the result modulo 26 to a lowercase alphabet (a-z)\n    result_char = chr((total_ascii % 26) + ord('a'))\n    return result_char\n```"], "prompt_tokens": [60], "completion_tokens": [99], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_83_get_Char"}
{"name": "mbpp_91_find_substring", "language": "Python3", "prompt": "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    \"\"\"\n\tWrite a function to check if a string is present as a substring in a given list of string values.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_substring", "test": "def check(candidate):\n    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ack') == True\n    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'abc') == False\n    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ange') == True\n\ndef test_check():\n    check(find_substring)\n\ntest_check()\n", "sample_io": ["assert find_substring(['red', 'black', 'white', 'green', 'orange'], 'ack') == True"], "source_codes": ["\nfrom typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    strings = [\"hello\", \"world\", \"python\", \"programming\"]\n    substring = \"thon\"\n    print(find_substring(strings, substring))  # Output: True\n\n    substring = \"java\"\n    print(find_substring(strings, substring))  # Output: False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    strings = [\"hello\", \"world\", \"python\", \"programming\"]\n    substring = \"thon\"\n    print(find_substring(strings, substring))  # Output: True\n\n    substring = \"java\"\n    print(find_substring(strings, substring))  # Output: False\n```"], "prompt_tokens": [67], "completion_tokens": [144], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_91_find_substring"}
{"name": "mbpp_100_next_smallest_palindrome", "language": "Python3", "prompt": "def next_smallest_palindrome(num: int) -> int:\n    \"\"\"\n\tWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "next_smallest_palindrome", "test": "def check(candidate):\n    assert candidate(99) == 101\n    assert candidate(1221) == 1331\n    assert candidate(120) == 121\n\ndef test_check():\n    check(next_smallest_palindrome)\n\ntest_check()\n", "sample_io": ["assert next_smallest_palindrome(99) == 101"], "source_codes": ["\ndef next_smallest_palindrome(num: int) -> int:\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    The next smallest palindrome here means the smallest palindrome number strictly greater than the input number.\n    \"\"\"\n    def is_palindrome(x: int) -> bool:\n        s = str(x)\n        return s == s[::-1]\n\n    def increment_middle(s: list) -> list:\n        n = len(s)\n        mid = n // 2\n        left_smaller = False\n\n        i = mid - 1\n        j = mid + 1 if n % 2 else mid\n\n        # Initially, ignore the right side, copy left to right\n        while i >= 0 and s[i] == s[j]:\n            i -= 1\n            j += 1\n        \n        if i < 0 or s[i] < s[j]:\n            left_smaller = True\n\n        # Mirror left to right\n        i = mid - 1\n        j = mid + 1 if n % 2 else mid\n        while i >= 0:\n            s[j] = s[i]\n            i -= 1\n            j += 1\n\n        # If left side is smaller, need to increment the middle\n        if left_smaller:\n            carry = 1\n            i = mid - 1\n\n            # If length is odd, increment the middle digit\n            if n % 2 == 1:\n                val = int(s[mid]) + carry\n                carry = val // 10\n                s[mid] = str(val % 10)\n                j = mid + 1\n            else:\n                j = mid\n            \n            # Propagate carry to the left side and mirror to right side\n            while i >= 0 and carry > 0:\n                val = int(s[i]) + carry\n                carry = val // 10\n                s[i] = str(val % 10)\n                s[j] = s[i]\n                i -= 1\n                j += 1\n\n            # If carry is still left, we need to add one digit to the front and back\n            if carry > 0:\n                s.insert(0, '1')\n                s.append('1')\n\n        return s\n\n    # If num is single digit and less than 9, just return the next digit\n    if num < 9:\n        return num + 1\n\n    s = list(str(num + 1))  # start searching from the next number\n\n    # If all 9s, next palindrome is 10...01\n    if all(ch == '9' for ch in s):\n        return int('1' + ('0' * (len(s)-1)) + '1')\n\n    s = increment_middle(s)\n    return int(''.join(s))\n\n\n"], "responses": ["```python\ndef next_smallest_palindrome(num: int) -> int:\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    The next smallest palindrome here means the smallest palindrome number strictly greater than the input number.\n    \"\"\"\n    def is_palindrome(x: int) -> bool:\n        s = str(x)\n        return s == s[::-1]\n\n    def increment_middle(s: list) -> list:\n        n = len(s)\n        mid = n // 2\n        left_smaller = False\n\n        i = mid - 1\n        j = mid + 1 if n % 2 else mid\n\n        # Initially, ignore the right side, copy left to right\n        while i >= 0 and s[i] == s[j]:\n            i -= 1\n            j += 1\n        \n        if i < 0 or s[i] < s[j]:\n            left_smaller = True\n\n        # Mirror left to right\n        i = mid - 1\n        j = mid + 1 if n % 2 else mid\n        while i >= 0:\n            s[j] = s[i]\n            i -= 1\n            j += 1\n\n        # If left side is smaller, need to increment the middle\n        if left_smaller:\n            carry = 1\n            i = mid - 1\n\n            # If length is odd, increment the middle digit\n            if n % 2 == 1:\n                val = int(s[mid]) + carry\n                carry = val // 10\n                s[mid] = str(val % 10)\n                j = mid + 1\n            else:\n                j = mid\n            \n            # Propagate carry to the left side and mirror to right side\n            while i >= 0 and carry > 0:\n                val = int(s[i]) + carry\n                carry = val // 10\n                s[i] = str(val % 10)\n                s[j] = s[i]\n                i -= 1\n                j += 1\n\n            # If carry is still left, we need to add one digit to the front and back\n            if carry > 0:\n                s.insert(0, '1')\n                s.append('1')\n\n        return s\n\n    # If num is single digit and less than 9, just return the next digit\n    if num < 9:\n        return num + 1\n\n    s = list(str(num + 1))  # start searching from the next number\n\n    # If all 9s, next palindrome is 10...01\n    if all(ch == '9' for ch in s):\n        return int('1' + ('0' * (len(s)-1)) + '1')\n\n    s = increment_middle(s)\n    return int(''.join(s))\n```"], "prompt_tokens": [55], "completion_tokens": [598], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_100_next_smallest_palindrome"}
{"name": "mbpp_282_sub_list", "language": "Python3", "prompt": "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to subtract two lists element-wise.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sub_list", "test": "def check(candidate):\n    assert candidate([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]\n    assert candidate([1, 2], [3, 4]) == [-2, -2]\n    assert candidate([90, 120], [50, 70]) == [40, 50]\n\ndef test_check():\n    check(sub_list)\n\ntest_check()\n", "sample_io": ["assert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]"], "source_codes": ["\nfrom typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    # Assuming both lists have the same length\n    return [a - b for a, b in zip(nums1, nums2)]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    # Assuming both lists have the same length\n    return [a - b for a, b in zip(nums1, nums2)]\n```"], "prompt_tokens": [57], "completion_tokens": [71], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_282_sub_list"}
{"name": "mbpp_790_even_position", "language": "Python3", "prompt": "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "even_position", "test": "def check(candidate):\n    assert candidate([3, 2, 1]) == False\n    assert candidate([1, 2, 3]) == False\n    assert candidate([2, 1, 4]) == True\n\ndef test_check():\n    check(even_position)\n\ntest_check()\n", "sample_io": ["assert even_position([3, 2, 1]) == False"], "source_codes": ["\nfrom typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n```"], "prompt_tokens": [57], "completion_tokens": [72], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_790_even_position"}
{"name": "mbpp_411_snake_to_camel", "language": "Python3", "prompt": "def snake_to_camel(word: str) -> str:\n    \"\"\"\n\tWrite a function to convert the given snake case string to camel case string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "snake_to_camel", "test": "def check(candidate):\n    assert candidate('android_tv') == 'AndroidTv'\n    assert candidate('google_pixel') == 'GooglePixel'\n    assert candidate('apple_watch') == 'AppleWatch'\n\ndef test_check():\n    check(snake_to_camel)\n\ntest_check()\n", "sample_io": ["assert snake_to_camel('android_tv') == 'AndroidTv'"], "source_codes": ["\ndef snake_to_camel(word: str) -> str:\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    components = word.split('_')\n    # Capitalize the first letter of each component except the first one\n    # and join them together\n    return components[0] + ''.join(x.title() for x in components[1:])\n\n\n"], "responses": ["```python\ndef snake_to_camel(word: str) -> str:\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    components = word.split('_')\n    # Capitalize the first letter of each component except the first one\n    # and join them together\n    return components[0] + ''.join(x.title() for x in components[1:])\n```"], "prompt_tokens": [50], "completion_tokens": [84], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_411_snake_to_camel"}
{"name": "mbpp_754_extract_index_list", "language": "Python3", "prompt": "from typing import List, Any\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[Any]:\n    \"\"\"\n\tWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_index_list", "test": "def check(candidate):\n    assert candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7]\n    assert candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]) == [1, 6]\n    assert candidate([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 5]\n    assert candidate([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == []\n\ndef test_check():\n    check(extract_index_list)\n\ntest_check()\n", "sample_io": ["assert extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7]"], "source_codes": ["\nfrom typing import List, Any\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[Any]:\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Find the minimum length to avoid index errors\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Collect elements that are same at the same index from all three lists\n    common_elements = []\n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[Any]:\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Find the minimum length to avoid index errors\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Collect elements that are same at the same index from all three lists\n    common_elements = []\n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n```"], "prompt_tokens": [104], "completion_tokens": [178], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_754_extract_index_list"}
{"name": "mbpp_56_checks", "language": "Python3", "prompt": "def checks(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check if a given number is one less than twice its reverse.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "checks", "test": "def check(candidate):\n    assert candidate(70) == False\n    assert candidate(23) == False\n    assert candidate(73) == True\n\ndef test_check():\n    check(checks)\n\ntest_check()\n", "sample_io": ["assert checks(70) == False"], "source_codes": ["\ndef checks(n: int) -> bool:\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the number to string to reverse it\n    rev_str = str(n)[::-1]\n    rev_num = int(rev_str)\n    \n    # Check if n is one less than twice its reverse\n    return n == 2 * rev_num - 1\n\n\n"], "responses": ["```python\ndef checks(n: int) -> bool:\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the number to string to reverse it\n    rev_str = str(n)[::-1]\n    rev_num = int(rev_str)\n    \n    # Check if n is one less than twice its reverse\n    return n == 2 * rev_num - 1\n```"], "prompt_tokens": [50], "completion_tokens": [93], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_56_checks"}
{"name": "mbpp_724_power_base_sum", "language": "Python3", "prompt": "def power_base_sum(base: int, power: int) -> int:\n    \"\"\"\n\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "power_base_sum", "test": "def check(candidate):\n    assert candidate(2, 100) == 115\n    assert candidate(8, 10) == 37\n    assert candidate(8, 15) == 62\n    assert candidate(3, 3) == 9\n\ndef test_check():\n    check(power_base_sum)\n\ntest_check()\n", "sample_io": ["assert power_base_sum(2, 100) == 115"], "source_codes": ["\ndef power_base_sum(base: int, power: int) -> int:\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    result = base ** power\n    return sum(int(digit) for digit in str(result))\n\n\n"], "responses": ["```python\ndef power_base_sum(base: int, power: int) -> int:\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    result = base ** power\n    return sum(int(digit) for digit in str(result))\n```"], "prompt_tokens": [63], "completion_tokens": [69], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_724_power_base_sum"}
{"name": "mbpp_268_find_star_num", "language": "Python3", "prompt": "def find_star_num(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the n'th star number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_star_num", "test": "def check(candidate):\n    assert candidate(3) == 37\n    assert candidate(4) == 73\n    assert candidate(5) == 121\n\ndef test_check():\n    check(find_star_num)\n\ntest_check()\n", "sample_io": ["assert find_star_num(3) == 37"], "source_codes": ["\ndef find_star_num(n: int) -> int:\n    \"\"\"\n    Write a function to find the n'th star number.\n\n    A star number is a centered figurate number that represents a centered hexagram (six-pointed star),\n    such as the Star of David. The formula for the nth star number is:\n    \n    S_n = 6n(n-1) + 1\n    \n    Parameters:\n    n (int): the term of the star number sequence to find\n    \n    Returns:\n    int: the nth star number\n    \"\"\"\n    return 6 * n * (n - 1) + 1\n\n\n"], "responses": ["```python\ndef find_star_num(n: int) -> int:\n    \"\"\"\n    Write a function to find the n'th star number.\n\n    A star number is a centered figurate number that represents a centered hexagram (six-pointed star),\n    such as the Star of David. The formula for the nth star number is:\n    \n    S_n = 6n(n-1) + 1\n    \n    Parameters:\n    n (int): the term of the star number sequence to find\n    \n    Returns:\n    int: the nth star number\n    \"\"\"\n    return 6 * n * (n - 1) + 1\n```"], "prompt_tokens": [46], "completion_tokens": [133], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_268_find_star_num"}
{"name": "mbpp_251_insert_element", "language": "Python3", "prompt": "from typing import List\n\ndef insert_element(list: List[str], element: str) -> List[str]:\n    \"\"\"\n\tWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "insert_element", "test": "def check(candidate):\n    assert candidate(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']\n    assert candidate(['python', 'java'], 'program') == ['program', 'python', 'program', 'java']\n    assert candidate(['happy', 'sad'], 'laugh') == ['laugh', 'happy', 'laugh', 'sad']\n\ndef test_check():\n    check(insert_element)\n\ntest_check()\n", "sample_io": ["assert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']"], "source_codes": ["\nfrom typing import List\n\ndef insert_element(lst: List[str], element: str) -> List[str]:\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, \n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef insert_element(lst: List[str], element: str) -> List[str]:\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, \n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n```"], "prompt_tokens": [72], "completion_tokens": [84], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_251_insert_element"}
{"name": "mbpp_428_shell_sort", "language": "Python3", "prompt": "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort the given array by using shell sort.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "shell_sort", "test": "def check(candidate):\n    assert candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    assert candidate([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\n    assert candidate([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n\ndef test_check():\n    check(shell_sort)\n\ntest_check()\n", "sample_io": ["assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"], "source_codes": ["\nfrom typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            # Sort the sub list for this gap\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            # Sort the sub list for this gap\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n```"], "prompt_tokens": [54], "completion_tokens": [145], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_428_shell_sort"}
{"name": "mbpp_476_big_sum", "language": "Python3", "prompt": "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of the largest and smallest value in a given array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "big_sum", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 4\n    assert candidate([-1, 2, 3, 4]) == 3\n    assert candidate([2, 3, 6]) == 8\n\ndef test_check():\n    check(big_sum)\n\ntest_check()\n", "sample_io": ["assert big_sum([1, 2, 3]) == 4"], "source_codes": ["\nfrom typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if not nums:\n        raise ValueError(\"The input list is empty\")\n    \n    smallest = min(nums)\n    largest = max(nums)\n    \n    return smallest + largest\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if not nums:\n        raise ValueError(\"The input list is empty\")\n    \n    smallest = min(nums)\n    largest = max(nums)\n    \n    return smallest + largest\n```"], "prompt_tokens": [58], "completion_tokens": [79], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_476_big_sum"}
{"name": "mbpp_465_drop_empty", "language": "Python3", "prompt": "from typing import Dict, Optional\n\ndef drop_empty(dict1: Dict[str, Optional[str]]) -> Dict[str, str]:\n    \"\"\"\n\tWrite a function to drop empty items from a given dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "drop_empty", "test": "def check(candidate):\n    assert candidate({ 'c1': 'Red', 'c2': 'Green', 'c3': None }) == { 'c1': 'Red', 'c2': 'Green' }\n    assert candidate({ 'c1': 'Red', 'c2': None, 'c3': None }) == { 'c1': 'Red' }\n    assert candidate({ 'c1': None, 'c2': 'Green', 'c3': None }) == { 'c2': 'Green' }\n\ndef test_check():\n    check(drop_empty)\n\ntest_check()\n", "sample_io": ["assert drop_empty({ 'c1': 'Red', 'c2': 'Green', 'c3': None }) == { 'c1': 'Red', 'c2': 'Green' }"], "source_codes": ["\nfrom typing import Dict, Optional\n\ndef drop_empty(dict1: Dict[str, Optional[str]]) -> Dict[str, str]:\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    Empty items are those with value None or empty string ''.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v not in (None, '')}\n\n\n"], "responses": ["```python\nfrom typing import Dict, Optional\n\ndef drop_empty(dict1: Dict[str, Optional[str]]) -> Dict[str, str]:\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    Empty items are those with value None or empty string ''.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v not in (None, '')}\n```"], "prompt_tokens": [60], "completion_tokens": [83], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_465_drop_empty"}
{"name": "mbpp_454_text_match_wordz", "language": "Python3", "prompt": "def text_match_wordz(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a word containing 'z'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_wordz", "test": "def check(candidate):\n    assert candidate('pythonz.') == True\n    assert candidate('xyz.') == True\n    assert candidate('  lang  .') == False\n\ndef test_check():\n    check(text_match_wordz)\n\ntest_check()\n", "sample_io": ["assert text_match_wordz('pythonz.') == True"], "source_codes": ["\nimport re\n\ndef text_match_wordz(text: str) -> bool:\n    \"\"\"\n    Write a function that matches a word containing 'z'.\n    \"\"\"\n    # Use regex to find words containing 'z' or 'Z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text, re.IGNORECASE))\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_wordz(text: str) -> bool:\n    \"\"\"\n    Write a function that matches a word containing 'z'.\n    \"\"\"\n    # Use regex to find words containing 'z' or 'Z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text, re.IGNORECASE))\n```"], "prompt_tokens": [46], "completion_tokens": [77], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_454_text_match_wordz"}
{"name": "mbpp_605_prime_num", "language": "Python3", "prompt": "def prime_num(num: int) -> bool:\n    \"\"\"\n\tWrite a function to check if the given integer is a prime number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "prime_num", "test": "def check(candidate):\n    assert candidate(13) == True\n    assert candidate(7) == True\n    assert candidate(-1010) == False\n\ndef test_check():\n    check(prime_num)\n\ntest_check()\n", "sample_io": ["assert prime_num(13) == True"], "source_codes": ["\ndef prime_num(num: int) -> bool:\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    \n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\n"], "responses": ["```python\ndef prime_num(num: int) -> bool:\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    \n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```"], "prompt_tokens": [47], "completion_tokens": [126], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_605_prime_num"}
{"name": "mbpp_108_merge_sorted_list", "language": "Python3", "prompt": "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to merge three lists into a single sorted list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "merge_sorted_list", "test": "def check(candidate):\n    assert candidate([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]) == [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41]) == [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n\ndef test_check():\n    check(merge_sorted_list)\n\ntest_check()\n", "sample_io": ["assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"], "source_codes": ["\nfrom typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge all three lists into one\n    merged_list = num1 + num2 + num3\n    # Sort the merged list\n    merged_list.sort()\n    return merged_list\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge all three lists into one\n    merged_list = num1 + num2 + num3\n    # Sort the merged list\n    merged_list.sort()\n    return merged_list\n```"], "prompt_tokens": [67], "completion_tokens": [92], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_108_merge_sorted_list"}
{"name": "mbpp_639_sample_nam", "language": "Python3", "prompt": "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    \"\"\"\n\tWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sample_nam", "test": "def check(candidate):\n    assert candidate(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16\n    assert candidate(['php', 'res', 'Python', 'abcd', 'Java', 'aaa']) == 10\n    assert candidate(['abcd', 'Python', 'abba', 'aba']) == 6\n\ndef test_check():\n    check(sample_nam)\n\ntest_check()\n", "sample_io": ["assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16"], "source_codes": ["\nfrom typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names \n    after removing the names that start with a lowercase letter.\n    \"\"\"\n    filtered_names = [name for name in sample_names if name and not name[0].islower()]\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names \n    after removing the names that start with a lowercase letter.\n    \"\"\"\n    filtered_names = [name for name in sample_names if name and not name[0].islower()]\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length\n```"], "prompt_tokens": [68], "completion_tokens": [97], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_639_sample_nam"}
{"name": "mbpp_409_min_product_tuple", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the minimum product from the pairs of tuples within a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_product_tuple", "test": "def check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8\n    assert candidate([(10, 20), (15, 2), (5, 10)]) == 30\n    assert candidate([(11, 44), (10, 15), (20, 5), (12, 9)]) == 100\n\ndef test_check():\n    check(min_product_tuple)\n\ntest_check()\n", "sample_io": ["assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    The product here is defined as the multiplication of both elements in each tuple.\n    The function returns the minimum product found among all tuples in the list.\n    \"\"\"\n    if not list1:\n        raise ValueError(\"Input list is empty\")\n    \n    min_product = float('inf')\n    for a, b in list1:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    \n    return min_product\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    The product here is defined as the multiplication of both elements in each tuple.\n    The function returns the minimum product found among all tuples in the list.\n    \"\"\"\n    if not list1:\n        raise ValueError(\"Input list is empty\")\n    \n    min_product = float('inf')\n    for a, b in list1:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    \n    return min_product\n```"], "prompt_tokens": [65], "completion_tokens": [140], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_409_min_product_tuple"}
{"name": "mbpp_791_remove_nested", "language": "Python3", "prompt": "from typing import Any, Tuple\n\ndef remove_nested(test_tup: Any) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to remove tuples from the given tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_791_remove_nested.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_nested", "test": "def check(candidate):\n    assert candidate((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n    assert candidate((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\n    assert candidate((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\n    assert candidate((3, 7, 9, (6, 8), (5, 12), 12)) == (3, 7, 9, 12)\n\ndef test_check():\n    check(remove_nested)\n\ntest_check()\n", "sample_io": ["assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)"], "source_codes": ["\nfrom typing import Any, Tuple\n\ndef remove_nested(test_tup: Any) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    The returned tuple will only contain elements that are not tuples.\n    \"\"\"\n    # Using a tuple comprehension to filter out elements that are tuples\n    result = tuple(x for x in test_tup if not isinstance(x, tuple))\n    return result\n\n\n"], "responses": ["```python\nfrom typing import Any, Tuple\n\ndef remove_nested(test_tup: Any) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    The returned tuple will only contain elements that are not tuples.\n    \"\"\"\n    # Using a tuple comprehension to filter out elements that are tuples\n    result = tuple(x for x in test_tup if not isinstance(x, tuple))\n    return result\n```"], "prompt_tokens": [60], "completion_tokens": [95], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_791_remove_nested"}
{"name": "mbpp_591_swap_List", "language": "Python3", "prompt": "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to interchange the first and last elements in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "swap_List", "test": "def check(candidate):\n    assert candidate([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n    assert candidate([1, 2, 3]) == [3, 2, 1]\n    assert candidate([4, 5, 6]) == [6, 5, 4]\n\ndef test_check():\n    check(swap_List)\n\ntest_check()\n", "sample_io": ["assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]"], "source_codes": ["\nfrom typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) < 2:\n        return newList  # No swap needed if list has less than 2 elements\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) < 2:\n        return newList  # No swap needed if list has less than 2 elements\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n```"], "prompt_tokens": [56], "completion_tokens": [91], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_591_swap_List"}
{"name": "mbpp_419_round_and_sum", "language": "Python3", "prompt": "from typing import List, Union\n\ndef round_and_sum(list1: List[Union[float, int]]) -> int:\n    \"\"\"\n\tWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_419_round_and_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "round_and_sum", "test": "def check(candidate):\n    assert candidate([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]) == 243\n    assert candidate([5, 2, 9, 24.3, 29]) == 345\n    assert candidate([25.0, 56.7, 89.2]) == 513\n\ndef test_check():\n    check(round_and_sum)\n\ntest_check()\n", "sample_io": ["assert round_and_sum([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]) == 243"], "source_codes": ["\nfrom typing import List, Union\n\ndef round_and_sum(list1: List[Union[float, int]]) -> int:\n    \"\"\"\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    \"\"\"\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(list1)\n    print(result)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef round_and_sum(list1: List[Union[float, int]]) -> int:\n    \"\"\"\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    \"\"\"\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(list1)\n    print(result)\n    return result\n```"], "prompt_tokens": [73], "completion_tokens": [100], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_419_round_and_sum"}
{"name": "mbpp_84_sequence", "language": "Python3", "prompt": "def sequence(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth number in the newman conway sequence.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_84_sequence.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sequence", "test": "def check(candidate):\n    assert candidate(10) == 6\n    assert candidate(2) == 1\n    assert candidate(3) == 2\n\ndef test_check():\n    check(sequence)\n\ntest_check()\n", "sample_io": ["assert sequence(10) == 6"], "source_codes": ["\ndef sequence(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth number in the Newman-Conway sequence.\n    The Newman-Conway sequence is defined as:\n        a(1) = 1\n        a(2) = 1\n        for n > 2: a(n) = a(a(n-1)) + a(n - a(n-1))\n\n    Args:\n        n (int): The position in the sequence.\n\n    Returns:\n        int: The nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    # Use a list to store sequence values to avoid recomputation\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = 1, 1\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]\n\n\n"], "responses": ["```python\ndef sequence(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth number in the Newman-Conway sequence.\n    The Newman-Conway sequence is defined as:\n        a(1) = 1\n        a(2) = 1\n        for n > 2: a(n) = a(a(n-1)) + a(n - a(n-1))\n\n    Args:\n        n (int): The position in the sequence.\n\n    Returns:\n        int: The nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    # Use a list to store sequence values to avoid recomputation\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = 1, 1\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]\n```"], "prompt_tokens": [48], "completion_tokens": [218], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_84_sequence"}
{"name": "mbpp_260_newman_prime", "language": "Python3", "prompt": "def newman_prime(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "newman_prime", "test": "def check(candidate):\n    assert candidate(3) == 7\n    assert candidate(4) == 17\n    assert candidate(5) == 41\n\ndef test_check():\n    check(newman_prime)\n\ntest_check()\n", "sample_io": ["assert newman_prime(3) == 7"], "source_codes": ["\ndef is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_shanks_williams_sequence(limit: int) -> list:\n    \"\"\"\n    Generate Newman-Shanks-Williams (NSW) numbers up to at least `limit` count.\n    NSW numbers are defined by the recurrence:\n      a(0) = 1\n      a(1) = 1\n      a(n) = 2 * a(n-1) + a(n-2), for n >= 2\n    \"\"\"\n    a = [1, 1]\n    while len(a) < limit * 20:  # overestimate limit to ensure enough NSW numbers for primes\n        a.append(2 * a[-1] + a[-2])\n    return a\n\ndef newman_prime(n: int) -> int:\n    \"\"\"\n    Find the nth Newman\u2013Shanks\u2013Williams prime number.\n\n    NSW primes are NSW numbers that are prime.\n    \"\"\"\n    # Generate NSW numbers\n    # Since NSW numbers grow fast, we generate until we find n NSW primes\n    a = [1, 1]\n    count = 0\n    idx = 2\n    while True:\n        next_val = 2 * a[-1] + a[-2]\n        a.append(next_val)\n        if is_prime(next_val):\n            count += 1\n            if count == n:\n                return next_val\n        idx += 1\n\n\n"], "responses": ["```python\ndef is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_shanks_williams_sequence(limit: int) -> list:\n    \"\"\"\n    Generate Newman-Shanks-Williams (NSW) numbers up to at least `limit` count.\n    NSW numbers are defined by the recurrence:\n      a(0) = 1\n      a(1) = 1\n      a(n) = 2 * a(n-1) + a(n-2), for n >= 2\n    \"\"\"\n    a = [1, 1]\n    while len(a) < limit * 20:  # overestimate limit to ensure enough NSW numbers for primes\n        a.append(2 * a[-1] + a[-2])\n    return a\n\ndef newman_prime(n: int) -> int:\n    \"\"\"\n    Find the nth Newman\u2013Shanks\u2013Williams prime number.\n\n    NSW primes are NSW numbers that are prime.\n    \"\"\"\n    # Generate NSW numbers\n    # Since NSW numbers grow fast, we generate until we find n NSW primes\n    a = [1, 1]\n    count = 0\n    idx = 2\n    while True:\n        next_val = 2 * a[-1] + a[-2]\n        a.append(next_val)\n        if is_prime(next_val):\n            count += 1\n            if count == n:\n                return next_val\n        idx += 1\n```\n"], "prompt_tokens": [52], "completion_tokens": [391], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_260_newman_prime"}
{"name": "mbpp_418_Find_Max", "language": "Python3", "prompt": "from typing import List, Any\n\ndef Find_Max(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n\tWrite a python function to find the element of a list having maximum length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Max", "test": "def check(candidate):\n    assert candidate([['A'], ['A', 'B'], ['A', 'B', 'C']]) == ['A', 'B', 'C']\n    assert candidate([[1], [1, 2], [1, 2, 3]]) == [1, 2, 3]\n    assert candidate([[1, 1], [1, 2, 3], [1, 5, 6, 1]]) == [1, 5, 6, 1]\n\ndef test_check():\n    check(Find_Max)\n\ntest_check()\n", "sample_io": ["assert Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']]) == ['A', 'B', 'C']"], "source_codes": ["\nfrom typing import List, Any\n\ndef Find_Max(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    if not lst:\n        return []\n    return max(lst, key=len)\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef Find_Max(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    if not lst:\n        return []\n    return max(lst, key=len)\n```"], "prompt_tokens": [58], "completion_tokens": [60], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_418_Find_Max"}
{"name": "mbpp_565_split", "language": "Python3", "prompt": "from typing import List\n\ndef split(word: str) -> List[str]:\n    \"\"\"\n\tWrite a python function to split a string into characters.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "split", "test": "def check(candidate):\n    assert candidate('python') == ['p', 'y', 't', 'h', 'o', 'n']\n    assert candidate('Name') == ['N', 'a', 'm', 'e']\n    assert candidate('program') == ['p', 'r', 'o', 'g', 'r', 'a', 'm']\n\ndef test_check():\n    check(split)\n\ntest_check()\n", "sample_io": ["assert split('python') == ['p', 'y', 't', 'h', 'o', 'n']"], "source_codes": ["\nfrom typing import List\n\ndef split(word: str) -> List[str]:\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef split(word: str) -> List[str]:\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)\n```"], "prompt_tokens": [49], "completion_tokens": [40], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_565_split"}
{"name": "mbpp_778_pack_consecutive_duplicates", "language": "Python3", "prompt": "from typing import List, Any\n\ndef pack_consecutive_duplicates(list1: List[Any]) -> List[List[Any]]:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pack_consecutive_duplicates", "test": "def check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n", "sample_io": ["assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"], "source_codes": ["\nfrom typing import List, Any\n\ndef pack_consecutive_duplicates(list1: List[Any]) -> List[List[Any]]:\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    if not list1:\n        return []\n    \n    packed = []\n    current_sublist = [list1[0]]\n    \n    for element in list1[1:]:\n        if element == current_sublist[-1]:\n            current_sublist.append(element)\n        else:\n            packed.append(current_sublist)\n            current_sublist = [element]\n    \n    packed.append(current_sublist)\n    return packed\n\n# Example usage:\n# print(pack_consecutive_duplicates([1,1,2,3,3,3,2,2,4,4,4,4]))\n# Output: [[1, 1], [2], [3, 3, 3], [2, 2], [4, 4, 4, 4]]\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef pack_consecutive_duplicates(list1: List[Any]) -> List[List[Any]]:\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    if not list1:\n        return []\n    \n    packed = []\n    current_sublist = [list1[0]]\n    \n    for element in list1[1:]:\n        if element == current_sublist[-1]:\n            current_sublist.append(element)\n        else:\n            packed.append(current_sublist)\n            current_sublist = [element]\n    \n    packed.append(current_sublist)\n    return packed\n\n# Example usage:\n# print(pack_consecutive_duplicates([1,1,2,3,3,3,2,2,4,4,4,4]))\n# Output: [[1, 1], [2], [3, 3, 3], [2, 2], [4, 4, 4, 4]]\n```"], "prompt_tokens": [62], "completion_tokens": [204], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_778_pack_consecutive_duplicates"}
{"name": "mbpp_753_min_k", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    \"\"\"\n\tWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_k", "test": "def check(candidate):\n    assert candidate([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n    assert candidate([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n    assert candidate([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]\n\ndef test_check():\n    check(min_k)\n\ntest_check()\n", "sample_io": ["assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    For example, minimum K records have the least 'int' value in the tuple.\n\n    Args:\n    test_list : List of tuples (str, int)\n    K : Number of minimum records to find\n\n    Returns:\n    List of K tuples with smallest int values\n    \"\"\"\n    # Sort the list based on the integer value at index 1\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Return the first K elements\n    return sorted_list[:K]\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_list = [(\"gfg\", 3), (\"is\", 1), (\"best\", 2)]\n    K = 2\n    print(min_k(test_list, K))  # Output: [('is', 1), ('best', 2)]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    For example, minimum K records have the least 'int' value in the tuple.\n\n    Args:\n    test_list : List of tuples (str, int)\n    K : Number of minimum records to find\n\n    Returns:\n    List of K tuples with smallest int values\n    \"\"\"\n    # Sort the list based on the integer value at index 1\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Return the first K elements\n    return sorted_list[:K]\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_list = [(\"gfg\", 3), (\"is\", 1), (\"best\", 2)]\n    K = 2\n    print(min_k(test_list, K))  # Output: [('is', 1), ('best', 2)]\n```\n"], "prompt_tokens": [99], "completion_tokens": [222], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_753_min_k"}
{"name": "mbpp_113_check_integer", "language": "Python3", "prompt": "def check_integer(text: str) -> bool:\n    \"\"\"\n\tWrite a function to check if a string represents an integer or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_integer", "test": "def check(candidate):\n    assert candidate('python') == False\n    assert candidate('1') == True\n    assert candidate('12345') == True\n\ndef test_check():\n    check(check_integer)\n\ntest_check()\n", "sample_io": ["assert check_integer('python') == False"], "source_codes": ["\ndef check_integer(text: str) -> bool:\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    if not text:\n        return False\n    # Strip whitespace\n    text = text.strip()\n    # Check for optional leading '+' or '-'\n    if text.startswith(('+', '-')):\n        return text[1:].isdigit()\n    return text.isdigit()\n\n\n"], "responses": ["```python\ndef check_integer(text: str) -> bool:\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    if not text:\n        return False\n    # Strip whitespace\n    text = text.strip()\n    # Check for optional leading '+' or '-'\n    if text.startswith(('+', '-')):\n        return text[1:].isdigit()\n    return text.isdigit()\n```"], "prompt_tokens": [47], "completion_tokens": [84], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_113_check_integer"}
{"name": "mbpp_743_rotate_right", "language": "Python3", "prompt": "from typing import List\n\ndef rotate_right(list: List[int], m: int) -> List[int]:\n    \"\"\"\n\tWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rotate_right", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n\ndef test_check():\n    check(rotate_right)\n\ntest_check()\n", "sample_io": ["assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"], "source_codes": ["\nfrom typing import List\n\ndef rotate_right(lst: List[int], m: int) -> List[int]:\n    \"\"\"\n    Rotate a given list by specified number of items to the right.\n\n    Parameters:\n    lst (List[int]): The list to rotate.\n    m (int): Number of positions to rotate the list.\n\n    Returns:\n    List[int]: The rotated list.\n    \"\"\"\n    n = len(lst)\n    if n == 0:\n        return lst\n    m = m % n  # to handle rotation greater than list length\n    return lst[-m:] + lst[:-m]\n\n# Example usage:\n# print(rotate_right([1, 2, 3, 4, 5], 2))  # Output: [4, 5, 1, 2, 3]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef rotate_right(lst: List[int], m: int) -> List[int]:\n    \"\"\"\n    Rotate a given list by specified number of items to the right.\n\n    Parameters:\n    lst (List[int]): The list to rotate.\n    m (int): Number of positions to rotate the list.\n\n    Returns:\n    List[int]: The rotated list.\n    \"\"\"\n    n = len(lst)\n    if n == 0:\n        return lst\n    m = m % n  # to handle rotation greater than list length\n    return lst[-m:] + lst[:-m]\n\n# Example usage:\n# print(rotate_right([1, 2, 3, 4, 5], 2))  # Output: [4, 5, 1, 2, 3]\n```"], "prompt_tokens": [78], "completion_tokens": [171], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_743_rotate_right"}
{"name": "mbpp_598_armstrong_number", "language": "Python3", "prompt": "def armstrong_number(number: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is armstrong or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "armstrong_number", "test": "def check(candidate):\n    assert candidate(153) == True\n    assert candidate(259) == False\n    assert candidate(4458) == False\n\ndef test_check():\n    check(armstrong_number)\n\ntest_check()\n", "sample_io": ["assert armstrong_number(153) == True"], "source_codes": ["\ndef armstrong_number(number: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    An Armstrong number (also known as narcissistic number) is a number that is equal to the sum of its own digits\n    each raised to the power of the number of digits.\n    \"\"\"\n    digits = str(number)\n    power = len(digits)\n    total = sum(int(digit) ** power for digit in digits)\n    return total == number\n\n\n"], "responses": ["```python\ndef armstrong_number(number: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    An Armstrong number (also known as narcissistic number) is a number that is equal to the sum of its own digits\n    each raised to the power of the number of digits.\n    \"\"\"\n    digits = str(number)\n    power = len(digits)\n    total = sum(int(digit) ** power for digit in digits)\n    return total == number\n```"], "prompt_tokens": [49], "completion_tokens": [106], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_598_armstrong_number"}
{"name": "mbpp_398_sum_of_digits", "language": "Python3", "prompt": "from typing import List, Any\n\ndef sum_of_digits(nums: List[Any]) -> int:\n    \"\"\"\n\tWrite a function to compute the sum of digits of each number of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_of_digits", "test": "def check(candidate):\n    assert candidate([10, 2, 56]) == 14\n    assert candidate([[10, 20, 4, 5, 'b', 70, 'a']]) == 19\n    assert candidate([10, 20, -4, 5, -70]) == 19\n\ndef test_check():\n    check(sum_of_digits)\n\ntest_check()\n", "sample_io": ["assert sum_of_digits([10, 2, 56]) == 14"], "source_codes": ["\nfrom typing import List, Any\n\ndef sum_of_digits(nums: List[Any]) -> int:\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        # Convert to string to iterate digits\n        for ch in str(abs(int(num))):\n            if ch.isdigit():\n                total_sum += int(ch)\n    return total_sum\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef sum_of_digits(nums: List[Any]) -> int:\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        # Convert to string to iterate digits\n        for ch in str(abs(int(num))):\n            if ch.isdigit():\n                total_sum += int(ch)\n    return total_sum\n```\n"], "prompt_tokens": [59], "completion_tokens": [94], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_398_sum_of_digits"}
{"name": "mbpp_229_re_arrange_array", "language": "Python3", "prompt": "from typing import List\n\ndef re_arrange_array(arr: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "re_arrange_array", "test": "def check(candidate):\n    assert candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n    assert candidate([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\n    assert candidate([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]\n\ndef test_check():\n    check(re_arrange_array)\n\ntest_check()\n", "sample_io": ["assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]"], "source_codes": ["\nfrom typing import List\n\ndef re_arrange_array(arr: List[int], n: int) -> List[int]:\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Separate negatives and non-negatives from the first n elements, preserving order\n    negatives = [x for x in arr[:n] if x < 0]\n    non_negatives = [x for x in arr[:n] if x >= 0]\n    \n    # Combine negatives and non-negatives in order\n    rearranged_part = negatives + non_negatives\n    \n    # Return the combined array with rearranged first n elements and the rest unchanged\n    return rearranged_part + arr[n:]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef re_arrange_array(arr: List[int], n: int) -> List[int]:\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Separate negatives and non-negatives from the first n elements, preserving order\n    negatives = [x for x in arr[:n] if x < 0]\n    non_negatives = [x for x in arr[:n] if x >= 0]\n    \n    # Combine negatives and non-negatives in order\n    rearranged_part = negatives + non_negatives\n    \n    # Return the combined array with rearranged first n elements and the rest unchanged\n    return rearranged_part + arr[n:]\n```"], "prompt_tokens": [95], "completion_tokens": [187], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_229_re_arrange_array"}
{"name": "mbpp_638_wind_chill", "language": "Python3", "prompt": "def wind_chill(v: int, t: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "wind_chill", "test": "def check(candidate):\n    assert candidate(120, 35) == 40\n    assert candidate(40, 20) == 19\n    assert candidate(10, 8) == 6\n\ndef test_check():\n    check(wind_chill)\n\ntest_check()\n", "sample_io": ["assert wind_chill(120, 35) == 40"], "source_codes": ["\nimport math\n\ndef wind_chill(v: int, t: int) -> int:\n    \"\"\"\n    Calculate the wind chill index given wind velocity v (km/h) and temperature t (\u00b0C).\n    The formula for wind chill (in Celsius) used by the Canadian weather service is:\n    \n    WCI = 13.12 + 0.6215*T - 11.37*V^0.16 + 0.3965*T*V^0.16\n    \n    where:\n    - T is the air temperature in \u00b0C\n    - V is the wind speed in km/h (must be >= 4.8 km/h for the formula to apply)\n    \n    The result is rounded UP to the next integer.\n    \"\"\"\n    if v < 4.8:\n        # Wind chill formula is not valid below 4.8 km/h, so just return the actual temperature\n        return math.ceil(t)\n    \n    wci = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    return math.ceil(wci)\n\n\n"], "responses": ["```python\nimport math\n\ndef wind_chill(v: int, t: int) -> int:\n    \"\"\"\n    Calculate the wind chill index given wind velocity v (km/h) and temperature t (\u00b0C).\n    The formula for wind chill (in Celsius) used by the Canadian weather service is:\n    \n    WCI = 13.12 + 0.6215*T - 11.37*V^0.16 + 0.3965*T*V^0.16\n    \n    where:\n    - T is the air temperature in \u00b0C\n    - V is the wind speed in km/h (must be >= 4.8 km/h for the formula to apply)\n    \n    The result is rounded UP to the next integer.\n    \"\"\"\n    if v < 4.8:\n        # Wind chill formula is not valid below 4.8 km/h, so just return the actual temperature\n        return math.ceil(t)\n    \n    wci = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    return math.ceil(wci)\n```"], "prompt_tokens": [66], "completion_tokens": [251], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_638_wind_chill"}
{"name": "mbpp_608_bell_Number", "language": "Python3", "prompt": "def bell_Number(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find nth bell number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "bell_Number", "test": "def check(candidate):\n    assert candidate(2) == 2\n    assert candidate(3) == 5\n    assert candidate(4) == 15\n\ndef test_check():\n    check(bell_Number)\n\ntest_check()\n", "sample_io": ["assert bell_Number(2) == 2"], "source_codes": ["\ndef bell_Number(n: int) -> int:\n    \"\"\"\n    Write a python function to find nth bell number.\n    The Bell numbers count the number of ways a set \n    with n elements can be partitioned into non-empty subsets.\n    \"\"\"\n    # Bell Triangle method\n    bell = [[0 for _ in range(n+1)] for __ in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        # First element of each row is last element of previous row\n        bell[i][0] = bell[i-1][i-1]\n\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n\n\n"], "responses": ["```python\ndef bell_Number(n: int) -> int:\n    \"\"\"\n    Write a python function to find nth bell number.\n    The Bell numbers count the number of ways a set \n    with n elements can be partitioned into non-empty subsets.\n    \"\"\"\n    # Bell Triangle method\n    bell = [[0 for _ in range(n+1)] for __ in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        # First element of each row is last element of previous row\n        bell[i][0] = bell[i-1][i-1]\n\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n```"], "prompt_tokens": [43], "completion_tokens": [177], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_608_bell_Number"}
{"name": "mbpp_295_sum_div", "language": "Python3", "prompt": "def sum_div(number: int) -> int:\n    \"\"\"\n\tWrite a function to return the sum of all divisors of a number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_div", "test": "def check(candidate):\n    assert candidate(8) == 7\n    assert candidate(12) == 16\n    assert candidate(7) == 1\n\ndef test_check():\n    check(sum_div)\n\ntest_check()\n", "sample_io": ["assert sum_div(8) == 7"], "source_codes": ["\ndef sum_div(number: int) -> int:\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total\n\n\n"], "responses": ["```python\ndef sum_div(number: int) -> int:\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total\n```"], "prompt_tokens": [48], "completion_tokens": [71], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_295_sum_div"}
{"name": "mbpp_630_get_coordinates", "language": "Python3", "prompt": "from typing import Tuple, List\n\ndef get_coordinates(test_tup: Tuple[int, int]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_coordinates", "test": "def check(candidate):\n    assert candidate((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    assert candidate((4, 5)) == [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n    assert candidate((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n\ndef test_check():\n    check(get_coordinates)\n\ntest_check()\n", "sample_io": ["assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"], "source_codes": ["\nfrom typing import Tuple, List\n\ndef get_coordinates(test_tup: Tuple[int, int]) -> List[List[int]]:\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    Adjacent coordinates include all 8 neighbors (horizontal, vertical, and diagonal).\n\n    Parameters:\n    test_tup (Tuple[int, int]): The coordinate tuple (x, y).\n\n    Returns:\n    List[List[int]]: A list of lists representing all adjacent coordinates.\n    \"\"\"\n    x, y = test_tup\n    adjacent_coords = []\n\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            # Skip the original coordinate itself\n            if dx == 0 and dy == 0:\n                continue\n            adjacent_coords.append([x + dx, y + dy])\n\n    return adjacent_coords\n\n\n"], "responses": ["```python\nfrom typing import Tuple, List\n\ndef get_coordinates(test_tup: Tuple[int, int]) -> List[List[int]]:\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    Adjacent coordinates include all 8 neighbors (horizontal, vertical, and diagonal).\n\n    Parameters:\n    test_tup (Tuple[int, int]): The coordinate tuple (x, y).\n\n    Returns:\n    List[List[int]]: A list of lists representing all adjacent coordinates.\n    \"\"\"\n    x, y = test_tup\n    adjacent_coords = []\n\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            # Skip the original coordinate itself\n            if dx == 0 and dy == 0:\n                continue\n            adjacent_coords.append([x + dx, y + dy])\n\n    return adjacent_coords\n```"], "prompt_tokens": [62], "completion_tokens": [185], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_630_get_coordinates"}
{"name": "mbpp_579_find_dissimilar", "language": "Python3", "prompt": "from typing import Tuple\n\ndef find_dissimilar(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to find the dissimilar elements in the given two tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_dissimilar", "test": "def check(candidate):\n    assert candidate((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n    assert candidate((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\n    assert candidate((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)\n\ndef test_check():\n    check(find_dissimilar)\n\ntest_check()\n", "sample_io": ["assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"], "source_codes": ["\nfrom typing import Tuple\n\ndef find_dissimilar(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    It returns a tuple containing elements that are different at the same positions.\n    If elements are same at a position, returns 0 at that position.\n    \"\"\"\n    return tuple(a if a != b else 0 for a, b in zip(test_tup1, test_tup2))\n\n\n# Example usage:\nt1 = (1, 2, 3, 4)\nt2 = (1, 5, 3, 7)\nprint(find_dissimilar(t1, t2))  # Output: (0, 2, 0, 4)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef find_dissimilar(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    It returns a tuple containing elements that are different at the same positions.\n    If elements are same at a position, returns 0 at that position.\n    \"\"\"\n    return tuple(a if a != b else 0 for a, b in zip(test_tup1, test_tup2))\n\n\n# Example usage:\nt1 = (1, 2, 3, 4)\nt2 = (1, 5, 3, 7)\nprint(find_dissimilar(t1, t2))  # Output: (0, 2, 0, 4)\n```\n"], "prompt_tokens": [86], "completion_tokens": [192], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_579_find_dissimilar"}
{"name": "mbpp_125_find_length", "language": "Python3", "prompt": "def find_length(string: str) -> int:\n    \"\"\"\n\tWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_length", "test": "def check(candidate):\n    assert candidate('11000010001') == 6\n    assert candidate('10111') == 1\n    assert candidate('11011101100101') == 2\n\ndef test_check():\n    check(find_length)\n\ntest_check()\n", "sample_io": ["assert find_length('11000010001') == 6"], "source_codes": ["\ndef find_length(string: str) -> int:\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s \n    in any sub-string of the given binary string.\n    \"\"\"\n\n    # We want to find the max difference: (#0s - #1s) in any substring.\n    # Let's transform the string into an array where:\n    # 0 -> +1 and 1 -> -1\n    # Then the problem reduces to finding the maximum subarray sum.\n\n    arr = [1 if ch == '0' else -1 for ch in string]\n\n    max_diff = float('-inf')\n    current_sum = 0\n\n    for num in arr:\n        current_sum += num\n        if current_sum > max_diff:\n            max_diff = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    # If the string contains all '1's, max_diff could be negative or zero.\n    # Because empty substring is not considered, return max_diff anyway.\n    return max_diff\n\n\n"], "responses": ["```python\ndef find_length(string: str) -> int:\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s \n    in any sub-string of the given binary string.\n    \"\"\"\n\n    # We want to find the max difference: (#0s - #1s) in any substring.\n    # Let's transform the string into an array where:\n    # 0 -> +1 and 1 -> -1\n    # Then the problem reduces to finding the maximum subarray sum.\n\n    arr = [1 if ch == '0' else -1 for ch in string]\n\n    max_diff = float('-inf')\n    current_sum = 0\n\n    for num in arr:\n        current_sum += num\n        if current_sum > max_diff:\n            max_diff = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    # If the string contains all '1's, max_diff could be negative or zero.\n    # Because empty substring is not considered, return max_diff anyway.\n    return max_diff\n```"], "prompt_tokens": [64], "completion_tokens": [228], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_125_find_length"}
{"name": "mbpp_262_split_two_parts", "language": "Python3", "prompt": "from typing import List, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Any:\n    \"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "split_two_parts", "test": "def check(candidate):\n    assert candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1])\n    assert candidate(['a', 'b', 'c', 'd'], 2) == (['a', 'b'], ['c', 'd'])\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'], 4) == (['p', 'y', 't', 'h'], ['o', 'n'])\n\ndef test_check():\n    check(split_two_parts)\n\ntest_check()\n", "sample_io": ["assert split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1])"], "source_codes": ["\nfrom typing import List, Any, Tuple\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts\n    where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    return list1[:L], list1[L:]\n\n\n"], "responses": ["```python\nfrom typing import List, Any, Tuple\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts\n    where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    return list1[:L], list1[L:]\n```"], "prompt_tokens": [89], "completion_tokens": [95], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_262_split_two_parts"}
{"name": "mbpp_771_check_expression", "language": "Python3", "prompt": "def check_expression(exp: str) -> bool:\n    \"\"\"\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_expression", "test": "def check(candidate):\n    assert candidate('{()}[{}]') == True\n    assert candidate('{()}[{]') == False\n    assert candidate('{()}[{}][]({})') == True\n\ndef test_check():\n    check(check_expression)\n\ntest_check()\n", "sample_io": ["assert check_expression('{()}[{}]') == True"], "source_codes": ["\ndef check_expression(exp: str) -> bool:\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    Balanced expression means every opening bracket has a corresponding closing bracket in the correct order.\n    This function handles (), {}, and [] brackets.\n\n    Args:\n    exp (str): The expression string to be checked.\n\n    Returns:\n    bool: True if expression is balanced, False otherwise.\n    \"\"\"\n    stack = []\n    # Mapping of closing brackets to their corresponding opening brackets\n    bracket_pairs = {')': '(', '}': '{', ']': '['}\n\n    for char in exp:\n        # If opening bracket, push to stack\n        if char in bracket_pairs.values():\n            stack.append(char)\n        # If closing bracket, check if top of stack matches\n        elif char in bracket_pairs:\n            if not stack or stack[-1] != bracket_pairs[char]:\n                return False\n            stack.pop()\n\n    # If stack is empty, expression is balanced\n    return not stack\n\n\n"], "responses": ["```python\ndef check_expression(exp: str) -> bool:\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    Balanced expression means every opening bracket has a corresponding closing bracket in the correct order.\n    This function handles (), {}, and [] brackets.\n\n    Args:\n    exp (str): The expression string to be checked.\n\n    Returns:\n    bool: True if expression is balanced, False otherwise.\n    \"\"\"\n    stack = []\n    # Mapping of closing brackets to their corresponding opening brackets\n    bracket_pairs = {')': '(', '}': '{', ']': '['}\n\n    for char in exp:\n        # If opening bracket, push to stack\n        if char in bracket_pairs.values():\n            stack.append(char)\n        # If closing bracket, check if top of stack matches\n        elif char in bracket_pairs:\n            if not stack or stack[-1] != bracket_pairs[char]:\n                return False\n            stack.pop()\n\n    # If stack is empty, expression is balanced\n    return not stack\n```"], "prompt_tokens": [66], "completion_tokens": [210], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_771_check_expression"}
{"name": "mbpp_801_test_three_equal", "language": "Python3", "prompt": "def test_three_equal(x: int, y: int, z: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of equal numbers from three given integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "test_three_equal", "test": "def check(candidate):\n    assert candidate(1, 1, 1) == 3\n    assert candidate(-1, -2, -3) == 0\n    assert candidate(1, 2, 2) == 2\n\ndef test_check():\n    check(test_three_equal)\n\ntest_check()\n", "sample_io": ["assert test_three_equal(1, 1, 1) == 3"], "source_codes": ["\ndef test_three_equal(x: int, y: int, z: int) -> int:\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    Returns:\n        3 if all three are equal,\n        2 if exactly two are equal,\n        0 if none are equal.\n    \"\"\"\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n\n\n"], "responses": ["```python\ndef test_three_equal(x: int, y: int, z: int) -> int:\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    Returns:\n        3 if all three are equal,\n        2 if exactly two are equal,\n        0 if none are equal.\n    \"\"\"\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n```"], "prompt_tokens": [58], "completion_tokens": [113], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_801_test_three_equal"}
{"name": "mbpp_389_find_lucas", "language": "Python3", "prompt": "def find_lucas(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the n'th lucas number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_lucas", "test": "def check(candidate):\n    assert candidate(9) == 76\n    assert candidate(4) == 7\n    assert candidate(3) == 4\n\ndef test_check():\n    check(find_lucas)\n\ntest_check()\n", "sample_io": ["assert find_lucas(9) == 76"], "source_codes": ["\ndef find_lucas(n: int) -> int:\n    \"\"\"\n    Write a function to find the n'th lucas number.\n    The Lucas sequence is defined as:\n    L0 = 2, L1 = 1\n    Ln = Ln-1 + Ln-2 for n > 1\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n\n"], "responses": ["```python\ndef find_lucas(n: int) -> int:\n    \"\"\"\n    Write a function to find the n'th lucas number.\n    The Lucas sequence is defined as:\n    L0 = 2, L1 = 1\n    Ln = Ln-1 + Ln-2 for n > 1\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n```"], "prompt_tokens": [47], "completion_tokens": [133], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_389_find_lucas"}
{"name": "mbpp_102_snake_to_camel", "language": "Python3", "prompt": "def snake_to_camel(word: str) -> str:\n    \"\"\"\n\tWrite a function to convert a snake case string to camel case string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "snake_to_camel", "test": "def check(candidate):\n    assert candidate('python_program') == 'PythonProgram'\n    assert candidate('python_language') == 'PythonLanguage'\n    assert candidate('programming_language') == 'ProgrammingLanguage'\n\ndef test_check():\n    check(snake_to_camel)\n\ntest_check()\n", "sample_io": ["assert snake_to_camel('python_program') == 'PythonProgram'"], "source_codes": ["\ndef snake_to_camel(word: str) -> str:\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    components = word.split('_')\n    # Capitalize the first letter of each component except the first one\n    return components[0] + ''.join(x.title() for x in components[1:])\n\n\n"], "responses": ["```python\ndef snake_to_camel(word: str) -> str:\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    components = word.split('_')\n    # Capitalize the first letter of each component except the first one\n    return components[0] + ''.join(x.title() for x in components[1:])\n```"], "prompt_tokens": [49], "completion_tokens": [76], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_102_snake_to_camel"}
{"name": "mbpp_604_reverse_words", "language": "Python3", "prompt": "def reverse_words(s: str) -> str:\n    \"\"\"\n\tWrite a function to reverse words seperated by spaces in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "reverse_words", "test": "def check(candidate):\n    assert candidate('python program') == 'program python'\n    assert candidate('java language') == 'language java'\n    assert candidate('indian man') == 'man indian'\n\ndef test_check():\n    check(reverse_words)\n\ntest_check()\n", "sample_io": ["assert reverse_words('python program') == 'program python'"], "source_codes": ["\ndef reverse_words(s: str) -> str:\n    \"\"\"\n    Write a function to reverse words separated by spaces in a given string.\n    \"\"\"\n    words = s.split()   # Split the string by spaces into a list of words\n    reversed_words = words[::-1]  # Reverse the list of words\n    return ' '.join(reversed_words)  # Join the reversed list back into a string\n\n# Example usage:\n# print(reverse_words(\"hello world\"))  # Output: \"world hello\"\n\n\n"], "responses": ["```python\ndef reverse_words(s: str) -> str:\n    \"\"\"\n    Write a function to reverse words separated by spaces in a given string.\n    \"\"\"\n    words = s.split()   # Split the string by spaces into a list of words\n    reversed_words = words[::-1]  # Reverse the list of words\n    return ' '.join(reversed_words)  # Join the reversed list back into a string\n\n# Example usage:\n# print(reverse_words(\"hello world\"))  # Output: \"world hello\"\n```"], "prompt_tokens": [48], "completion_tokens": [108], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_604_reverse_words"}
{"name": "mbpp_624_is_upper", "language": "Python3", "prompt": "def is_upper(string: str) -> str:\n    \"\"\"\n\tWrite a python function to convert a given string to uppercase.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_upper", "test": "def check(candidate):\n    assert candidate('person') == 'PERSON'\n    assert candidate('final') == 'FINAL'\n    assert candidate('Valid') == 'VALID'\n\ndef test_check():\n    check(is_upper)\n\ntest_check()\n", "sample_io": ["assert is_upper('person') == 'PERSON'"], "source_codes": ["\ndef is_upper(string: str) -> str:\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()\n\n\n"], "responses": ["```python\ndef is_upper(string: str) -> str:\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()\n```"], "prompt_tokens": [45], "completion_tokens": [36], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_624_is_upper"}
{"name": "mbpp_558_digit_distance_nums", "language": "Python3", "prompt": "def digit_distance_nums(n1: int, n2: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of the per-digit difference between two integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "digit_distance_nums", "test": "def check(candidate):\n    assert candidate(1, 2) == 1\n    assert candidate(23, 56) == 6\n    assert candidate(123, 256) == 7\n\ndef test_check():\n    check(digit_distance_nums)\n\ntest_check()\n", "sample_io": ["assert digit_distance_nums(1, 2) == 1"], "source_codes": ["\ndef digit_distance_nums(n1: int, n2: int) -> int:\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert integers to strings\n    s1, s2 = str(abs(n1)), str(abs(n2))\n    \n    # Pad the shorter string with leading zeros\n    max_len = max(len(s1), len(s2))\n    s1 = s1.zfill(max_len)\n    s2 = s2.zfill(max_len)\n    \n    # Calculate sum of absolute differences digit-wise\n    total_diff = 0\n    for d1, d2 in zip(s1, s2):\n        total_diff += abs(int(d1) - int(d2))\n    \n    return total_diff\n\n\n"], "responses": ["```python\ndef digit_distance_nums(n1: int, n2: int) -> int:\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert integers to strings\n    s1, s2 = str(abs(n1)), str(abs(n2))\n    \n    # Pad the shorter string with leading zeros\n    max_len = max(len(s1), len(s2))\n    s1 = s1.zfill(max_len)\n    s2 = s2.zfill(max_len)\n    \n    # Calculate sum of absolute differences digit-wise\n    total_diff = 0\n    for d1, d2 in zip(s1, s2):\n        total_diff += abs(int(d1) - int(d2))\n    \n    return total_diff\n```"], "prompt_tokens": [57], "completion_tokens": [166], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_558_digit_distance_nums"}
{"name": "mbpp_143_find_lists", "language": "Python3", "prompt": "from typing import List, Any\n\ndef find_lists(Input: List[Any]) -> int:\n    \"\"\"\n\tWrite a function to find number of lists present in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_143_find_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_lists", "test": "def check(candidate):\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8]]) == 2\n    assert candidate([[1, 2], [3, 4], [5, 6]]) == 3\n    assert candidate([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1\n\ndef test_check():\n    check(find_lists)\n\ntest_check()\n", "sample_io": ["assert find_lists([[1, 2, 3, 4], [5, 6, 7, 8]]) == 2"], "source_codes": ["\nfrom typing import List, Any\n\ndef find_lists(Input: List[Any]) -> int:\n    \"\"\"\n    Write a function to find number of lists present in the given list.\n    \"\"\"\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef find_lists(Input: List[Any]) -> int:\n    \"\"\"\n    Write a function to find number of lists present in the given list.\n    \"\"\"\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count\n```"], "prompt_tokens": [55], "completion_tokens": [70], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_143_find_lists"}
{"name": "mbpp_615_average_tuple", "language": "Python3", "prompt": "from typing import List\n\ndef average_tuple(nums: List[List[int]]) -> List[float]:\n    \"\"\"\n\tWrite a function which takes a lists of lists and returns the average value for each sublist as a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "average_tuple", "test": "def check(candidate):\n    assert candidate([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]) == [30.5, 34.25, 27.0, 23.25]\n    assert candidate([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]]) == [25.5, -18.0, 3.75]\n    assert candidate([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]]) == [305.0, 342.5, 270.0, 232.5]\n\ndef test_check():\n    check(average_tuple)\n\ntest_check()\n", "sample_io": ["assert average_tuple([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]) == [30.5, 34.25, 27.0, 23.25]"], "source_codes": ["\nfrom typing import List\n\ndef average_tuple(nums: List[List[int]]) -> List[float]:\n    \"\"\"\n    Write a function which takes a lists of lists and returns the average value for each sublist as a list.\n    \"\"\"\n    return [sum(sublist) / len(sublist) if sublist else 0 for sublist in nums]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef average_tuple(nums: List[List[int]]) -> List[float]:\n    \"\"\"\n    Write a function which takes a lists of lists and returns the average value for each sublist as a list.\n    \"\"\"\n    return [sum(sublist) / len(sublist) if sublist else 0 for sublist in nums]\n```"], "prompt_tokens": [62], "completion_tokens": [70], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_615_average_tuple"}
{"name": "mbpp_166_find_even_pair", "language": "Python3", "prompt": "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    \"\"\"\n\tWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_even_pair", "test": "def check(candidate):\n    assert candidate([5, 4, 7, 2, 1]) == 4\n    assert candidate([7, 2, 8, 1, 0, 5, 11]) == 9\n    assert candidate([1, 2, 3]) == 1\n\ndef test_check():\n    check(find_even_pair)\n\ntest_check()\n", "sample_io": ["assert find_even_pair([5, 4, 7, 2, 1]) == 4"], "source_codes": ["\nfrom typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    # XOR of two numbers is even if the last bit of XOR is 0,\n    # i.e. both numbers have the same parity (both even or both odd).\n    \n    even_count = sum(1 for x in A if x % 2 == 0)\n    odd_count = len(A) - even_count\n    \n    # Number of pairs from even elements: C(even_count, 2)\n    even_pairs = even_count * (even_count - 1) // 2\n    # Number of pairs from odd elements: C(odd_count, 2)\n    odd_pairs = odd_count * (odd_count - 1) // 2\n    \n    return even_pairs + odd_pairs\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    # XOR of two numbers is even if the last bit of XOR is 0,\n    # i.e. both numbers have the same parity (both even or both odd).\n    \n    even_count = sum(1 for x in A if x % 2 == 0)\n    odd_count = len(A) - even_count\n    \n    # Number of pairs from even elements: C(even_count, 2)\n    even_pairs = even_count * (even_count - 1) // 2\n    # Number of pairs from odd elements: C(odd_count, 2)\n    odd_pairs = odd_count * (odd_count - 1) // 2\n    \n    return even_pairs + odd_pairs\n```"], "prompt_tokens": [61], "completion_tokens": [193], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_166_find_even_pair"}
{"name": "mbpp_58_opposite_Signs", "language": "Python3", "prompt": "def opposite_Signs(x: int, y: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "opposite_Signs", "test": "def check(candidate):\n    assert candidate(1, -2) == True\n    assert candidate(3, 2) == False\n    assert candidate(-10, -10) == False\n    assert candidate(-2, 2) == True\n\ndef test_check():\n    check(opposite_Signs)\n\ntest_check()\n", "sample_io": ["assert opposite_Signs(1, -2) == True"], "source_codes": ["\ndef opposite_Signs(x: int, y: int) -> bool:\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    return (x < 0 and y > 0) or (x > 0 and y < 0)\n\n\n"], "responses": ["```python\ndef opposite_Signs(x: int, y: int) -> bool:\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    return (x < 0 and y > 0) or (x > 0 and y < 0)\n```"], "prompt_tokens": [56], "completion_tokens": [67], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_58_opposite_Signs"}
{"name": "mbpp_569_sort_sublists", "language": "Python3", "prompt": "from typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_sublists", "test": "def check(candidate):\n    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]) == [['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n    assert candidate([['a', 'b'], ['d', 'c'], ['g', 'h'], ['f', 'e']]) == [['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n", "sample_io": ["assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"], "source_codes": ["\nfrom typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    return [sorted(sublist) for sublist in list1]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    return [sorted(sublist) for sublist in list1]\n```"], "prompt_tokens": [60], "completion_tokens": [59], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_569_sort_sublists"}
{"name": "mbpp_255_combinations_colors", "language": "Python3", "prompt": "from typing import List\n\ndef combinations_colors(l: List[str], n: int) -> List[List[str]]:\n    \"\"\"\n\tWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "combinations_colors", "test": "def check(candidate):\n    assert candidate(['Red', 'Green', 'Blue'], 1) == [['Red'], ['Green'], ['Blue']]\n    assert candidate(['Red', 'Green', 'Blue'], 2) == [['Red', 'Red'], ['Red', 'Green'], ['Red', 'Blue'], ['Green', 'Green'], ['Green', 'Blue'], ['Blue', 'Blue']]\n    assert candidate(['Red', 'Green', 'Blue'], 3) == [['Red', 'Red', 'Red'], ['Red', 'Red', 'Green'], ['Red', 'Red', 'Blue'], ['Red', 'Green', 'Green'], ['Red', 'Green', 'Blue'], ['Red', 'Blue', 'Blue'], ['Green', 'Green', 'Green'], ['Green', 'Green', 'Blue'], ['Green', 'Blue', 'Blue'], ['Blue', 'Blue', 'Blue']]\n\ndef test_check():\n    check(combinations_colors)\n\ntest_check()\n", "sample_io": ["assert combinations_colors(['Red', 'Green', 'Blue'], 1) == [['Red'], ['Green'], ['Blue']]"], "source_codes": ["\nfrom typing import List\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List[str], n: int) -> List[List[str]]:\n    \"\"\"\n    Write a function that takes in a list and length n, and generates all combinations (with repetition)\n    of the elements of the list and returns a list with a list for each combination.\n    \"\"\"\n    return [list(combo) for combo in combinations_with_replacement(l, n)]\n\n\n"], "responses": ["```python\nfrom typing import List\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List[str], n: int) -> List[List[str]]:\n    \"\"\"\n    Write a function that takes in a list and length n, and generates all combinations (with repetition)\n    of the elements of the list and returns a list with a list for each combination.\n    \"\"\"\n    return [list(combo) for combo in combinations_with_replacement(l, n)]\n```"], "prompt_tokens": [82], "completion_tokens": [95], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_255_combinations_colors"}
{"name": "mbpp_619_move_num", "language": "Python3", "prompt": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "move_num", "test": "def check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n", "sample_io": ["assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"], "source_codes": ["\ndef move_num(test_str: str) -> str:\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    letters = [ch for ch in test_str if not ch.isdigit()]\n    digits = [ch for ch in test_str if ch.isdigit()]\n    return \"\".join(letters + digits)\n\n\n"], "responses": ["```python\ndef move_num(test_str: str) -> str:\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    letters = [ch for ch in test_str if not ch.isdigit()]\n    digits = [ch for ch in test_str if ch.isdigit()]\n    return \"\".join(letters + digits)\n```"], "prompt_tokens": [50], "completion_tokens": [74], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_619_move_num"}
{"name": "mbpp_249_intersection_array", "language": "Python3", "prompt": "from typing import List\n\ndef intersection_array(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find the intersection of two arrays.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "intersection_array", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]) == [1, 2, 8, 9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]) == [3, 5, 7, 9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]) == [10]\n\ndef test_check():\n    check(intersection_array)\n\ntest_check()\n", "sample_io": ["assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]) == [1, 2, 8, 9]"], "source_codes": ["\nfrom typing import List\n\ndef intersection_array(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and speed up lookup\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Return the intersection as a list\n    return list(intersection)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef intersection_array(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and speed up lookup\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Return the intersection as a list\n    return list(intersection)\n```"], "prompt_tokens": [60], "completion_tokens": [115], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_249_intersection_array"}
{"name": "mbpp_250_count_X", "language": "Python3", "prompt": "from typing import List\n\ndef count_X(tup: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_X", "test": "def check(candidate):\n    assert candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4) == 0\n    assert candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10) == 3\n    assert candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8) == 4\n\ndef test_check():\n    check(count_X)\n\ntest_check()\n", "sample_io": ["assert count_X([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4) == 0"], "source_codes": ["\nfrom typing import List\n\ndef count_X(tup: List[int], x: int) -> int:\n    \"\"\"\n    Write a python function that takes in a list and an element and counts the occurrences of the element in the list.\n    \"\"\"\n    return tup.count(x)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_X(tup: List[int], x: int) -> int:\n    \"\"\"\n    Write a python function that takes in a list and an element and counts the occurrences of the element in the list.\n    \"\"\"\n    return tup.count(x)\n```"], "prompt_tokens": [70], "completion_tokens": [59], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_250_count_X"}
{"name": "mbpp_622_get_median", "language": "Python3", "prompt": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_median", "test": "def check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n", "sample_io": ["assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0"], "source_codes": ["\nfrom typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Helper function to find median of a single sorted list of size n\n    def median(arr: List[int], n: int) -> float:\n        if n % 2 == 0:\n            return (arr[n//2 - 1] + arr[n//2]) / 2\n        else:\n            return arr[n//2]\n\n    # Base cases\n    if n == 0:\n        return -1  # Undefined for empty arrays\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    # If medians are equal, return either\n    if m1 == m2:\n        return m1\n\n    # if m1 < m2, then median must exist in arr1[m1_end ... end] and arr2[start ... m2_start]\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2:], arr2[:n//2], n - n//2)\n        else:\n            return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n\n    # if m1 > m2, then median must exist in arr1[start ... m1_start] and arr2[m2_start ... end]\n    else:\n        if n % 2 == 0:\n            return get_median(arr1[:n//2], arr2[n//2:], n - n//2)\n        else:\n            return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Helper function to find median of a single sorted list of size n\n    def median(arr: List[int], n: int) -> float:\n        if n % 2 == 0:\n            return (arr[n//2 - 1] + arr[n//2]) / 2\n        else:\n            return arr[n//2]\n\n    # Base cases\n    if n == 0:\n        return -1  # Undefined for empty arrays\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    # If medians are equal, return either\n    if m1 == m2:\n        return m1\n\n    # if m1 < m2, then median must exist in arr1[m1_end ... end] and arr2[start ... m2_start]\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2:], arr2[:n//2], n - n//2)\n        else:\n            return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n\n    # if m1 > m2, then median must exist in arr1[start ... m1_start] and arr2[m2_start ... end]\n    else:\n        if n % 2 == 0:\n            return get_median(arr1[:n//2], arr2[n//2:], n - n//2)\n        else:\n            return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n```\n"], "prompt_tokens": [65], "completion_tokens": [450], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_622_get_median"}
{"name": "mbpp_80_tetrahedral_number", "language": "Python3", "prompt": "def tetrahedral_number(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth tetrahedral number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tetrahedral_number", "test": "def check(candidate):\n    assert candidate(5) == 35\n    assert candidate(6) == 56\n    assert candidate(7) == 84\n\ndef test_check():\n    check(tetrahedral_number)\n\ntest_check()\n", "sample_io": ["assert tetrahedral_number(5) == 35"], "source_codes": ["\ndef tetrahedral_number(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    The nth tetrahedral number is given by the formula:\n    T(n) = n * (n + 1) * (n + 2) / 6\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n\n"], "responses": ["```python\ndef tetrahedral_number(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    The nth tetrahedral number is given by the formula:\n    T(n) = n * (n + 1) * (n + 2) / 6\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n```"], "prompt_tokens": [47], "completion_tokens": [91], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_80_tetrahedral_number"}
{"name": "mbpp_780_find_combinations", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n\tWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_combinations", "test": "def check(candidate):\n    assert candidate([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    assert candidate([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\n    assert candidate([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n\ndef test_check():\n    check(find_combinations)\n\ntest_check()\n", "sample_io": ["assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"], "source_codes": ["\nfrom typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    Each tuple is of form (int, int).\n    The function finds all combinations of lengths from 1 to len(test_list),\n    sums the tuples element-wise, and returns a list of unique summed tuples.\n    \n    Example:\n    Input: [(1, 2), (3, 4), (5, 6)]\n    Output: [(1, 2), (3, 4), (5, 6), (4, 6), (6, 8), (8, 10), (9, 12)]\n    \"\"\"\n    \n    n = len(test_list)\n    res = set()\n    \n    # Iterate over all possible combination lengths\n    for length in range(1, n+1):\n        for comb in combinations(test_list, length):\n            # Sum element-wise all tuples in comb\n            sum_0 = sum(t[0] for t in comb)\n            sum_1 = sum(t[1] for t in comb)\n            res.add((sum_0, sum_1))\n    \n    return list(res)\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    Each tuple is of form (int, int).\n    The function finds all combinations of lengths from 1 to len(test_list),\n    sums the tuples element-wise, and returns a list of unique summed tuples.\n    \n    Example:\n    Input: [(1, 2), (3, 4), (5, 6)]\n    Output: [(1, 2), (3, 4), (5, 6), (4, 6), (6, 8), (8, 10), (9, 12)]\n    \"\"\"\n    \n    n = len(test_list)\n    res = set()\n    \n    # Iterate over all possible combination lengths\n    for length in range(1, n+1):\n        for comb in combinations(test_list, length):\n            # Sum element-wise all tuples in comb\n            sum_0 = sum(t[0] for t in comb)\n            sum_1 = sum(t[1] for t in comb)\n            res.add((sum_0, sum_1))\n    \n    return list(res)\n```"], "prompt_tokens": [90], "completion_tokens": [276], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_780_find_combinations"}
{"name": "mbpp_733_find_first_occurrence", "language": "Python3", "prompt": "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_first_occurrence", "test": "def check(candidate):\n    assert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    assert candidate([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\n    assert candidate([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4\n\ndef test_check():\n    check(find_first_occurrence)\n\ntest_check()\n", "sample_io": ["assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1"], "source_codes": ["\nfrom typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    If the number is not found, return -1.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # record the index and move left to find earlier occurrence\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    If the number is not found, return -1.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # record the index and move left to find earlier occurrence\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result\n```"], "prompt_tokens": [65], "completion_tokens": [167], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_733_find_first_occurrence"}
{"name": "mbpp_6_differ_At_One_Bit_Pos", "language": "Python3", "prompt": "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "differ_At_One_Bit_Pos", "test": "def check(candidate):\n    assert candidate(13, 9) == True\n    assert candidate(15, 8) == False\n    assert candidate(2, 4) == False\n    assert candidate(2, 3) == True\n    assert candidate(5, 1) == True\n    assert candidate(1, 5) == True\n\ndef test_check():\n    check(differ_At_One_Bit_Pos)\n\ntest_check()\n", "sample_io": ["assert differ_At_One_Bit_Pos(13, 9) == True"], "source_codes": ["\ndef differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # XOR of a and b will have bits set to 1 where they differ\n    xor = a ^ b\n    \n    # To differ at exactly one bit, xor must be a power of two\n    # i.e., xor & (xor - 1) == 0 and xor != 0\n    return xor != 0 and (xor & (xor - 1)) == 0\n\n\n"], "responses": ["```python\ndef differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # XOR of a and b will have bits set to 1 where they differ\n    xor = a ^ b\n    \n    # To differ at exactly one bit, xor must be a power of two\n    # i.e., xor & (xor - 1) == 0 and xor != 0\n    return xor != 0 and (xor & (xor - 1)) == 0\n```\n"], "prompt_tokens": [60], "completion_tokens": [131], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_6_differ_At_One_Bit_Pos"}
{"name": "mbpp_762_check_monthnumber_number", "language": "Python3", "prompt": "def check_monthnumber_number(monthnum3: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_762_check_monthnumber_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_monthnumber_number", "test": "def check(candidate):\n    assert candidate(6) == True\n    assert candidate(2) == False\n    assert candidate(12) == False\n\ndef test_check():\n    check(check_monthnumber_number)\n\ntest_check()\n", "sample_io": ["assert check_monthnumber_number(6) == True"], "source_codes": ["\ndef check_monthnumber_number(monthnum3: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not.\n    Months are given as a number from 1 to 12.\n\n    Returns True if the month has 30 days, False otherwise.\n    \"\"\"\n    # Months with 30 days are April(4), June(6), September(9), November(11)\n    return monthnum3 in [4, 6, 9, 11]\n\n\n"], "responses": ["```python\ndef check_monthnumber_number(monthnum3: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not.\n    Months are given as a number from 1 to 12.\n\n    Returns True if the month has 30 days, False otherwise.\n    \"\"\"\n    # Months with 30 days are April(4), June(6), September(9), November(11)\n    return monthnum3 in [4, 6, 9, 11]\n```"], "prompt_tokens": [66], "completion_tokens": [110], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_762_check_monthnumber_number"}
{"name": "mbpp_625_swap_List", "language": "Python3", "prompt": "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to interchange the first and last element in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "swap_List", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == [3, 2, 1]\n    assert candidate([1, 2, 3, 4, 4]) == [4, 2, 3, 4, 1]\n    assert candidate([4, 5, 6]) == [6, 5, 4]\n\ndef test_check():\n    check(swap_List)\n\ntest_check()\n", "sample_io": ["assert swap_List([1, 2, 3]) == [3, 2, 1]"], "source_codes": ["\nfrom typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if not newList or len(newList) == 1:\n        return newList\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if not newList or len(newList) == 1:\n        return newList\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n```"], "prompt_tokens": [57], "completion_tokens": [82], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_625_swap_List"}
{"name": "mbpp_407_rearrange_bigger", "language": "Python3", "prompt": "from typing import Any\n\ndef rearrange_bigger(n: int) -> Any:\n    \"\"\"\n\tWrite a function to create the next bigger number by rearranging the digits of a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rearrange_bigger", "test": "def check(candidate):\n    assert candidate(12) == 21\n    assert candidate(10) == False\n    assert candidate(102) == 120\n\ndef test_check():\n    check(rearrange_bigger)\n\ntest_check()\n", "sample_io": ["assert rearrange_bigger(12) == 21"], "source_codes": ["\nfrom typing import Any\n\ndef rearrange_bigger(n: int) -> Any:\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    If no bigger number can be made, return -1.\n    \"\"\"\n    digits = list(str(n))\n\n    # Step 1: Find the pivot, the first digit that is smaller than the digit to its right\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n\n    # If no pivot found, no bigger number possible\n    if i == -1:\n        return -1\n\n    # Step 2: Find the smallest digit on the right side of pivot that is bigger than digits[i]\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n\n    # Step 3: Swap the pivot and this digit\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # Step 4: Reverse the digits to the right of the pivot position\n    digits[i+1:] = reversed(digits[i+1:])\n\n    # Convert back to integer\n    return int(\"\".join(digits))\n\n\n"], "responses": ["```python\nfrom typing import Any\n\ndef rearrange_bigger(n: int) -> Any:\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    If no bigger number can be made, return -1.\n    \"\"\"\n    digits = list(str(n))\n\n    # Step 1: Find the pivot, the first digit that is smaller than the digit to its right\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n\n    # If no pivot found, no bigger number possible\n    if i == -1:\n        return -1\n\n    # Step 2: Find the smallest digit on the right side of pivot that is bigger than digits[i]\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n\n    # Step 3: Swap the pivot and this digit\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # Step 4: Reverse the digits to the right of the pivot position\n    digits[i+1:] = reversed(digits[i+1:])\n\n    # Convert back to integer\n    return int(\"\".join(digits))\n```\n"], "prompt_tokens": [59], "completion_tokens": [267], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_407_rearrange_bigger"}
{"name": "mbpp_392_get_max_sum", "language": "Python3", "prompt": "def get_max_sum(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_max_sum", "test": "def check(candidate):\n    assert candidate(60) == 106\n    assert candidate(10) == 12\n    assert candidate(2) == 2\n\ndef test_check():\n    check(get_max_sum)\n\ntest_check()\n", "sample_io": ["assert get_max_sum(60) == 106"], "source_codes": ["\ndef get_max_sum(n: int) -> int:\n    memo = {}\n\n    def helper(x: int) -> int:\n        if x == 0:\n            return 0\n        if x in memo:\n            return memo[x]\n        # Compute f(x) = max(x, f(x//2) + f(x//3) + f(x//4) + f(x//5))\n        val = helper(x // 2) + helper(x // 3) + helper(x // 4) + helper(x // 5)\n        memo[x] = max(x, val)\n        return memo[x]\n\n    return helper(n)\n\n\n"], "responses": ["```python\ndef get_max_sum(n: int) -> int:\n    memo = {}\n\n    def helper(x: int) -> int:\n        if x == 0:\n            return 0\n        if x in memo:\n            return memo[x]\n        # Compute f(x) = max(x, f(x//2) + f(x//3) + f(x//4) + f(x//5))\n        val = helper(x // 2) + helper(x // 3) + helper(x // 4) + helper(x // 5)\n        memo[x] = max(x, val)\n        return memo[x]\n\n    return helper(n)\n```"], "prompt_tokens": [80], "completion_tokens": [135], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_392_get_max_sum"}
{"name": "mbpp_784_mul_even_odd", "language": "Python3", "prompt": "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "mul_even_odd", "test": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\n    assert candidate([1, 5, 7, 9, 10]) == 10\n\ndef test_check():\n    check(mul_even_odd)\n\ntest_check()\n", "sample_io": ["assert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4"], "source_codes": ["\nfrom typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    first_even = None\n    first_odd = None\n\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is None or first_odd is None:\n        # If either even or odd number is missing, return 0 or handle accordingly\n        return 0\n\n    return first_even * first_odd\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    first_even = None\n    first_odd = None\n\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is None or first_odd is None:\n        # If either even or odd number is missing, return 0 or handle accordingly\n        return 0\n\n    return first_even * first_odd\n```"], "prompt_tokens": [59], "completion_tokens": [166], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_784_mul_even_odd"}
{"name": "mbpp_109_odd_Equivalent", "language": "Python3", "prompt": "def odd_Equivalent(s: str, n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_109_odd_Equivalent.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_Equivalent", "test": "def check(candidate):\n    assert candidate('011001', 6) == 3\n    assert candidate('11011', 5) == 4\n    assert candidate('1010', 4) == 2\n\ndef test_check():\n    check(odd_Equivalent)\n\ntest_check()\n", "sample_io": ["assert odd_Equivalent('011001', 6) == 3"], "source_codes": ["\ndef odd_Equivalent(s: str, n: int) -> int:\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value \n    when rotating a binary string the given number of times.\n    \n    Parameters:\n    s (str): A binary string.\n    n (int): Number of rotations.\n    \n    Returns:\n    int: Count of rotations that produce an odd number.\n    \"\"\"\n    count = 0\n    length = len(s)\n    for i in range(n):\n        # Rotate string to the right by i positions\n        rotated = s[-i % length:] + s[:-i % length]\n        # Convert to integer and check if odd\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count\n\n\n"], "responses": ["```python\ndef odd_Equivalent(s: str, n: int) -> int:\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value \n    when rotating a binary string the given number of times.\n    \n    Parameters:\n    s (str): A binary string.\n    n (int): Number of rotations.\n    \n    Returns:\n    int: Count of rotations that produce an odd number.\n    \"\"\"\n    count = 0\n    length = len(s)\n    for i in range(n):\n        # Rotate string to the right by i positions\n        rotated = s[-i % length:] + s[:-i % length]\n        # Convert to integer and check if odd\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count\n```"], "prompt_tokens": [64], "completion_tokens": [172], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_109_odd_Equivalent"}
{"name": "mbpp_95_Find_Min_Length", "language": "Python3", "prompt": "from typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a python function to find the length of the smallest list in a list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Min_Length", "test": "def check(candidate):\n    assert candidate([[1], [1, 2]]) == 1\n    assert candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2\n    assert candidate([[3, 3, 3], [4, 4, 4, 4]]) == 3\n\ndef test_check():\n    check(Find_Min_Length)\n\ntest_check()\n", "sample_io": ["assert Find_Min_Length([[1], [1, 2]]) == 1"], "source_codes": ["\nfrom typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> int:\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    if not lst:  # If the list is empty, return 0 or raise an error\n        return 0\n    return min(len(sublist) for sublist in lst)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> int:\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    if not lst:  # If the list is empty, return 0 or raise an error\n        return 0\n    return min(len(sublist) for sublist in lst)\n```"], "prompt_tokens": [59], "completion_tokens": [83], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_95_Find_Min_Length"}
{"name": "mbpp_399_bitwise_xor", "language": "Python3", "prompt": "from typing import Tuple\n\ndef bitwise_xor(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "bitwise_xor", "test": "def check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n    assert candidate((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\n    assert candidate((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)\n\ndef test_check():\n    check(bitwise_xor)\n\ntest_check()\n", "sample_io": ["assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)"], "source_codes": ["\nfrom typing import Tuple\n\ndef bitwise_xor(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef bitwise_xor(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n```"], "prompt_tokens": [84], "completion_tokens": [92], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_399_bitwise_xor"}
{"name": "mbpp_641_is_nonagonal", "language": "Python3", "prompt": "def is_nonagonal(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth nonagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_nonagonal", "test": "def check(candidate):\n    assert candidate(10) == 325\n    assert candidate(15) == 750\n    assert candidate(18) == 1089\n\ndef test_check():\n    check(is_nonagonal)\n\ntest_check()\n", "sample_io": ["assert is_nonagonal(10) == 325"], "source_codes": ["\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    The nth nonagonal number is given by the formula:\n    N(n) = n * (7n - 5) / 2\n    \"\"\"\n    return n * (7 * n - 5) // 2\n\n\n"], "responses": ["```python\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    The nth nonagonal number is given by the formula:\n    N(n) = n * (7n - 5) / 2\n    \"\"\"\n    return n * (7 * n - 5) // 2\n```"], "prompt_tokens": [45], "completion_tokens": [77], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_641_is_nonagonal"}
{"name": "mbpp_59_is_octagonal", "language": "Python3", "prompt": "def is_octagonal(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth octagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_octagonal", "test": "def check(candidate):\n    assert candidate(5) == 65\n    assert candidate(10) == 280\n    assert candidate(15) == 645\n\ndef test_check():\n    check(is_octagonal)\n\ntest_check()\n", "sample_io": ["assert is_octagonal(5) == 65"], "source_codes": ["\ndef is_octagonal(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    The formula for the nth octagonal number is: n * (3n - 2)\n    \"\"\"\n    return n * (3 * n - 2)\n\n\n"], "responses": ["```python\ndef is_octagonal(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    The formula for the nth octagonal number is: n * (3n - 2)\n    \"\"\"\n    return n * (3 * n - 2)\n```"], "prompt_tokens": [45], "completion_tokens": [63], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_59_is_octagonal"}
