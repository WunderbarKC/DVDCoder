{"name": "mbpp_234_volume_cube", "language": "Python3", "prompt": "def volume_cube(l: int) -> int:\n    \"\"\"\n\tWrite a function to find the volume of a cube given its side length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "volume_cube", "test": "def check(candidate):\n    assert candidate(3) == 27\n    assert candidate(2) == 8\n    assert candidate(5) == 125\n\ndef test_check():\n    check(volume_cube)\n\ntest_check()\n", "sample_io": ["assert volume_cube(3) == 27"], "source_codes": ["\ndef volume_cube(l: int) -> int:\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n\n    Parameters:\n    l (int): The length of one side of the cube\n\n    Returns:\n    int: The volume of the cube\n    \"\"\"\n    return l ** 3\n\n\n"], "responses": ["```python\ndef volume_cube(l: int) -> int:\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n\n    Parameters:\n    l (int): The length of one side of the cube\n\n    Returns:\n    int: The volume of the cube\n    \"\"\"\n    return l ** 3\n```"], "prompt_tokens": [272], "completion_tokens": [221], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_234_volume_cube"}
{"name": "mbpp_89_closest_num", "language": "Python3", "prompt": "def closest_num(N: int) -> int:\n    \"\"\"\n\tWrite a function to find the closest smaller number than n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "closest_num", "test": "def check(candidate):\n    assert candidate(11) == 10\n    assert candidate(7) == 6\n    assert candidate(12) == 11\n\ndef test_check():\n    check(closest_num)\n\ntest_check()\n", "sample_io": ["assert closest_num(11) == 10"], "source_codes": ["\ndef closest_num(N: int) -> int:\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \n    Parameters:\n    N (int): The integer number to find closest smaller number than it.\n    \n    Returns:\n    int: The closest smaller integer than N.\n    \"\"\"\n    return N - 1\n\n\n"], "responses": ["```python\ndef closest_num(N: int) -> int:\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \n    Parameters:\n    N (int): The integer number to find closest smaller number than it.\n    \n    Returns:\n    int: The closest smaller integer than N.\n    \"\"\"\n    return N - 1\n```"], "prompt_tokens": [291], "completion_tokens": [248], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_89_closest_num"}
{"name": "mbpp_245_max_sum", "language": "Python3", "prompt": "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sum", "test": "def check(candidate):\n    assert candidate([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n    assert candidate([80, 60, 30, 40, 20, 10]) == 210\n    assert candidate([2, 3, 14, 16, 21, 23, 29, 30]) == 138\n\ndef test_check():\n    check(max_sum)\n\ntest_check()\n", "sample_io": ["assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"], "source_codes": ["\nfrom typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    inc = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    \n    dec = [0] * n\n    for i in reversed(range(n)):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    \n    max_sum_bitonic = float('-inf')\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])\n    \n    return max_sum_bitonic\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    inc = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    \n    dec = [0] * n\n    for i in reversed(range(n)):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    \n    max_sum_bitonic = float('-inf')\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])\n    \n    return max_sum_bitonic\n```"], "prompt_tokens": [1101], "completion_tokens": [1128], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_245_max_sum"}
{"name": "mbpp_237_check_occurences", "language": "Python3", "prompt": "from typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    \"\"\"\n\tWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_occurences", "test": "def check(candidate):\n    assert candidate([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == { (1, 3): 2, (2, 5): 2, (3, 6): 1 }\n    assert candidate([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]) == { (2, 4): 2, (3, 6): 2, (4, 7): 1 }\n    assert candidate([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]) == { (2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1 }\n\ndef test_check():\n    check(check_occurences)\n\ntest_check()\n", "sample_io": ["assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == { (1, 3): 2, (2, 5): 2, (3, 6): 1 }"], "source_codes": ["\nfrom typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict\n```"], "prompt_tokens": [583], "completion_tokens": [469], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_237_check_occurences"}
{"name": "mbpp_77_is_Diff", "language": "Python3", "prompt": "def is_Diff(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to find whether a number is divisible by 11.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Diff", "test": "def check(candidate):\n    assert candidate(12345) == False\n    assert candidate(1212112) == True\n    assert candidate(1212) == False\n\ndef test_check():\n    check(is_Diff)\n\ntest_check()\n", "sample_io": ["assert is_Diff(12345) == False"], "source_codes": ["\ndef is_Diff(n: int) -> bool:\n    s = str(abs(n))\n    odd_sum = 0\n    even_sum = 0\n    s_reversed = s[::-1]\n\n    for i, digit in enumerate(s_reversed):\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n\n    return (odd_sum - even_sum) % 11 == 0\n\n\n"], "responses": ["```python\ndef is_Diff(n: int) -> bool:\n    s = str(abs(n))\n    odd_sum = 0\n    even_sum = 0\n    s_reversed = s[::-1]\n\n    for i, digit in enumerate(s_reversed):\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n\n    return (odd_sum - even_sum) % 11 == 0\n```"], "prompt_tokens": [527], "completion_tokens": [505], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_77_is_Diff"}
{"name": "mbpp_123_amicable_numbers_sum", "language": "Python3", "prompt": "def amicable_numbers_sum(limit: int) -> int:\n    \"\"\"\n\tWrite a function to sum all amicable numbers from 1 to a specified number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "amicable_numbers_sum", "test": "def check(candidate):\n    assert candidate(999) == 504\n    assert candidate(9999) == 31626\n    assert candidate(99) == 0\n\ndef test_check():\n    check(amicable_numbers_sum)\n\ntest_check()\n", "sample_io": ["assert amicable_numbers_sum(999) == 504"], "source_codes": ["\ndef amicable_numbers_sum(limit: int) -> int:\n    def sum_proper_divisors(n: int) -> int:\n        if n == 1:\n            return 0\n        total = 1\n        i = 2\n        while i * i <= n:\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n            i += 1\n        return total\n\n    divisor_sums = [0] * (limit + 1)\n    for num in range(1, limit + 1):\n        divisor_sums[num] = sum_proper_divisors(num)\n\n    amicable_sum = 0\n    for a in range(2, limit + 1):\n        b = divisor_sums[a]\n        if b != a and b <= limit and divisor_sums[b] == a:\n            amicable_sum += a\n\n    return amicable_sum\n\n\n"], "responses": ["```python\ndef amicable_numbers_sum(limit: int) -> int:\n    def sum_proper_divisors(n: int) -> int:\n        if n == 1:\n            return 0\n        total = 1\n        i = 2\n        while i * i <= n:\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n            i += 1\n        return total\n\n    divisor_sums = [0] * (limit + 1)\n    for num in range(1, limit + 1):\n        divisor_sums[num] = sum_proper_divisors(num)\n\n    amicable_sum = 0\n    for a in range(2, limit + 1):\n        b = divisor_sums[a]\n        if b != a and b <= limit and divisor_sums[b] == a:\n            amicable_sum += a\n\n    return amicable_sum\n```"], "prompt_tokens": [789], "completion_tokens": [863], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_123_amicable_numbers_sum"}
{"name": "mbpp_420_cube_Sum", "language": "Python3", "prompt": "def cube_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the cube sum of first n even natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cube_Sum", "test": "def check(candidate):\n    assert candidate(2) == 72\n    assert candidate(3) == 288\n    assert candidate(4) == 800\n\ndef test_check():\n    check(cube_Sum)\n\ntest_check()\n", "sample_io": ["assert cube_Sum(2) == 72"], "source_codes": ["\ndef cube_Sum(n: int) -> int:\n    \"\"\"\n    Returns the cube sum of the first n even natural numbers.\n    \"\"\"\n    return 2 * (n ** 2) * ((n + 1) ** 2)\n\n\n"], "responses": ["```python\ndef cube_Sum(n: int) -> int:\n    \"\"\"\n    Returns the cube sum of the first n even natural numbers.\n    \"\"\"\n    return 2 * (n ** 2) * ((n + 1) ** 2)\n```"], "prompt_tokens": [573], "completion_tokens": [502], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_420_cube_Sum"}
{"name": "mbpp_585_expensive_items", "language": "Python3", "prompt": "from typing import List, Dict, Union\n\ndef expensive_items(items: List[Dict[str, Union[str, float]]], n: int) -> List[Dict[str, Union[str, float]]]:\n    \"\"\"\n\tWrite a function to find the n most expensive items in a given dataset.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "expensive_items", "test": "def check(candidate):\n    assert candidate([{ 'name': 'Item-1', 'price': 101.1 }, { 'name': 'Item-2', 'price': 555.22 }], 1) == [{ 'name': 'Item-2', 'price': 555.22 }]\n    assert candidate([{ 'name': 'Item-1', 'price': 101.1 }, { 'name': 'Item-2', 'price': 555.22 }, { 'name': 'Item-3', 'price': 45.09 }], 2) == [{ 'name': 'Item-2', 'price': 555.22 }, { 'name': 'Item-1', 'price': 101.1 }]\n    assert candidate([{ 'name': 'Item-1', 'price': 101.1 }, { 'name': 'Item-2', 'price': 555.22 }, { 'name': 'Item-3', 'price': 45.09 }, { 'name': 'Item-4', 'price': 22.75 }], 1) == [{ 'name': 'Item-2', 'price': 555.22 }]\n\ndef test_check():\n    check(expensive_items)\n\ntest_check()\n", "sample_io": ["assert expensive_items([{ 'name': 'Item-1', 'price': 101.1 }, { 'name': 'Item-2', 'price': 555.22 }], 1) == [{ 'name': 'Item-2', 'price': 555.22 }]"], "source_codes": ["\nfrom typing import List, Dict, Union\n\ndef expensive_items(items: List[Dict[str, Union[str, float]]], n: int) -> List[Dict[str, Union[str, float]]]:\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n\n    Args:\n    items (List[Dict[str, Union[str, float]]]): List of items with at least a 'price' field.\n    n (int): Number of top expensive items to return.\n\n    Returns:\n    List[Dict[str, Union[str, float]]]: Top n expensive items sorted by price descending.\n    \"\"\"\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]\n\n\n"], "responses": ["```python\nfrom typing import List, Dict, Union\n\ndef expensive_items(items: List[Dict[str, Union[str, float]]], n: int) -> List[Dict[str, Union[str, float]]]:\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n\n    Args:\n    items (List[Dict[str, Union[str, float]]]): List of items with at least a 'price' field.\n    n (int): Number of top expensive items to return.\n\n    Returns:\n    List[Dict[str, Union[str, float]]]: Top n expensive items sorted by price descending.\n    \"\"\"\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]\n```"], "prompt_tokens": [602], "completion_tokens": [575], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_585_expensive_items"}
{"name": "mbpp_20_is_woodall", "language": "Python3", "prompt": "def is_woodall(x: int) -> bool:\n    \"\"\"\n\tWrite a function to check if the given number is woodball or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_woodall", "test": "def check(candidate):\n    assert candidate(383) == True\n    assert candidate(254) == False\n    assert candidate(200) == False\n\ndef test_check():\n    check(is_woodall)\n\ntest_check()\n", "sample_io": ["assert is_woodall(383) == True"], "source_codes": ["\ndef is_woodall(x: int) -> bool:\n    \"\"\"\n    Check if a number x is a Woodall number, i.e., if there exists an integer n >= 1\n    such that x = n * 2^n - 1.\n    \"\"\"\n    if x < 0:\n        return False  # Woodall numbers are non-negative\n\n    target = x + 1\n    n = 1\n    while True:\n        val = n * (2 ** n)\n        if val == target:\n            return True\n        if val > target:\n            return False\n        n += 1\n\n\n"], "responses": ["```python\ndef is_woodall(x: int) -> bool:\n    \"\"\"\n    Check if a number x is a Woodall number, i.e., if there exists an integer n >= 1\n    such that x = n * 2^n - 1.\n    \"\"\"\n    if x < 0:\n        return False  # Woodall numbers are non-negative\n\n    target = x + 1\n    n = 1\n    while True:\n        val = n * (2 ** n)\n        if val == target:\n            return True\n        if val > target:\n            return False\n        n += 1\n```"], "prompt_tokens": [529], "completion_tokens": [536], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_20_is_woodall"}
{"name": "mbpp_805_max_sum_list", "language": "Python3", "prompt": "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sum_list", "test": "def check(candidate):\n    assert candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12]\n    assert candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10]\n    assert candidate([[2, 3, 1]]) == [2, 3, 1]\n\ndef test_check():\n    check(max_sum_list)\n\ntest_check()\n", "sample_io": ["assert max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12]"], "source_codes": ["\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    If multiple lists have the same max sum, returns the first one.\n    If the input list is empty, returns an empty list.\n    \"\"\"\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    max_list = []\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n            \n    return max_list\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    If multiple lists have the same max sum, returns the first one.\n    If the input list is empty, returns an empty list.\n    \"\"\"\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    max_list = []\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n            \n    return max_list\n```"], "prompt_tokens": [618], "completion_tokens": [603], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_805_max_sum_list"}
{"name": "mbpp_806_max_run_uppercase", "language": "Python3", "prompt": "def max_run_uppercase(test_str: str) -> int:\n    \"\"\"\n\tWrite a function to find maximum run of uppercase characters in the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_run_uppercase", "test": "def check(candidate):\n    assert candidate('GeMKSForGERksISBESt') == 5\n    assert candidate('PrECIOusMOVemENTSYT') == 6\n    assert candidate('GooGLEFluTTER') == 4\n\ndef test_check():\n    check(max_run_uppercase)\n\ntest_check()\n", "sample_io": ["assert max_run_uppercase('GeMKSForGERksISBESt') == 5"], "source_codes": ["\ndef max_run_uppercase(test_str: str) -> int:\n    \"\"\"\n    Find maximum run of uppercase characters in the given string.\n    \n    Args:\n    test_str (str): Input string.\n    \n    Returns:\n    int: Maximum number of consecutive uppercase letters.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run\n\n\n"], "responses": ["```python\ndef max_run_uppercase(test_str: str) -> int:\n    \"\"\"\n    Find maximum run of uppercase characters in the given string.\n    \n    Args:\n    test_str (str): Input string.\n    \n    Returns:\n    int: Maximum number of consecutive uppercase letters.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run\n```"], "prompt_tokens": [512], "completion_tokens": [509], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_806_max_run_uppercase"}
{"name": "mbpp_455_check_monthnumb_number", "language": "Python3", "prompt": "def check_monthnumb_number(monthnum2: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given month number contains 31 days or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_455_check_monthnumb_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_monthnumb_number", "test": "def check(candidate):\n    assert candidate(5) == True\n    assert candidate(2) == False\n    assert candidate(6) == False\n\ndef test_check():\n    check(check_monthnumb_number)\n\ntest_check()\n", "sample_io": ["assert check_monthnumb_number(5) == True"], "source_codes": ["\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    \"\"\"\n    Check whether the given month number has 31 days.\n\n    Parameters:\n    monthnum2 (int): The month number (1-12).\n\n    Returns:\n    bool: True if the month has 31 days, False otherwise.\n    \"\"\"\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n\n    if 1 <= monthnum2 <= 12:\n        return monthnum2 in months_with_31_days\n    else:\n        return False\n\n\n"], "responses": ["```python\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    \"\"\"\n    Check whether the given month number has 31 days.\n\n    Parameters:\n    monthnum2 (int): The month number (1-12).\n\n    Returns:\n    bool: True if the month has 31 days, False otherwise.\n    \"\"\"\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n\n    if 1 <= monthnum2 <= 12:\n        return monthnum2 in months_with_31_days\n    else:\n        return False\n```"], "prompt_tokens": [456], "completion_tokens": [451], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_455_check_monthnumb_number"}
{"name": "mbpp_577_last_Digit_Factorial", "language": "Python3", "prompt": "def last_Digit_Factorial(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the last digit in factorial of a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "last_Digit_Factorial", "test": "def check(candidate):\n    assert candidate(4) == 4\n    assert candidate(21) == 0\n    assert candidate(30) == 0\n\ndef test_check():\n    check(last_Digit_Factorial)\n\ntest_check()\n", "sample_io": ["assert last_Digit_Factorial(4) == 4"], "source_codes": ["\ndef last_Digit_Factorial(n: int) -> int:\n    if n >= 5:\n        return 0\n    else:\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial *= i\n        return factorial % 10\n\n\n"], "responses": ["```python\ndef last_Digit_Factorial(n: int) -> int:\n    if n >= 5:\n        return 0\n    else:\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial *= i\n        return factorial % 10\n```"], "prompt_tokens": [554], "completion_tokens": [487], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_577_last_Digit_Factorial"}
{"name": "mbpp_555_difference", "language": "Python3", "prompt": "def difference(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "difference", "test": "def check(candidate):\n    assert candidate(3) == 30\n    assert candidate(5) == 210\n    assert candidate(2) == 6\n\ndef test_check():\n    check(difference)\n\ntest_check()\n", "sample_io": ["assert difference(3) == 30"], "source_codes": ["\ndef difference(n: int) -> int:\n    sum_n = n * (n + 1) // 2\n    sum_cubes = sum_n ** 2\n    return sum_cubes - sum_n\n\n\n"], "responses": ["```python\ndef difference(n: int) -> int:\n    sum_n = n * (n + 1) // 2\n    sum_cubes = sum_n ** 2\n    return sum_cubes - sum_n\n```"], "prompt_tokens": [522], "completion_tokens": [424], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_555_difference"}
{"name": "mbpp_456_reverse_string_list", "language": "Python3", "prompt": "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    \"\"\"\n\tWrite a function to reverse each string in a given list of string values.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "reverse_string_list", "test": "def check(candidate):\n    assert candidate(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    assert candidate(['john', 'amal', 'joel', 'george']) == ['nhoj', 'lama', 'leoj', 'egroeg']\n    assert candidate(['jack', 'john', 'mary']) == ['kcaj', 'nhoj', 'yram']\n\ndef test_check():\n    check(reverse_string_list)\n\ntest_check()\n", "sample_io": ["assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"], "source_codes": ["\nfrom typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]\n\n# Example usage\nif __name__ == \"__main__\":\n    input_list = [\"hello\", \"world\", \"python\"]\n    print(reverse_string_list(input_list))  # Output: ['olleh', 'dlrow', 'nohtyp']\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]\n\n# Example usage\nif __name__ == \"__main__\":\n    input_list = [\"hello\", \"world\", \"python\"]\n    print(reverse_string_list(input_list))  # Output: ['olleh', 'dlrow', 'nohtyp']\n```"], "prompt_tokens": [345], "completion_tokens": [292], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_456_reverse_string_list"}
{"name": "mbpp_587_list_tuple", "language": "Python3", "prompt": "from typing import List, Any\n\ndef list_tuple(listx: List[int]) -> Any:\n    \"\"\"\n\tWrite a function to convert a list to a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_587_list_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "list_tuple", "test": "def check(candidate):\n    assert candidate([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)\n    assert candidate([2, 4, 5, 6, 2, 3, 4, 4, 7]) == (2, 4, 5, 6, 2, 3, 4, 4, 7)\n    assert candidate([58, 44, 56]) == (58, 44, 56)\n\ndef test_check():\n    check(list_tuple)\n\ntest_check()\n", "sample_io": ["assert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)"], "source_codes": ["\nfrom typing import List, Any\n\ndef list_tuple(listx: List[int]) -> Any:\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    result = tuple(listx)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef list_tuple(listx: List[int]) -> Any:\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    result = tuple(listx)\n    return result\n```"], "prompt_tokens": [322], "completion_tokens": [241], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_587_list_tuple"}
{"name": "mbpp_612_merge", "language": "Python3", "prompt": "from typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    \"\"\"\n\tWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_612_merge.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "merge", "test": "def check(candidate):\n    assert candidate([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n    assert candidate([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\n    assert candidate([['x', 'y', 'z'], ['a', 'b', 'c'], ['m', 'n', 'o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'], ['z', 'c', 'o']]\n\ndef test_check():\n    check(merge)\n\ntest_check()\n", "sample_io": ["assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"], "source_codes": ["\nfrom typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    first_elements, second_elements = zip(*lst)\n    return [list(first_elements), list(second_elements)]\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    first_elements, second_elements = zip(*lst)\n    return [list(first_elements), list(second_elements)]\n```"], "prompt_tokens": [511], "completion_tokens": [358], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_612_merge"}
{"name": "mbpp_12_sort_matrix", "language": "Python3", "prompt": "from typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_matrix", "test": "def check(candidate):\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    assert candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n\ndef test_check():\n    check(sort_matrix)\n\ntest_check()\n", "sample_io": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]"], "source_codes": ["\nfrom typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    sorted_matrix = sorted(M, key=sum)\n    return sorted_matrix\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    sorted_matrix = sorted(M, key=sum)\n    return sorted_matrix\n```"], "prompt_tokens": [475], "completion_tokens": [390], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_12_sort_matrix"}
{"name": "mbpp_584_find_adverbs", "language": "Python3", "prompt": "def find_adverbs(text: str) -> str:\n    \"\"\"\n\tWrite a function to find the first adverb ending with ly and its positions in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_adverbs", "test": "def check(candidate):\n    assert candidate('Clearly, he has no excuse for such behavior.') == '0-7: Clearly'\n    assert candidate('Please handle the situation carefuly') == '28-36: carefuly'\n    assert candidate('Complete the task quickly') == '18-25: quickly'\n\ndef test_check():\n    check(find_adverbs)\n\ntest_check()\n", "sample_io": ["assert find_adverbs('Clearly, he has no excuse for such behavior.') == '0-7: Clearly'"], "source_codes": ["\ndef find_adverbs(text: str) -> str:\n    \"\"\"\n    Write a function to find the first adverb ending with 'ly' and its start and end positions in the given string.\n    Returns a string showing the adverb and its positions or an appropriate message if none found.\n    \"\"\"\n    import re\n\n    pattern = re.compile(r'\\b\\w+ly\\b')\n\n    match = pattern.search(text)\n    if match:\n        adverb = match.group()\n        start_pos = match.start()\n        end_pos = match.end() - 1\n        return f\"'{adverb}' found at positions {start_pos} to {end_pos}\"\n    else:\n        return \"No adverb ending with 'ly' found.\"\n\n\n"], "responses": ["```python\ndef find_adverbs(text: str) -> str:\n    \"\"\"\n    Write a function to find the first adverb ending with 'ly' and its start and end positions in the given string.\n    Returns a string showing the adverb and its positions or an appropriate message if none found.\n    \"\"\"\n    import re\n\n    pattern = re.compile(r'\\b\\w+ly\\b')\n\n    match = pattern.search(text)\n    if match:\n        adverb = match.group()\n        start_pos = match.start()\n        end_pos = match.end() - 1\n        return f\"'{adverb}' found at positions {start_pos} to {end_pos}\"\n    else:\n        return \"No adverb ending with 'ly' found.\"\n```"], "prompt_tokens": [526], "completion_tokens": [547], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_584_find_adverbs"}
{"name": "mbpp_86_centered_hexagonal_number", "language": "Python3", "prompt": "def centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n\tWrite a function to find nth centered hexagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "centered_hexagonal_number", "test": "def check(candidate):\n    assert candidate(10) == 271\n    assert candidate(2) == 7\n    assert candidate(9) == 217\n\ndef test_check():\n    check(centered_hexagonal_number)\n\ntest_check()\n", "sample_io": ["assert centered_hexagonal_number(10) == 271"], "source_codes": ["\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Return the nth centered hexagonal number.\n    The formula is 3n(n-1) + 1.\n    \"\"\"\n    return 3 * n * (n - 1) + 1\n\nfor i in range(1, 6):\n    print(f\"Centered hexagonal number {i}: {centered_hexagonal_number(i)}\")\n\n\n"], "responses": ["```python\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Return the nth centered hexagonal number.\n    The formula is 3n(n-1) + 1.\n    \"\"\"\n    return 3 * n * (n - 1) + 1\n\nfor i in range(1, 6):\n    print(f\"Centered hexagonal number {i}: {centered_hexagonal_number(i)}\")\n```"], "prompt_tokens": [426], "completion_tokens": [400], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_86_centered_hexagonal_number"}
{"name": "mbpp_130_max_occurrences", "language": "Python3", "prompt": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_occurrences", "test": "def check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n", "sample_io": ["assert max_occurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2"], "source_codes": ["\nfrom typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    Returns the maximum frequency.\n    \"\"\"\n    if not nums:\n        return 0  # No elements, return 0\n    \n    count = Counter(nums)\n    max_count = max(count.values())\n    return max_count\n\n\n"], "responses": ["```python\nfrom typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    Returns the maximum frequency.\n    \"\"\"\n    if not nums:\n        return 0  # No elements, return 0\n    \n    count = Counter(nums)\n    max_count = max(count.values())\n    return max_count\n```"], "prompt_tokens": [399], "completion_tokens": [353], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_130_max_occurrences"}
{"name": "mbpp_580_extract_even", "language": "Python3", "prompt": "from typing import Tuple, Any\n\ndef extract_even(test_tuple: Tuple[int, int, Tuple[int, int, Tuple[int, int]], int, int]) -> Any:\n    \"\"\"\n\tWrite a function to remove uneven elements in the nested mixed tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_even", "test": "def check(candidate):\n    assert candidate((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n    assert candidate((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\n    assert candidate((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)\n\ndef test_check():\n    check(extract_even)\n\ntest_check()\n", "sample_io": ["assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)"], "source_codes": ["\nfrom typing import Tuple, Any\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n    result = []\n    for element in test_tuple:\n        if isinstance(element, int):\n            if element % 2 == 0:\n                result.append(element)\n        elif isinstance(element, tuple):\n            filtered = extract_even(element)\n            if filtered:\n                result.append(filtered)\n    return tuple(result)\n\n# Example usage\nif __name__ == \"__main__\":\n    test_input = (1, 2, (3, 4, (5, 6)), 7, 8)\n    print(extract_even(test_input))  # Output: (2, (4, (6,)), 8)\n\n\n"], "responses": ["```python\nfrom typing import Tuple, Any\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n    result = []\n    for element in test_tuple:\n        if isinstance(element, int):\n            if element % 2 == 0:\n                result.append(element)\n        elif isinstance(element, tuple):\n            filtered = extract_even(element)\n            if filtered:\n                result.append(filtered)\n    return tuple(result)\n\n# Example usage\nif __name__ == \"__main__\":\n    test_input = (1, 2, (3, 4, (5, 6)), 7, 8)\n    print(extract_even(test_input))  # Output: (2, (4, (6,)), 8)\n```"], "prompt_tokens": [549], "completion_tokens": [530], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_580_extract_even"}
{"name": "mbpp_742_area_tetrahedron", "language": "Python3", "prompt": "def area_tetrahedron(side: int) -> float:\n    \"\"\"\n\tWrite a function to caluclate the area of a tetrahedron.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "area_tetrahedron", "test": "def check(candidate):\n    assert candidate(3) == 15.588457268119894\n    assert candidate(20) == 692.8203230275509\n    assert candidate(10) == 173.20508075688772\n\ndef test_check():\n    check(area_tetrahedron)\n\ntest_check()\n", "sample_io": ["assert area_tetrahedron(3) == 15.588457268119894"], "source_codes": ["\nimport math\n\ndef area_tetrahedron(side: int) -> float:\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron given the side length.\n    \n    Parameters:\n    side (int): The length of a side of the tetrahedron.\n    \n    Returns:\n    float: The surface area of the tetrahedron.\n    \"\"\"\n    area_one_triangle = (math.sqrt(3) / 4) * (side ** 2)\n    total_area = 4 * area_one_triangle\n    return total_area\n\n\n"], "responses": ["```python\nimport math\n\ndef area_tetrahedron(side: int) -> float:\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron given the side length.\n    \n    Parameters:\n    side (int): The length of a side of the tetrahedron.\n    \n    Returns:\n    float: The surface area of the tetrahedron.\n    \"\"\"\n    area_one_triangle = (math.sqrt(3) / 4) * (side ** 2)\n    total_area = 4 * area_one_triangle\n    return total_area\n```"], "prompt_tokens": [415], "completion_tokens": [400], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_742_area_tetrahedron"}
{"name": "mbpp_610_remove_kth_element", "language": "Python3", "prompt": "from typing import List\n\ndef remove_kth_element(list1: List[int], L: int) -> List[int]:\n    \"\"\"\n\tWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_kth_element", "test": "def check(candidate):\n    assert candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 3, 4, 4, 5, 1]\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4) == [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5) == [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]\n\ndef test_check():\n    check(remove_kth_element)\n\ntest_check()\n", "sample_io": ["assert remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 3, 4, 4, 5, 1]"], "source_codes": ["\nfrom typing import List\n\ndef remove_kth_element(list1: List[int], L: int) -> List[int]:\n    \"\"\"\n    This function takes a list and returns a new list with the L'th element removed.\n    Parameters:\n        list1 (List[int]): The input list.\n        L (int): The index of the element to remove (0-based indexing).\n    \n    Returns:\n        List[int]: The list with the L'th element removed.\n    \"\"\"\n    if L < 0 or L >= len(list1):\n        return list1\n    \n    return list1[:L] + list1[L+1:]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef remove_kth_element(list1: List[int], L: int) -> List[int]:\n    \"\"\"\n    This function takes a list and returns a new list with the L'th element removed.\n    Parameters:\n        list1 (List[int]): The input list.\n        L (int): The index of the element to remove (0-based indexing).\n    \n    Returns:\n        List[int]: The list with the L'th element removed.\n    \"\"\"\n    if L < 0 or L >= len(list1):\n        return list1\n    \n    return list1[:L] + list1[L+1:]\n```"], "prompt_tokens": [680], "completion_tokens": [643], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_610_remove_kth_element"}
{"name": "mbpp_394_check_distinct", "language": "Python3", "prompt": "from typing import List\n\ndef check_distinct(test_tup: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check if given list contains no duplicates.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_distinct", "test": "def check(candidate):\n    assert candidate([1, 4, 5, 6, 1, 4]) == False\n    assert candidate([1, 4, 5, 6]) == True\n    assert candidate([2, 3, 4, 5, 6]) == True\n\ndef test_check():\n    check(check_distinct)\n\ntest_check()\n", "sample_io": ["assert check_distinct([1, 4, 5, 6, 1, 4]) == False"], "source_codes": ["\nfrom typing import List\n\ndef check_distinct(test_tup: List[int]) -> bool:\n    \"\"\"\n    Write a function to check if given list contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_distinct(test_tup: List[int]) -> bool:\n    \"\"\"\n    Write a function to check if given list contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))\n```"], "prompt_tokens": [300], "completion_tokens": [221], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_394_check_distinct"}
{"name": "mbpp_793_last", "language": "Python3", "prompt": "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "last", "test": "def check(candidate):\n    assert candidate([1, 2, 3], 1) == 0\n    assert candidate([1, 1, 1, 2, 3, 4], 1) == 2\n    assert candidate([2, 3, 2, 3, 6, 8, 9], 3) == 3\n\ndef test_check():\n    check(last)\n\ntest_check()\n", "sample_io": ["assert last([1, 2, 3], 1) == 0"], "source_codes": ["\nfrom typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    \"\"\"\n    Find the last position of element x in a sorted array arr.\n    Returns the index of the last occurrence of x, or -1 if not found.\n    \"\"\"\n    low, high = 0, len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    \"\"\"\n    Find the last position of element x in a sorted array arr.\n    Returns the index of the last occurrence of x, or -1 if not found.\n    \"\"\"\n    low, high = 0, len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n```"], "prompt_tokens": [604], "completion_tokens": [611], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_793_last"}
{"name": "mbpp_728_sum_list", "language": "Python3", "prompt": "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_list", "test": "def check(candidate):\n    assert candidate([10, 20, 30], [15, 25, 35]) == [25, 45, 65]\n    assert candidate([1, 2, 3], [5, 6, 7]) == [6, 8, 10]\n    assert candidate([15, 20, 30], [15, 45, 75]) == [30, 65, 105]\n\ndef test_check():\n    check(sum_list)\n\ntest_check()\n", "sample_io": ["assert sum_list([10, 20, 30], [15, 25, 35]) == [25, 45, 65]"], "source_codes": ["\nfrom typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    \"\"\"\n    Write a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n]\n    and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Both lists must have the same length\")\n    \n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a + b)\n    \n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    \"\"\"\n    Write a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n]\n    and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Both lists must have the same length\")\n    \n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a + b)\n    \n    return result\n```"], "prompt_tokens": [505], "completion_tokens": [432], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_728_sum_list"}
{"name": "mbpp_566_sum_digits", "language": "Python3", "prompt": "def sum_digits(n: int) -> int:\n    \"\"\"\n\tWrite a function to get the sum of the digits of a non-negative integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_digits", "test": "def check(candidate):\n    assert candidate(345) == 12\n    assert candidate(12) == 3\n    assert candidate(97) == 16\n\ndef test_check():\n    check(sum_digits)\n\ntest_check()\n", "sample_io": ["assert sum_digits(345) == 12"], "source_codes": ["\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n\n\n"], "responses": ["```python\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n```"], "prompt_tokens": [350], "completion_tokens": [292], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_566_sum_digits"}
{"name": "mbpp_290_max_length", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_length(list1: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\"\n\tWrite a function to find the list of maximum length in a list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_length", "test": "def check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])\n    assert candidate([[1], [5, 7], [10, 12, 14, 15]]) == (4, [10, 12, 14, 15])\n    assert candidate([[5], [15, 20, 25]]) == (3, [15, 20, 25])\n\ndef test_check():\n    check(max_length)\n\ntest_check()\n", "sample_io": ["assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_length(list1: List[List[int]]) -> Tuple[int, List[int]]:\n    max_len = 0\n    max_list = []\n\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    \n    return max_len, max_list\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_length(list1: List[List[int]]) -> Tuple[int, List[int]]:\n    max_len = 0\n    max_list = []\n\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    \n    return max_len, max_list\n```"], "prompt_tokens": [563], "completion_tokens": [491], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_290_max_length"}
{"name": "mbpp_413_extract_nth_element", "language": "Python3", "prompt": "from typing import List, Tuple, Any\n\ndef extract_nth_element(list1: List[Tuple[str, int, int]], n: int) -> List[Any]:\n    \"\"\"\n\tWrite a function to extract the nth element from a given list of tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_413_extract_nth_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_nth_element", "test": "def check(candidate):\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2) == [99, 96, 94, 98]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1) == [98, 97, 91, 94]\n\ndef test_check():\n    check(extract_nth_element)\n\ntest_check()\n", "sample_io": ["assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"], "source_codes": ["\nfrom typing import List, Tuple, Any\n\ndef extract_nth_element(list1: List[Tuple[str, int, int]], n: int) -> List[Any]:\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \n    Parameters:\n    list1 (List[Tuple[str, int, int]]): List of tuples from which elements are extracted.\n    n (int): Index of the element to extract from each tuple.\n    \n    Returns:\n    List[Any]: A list containing the nth element from each tuple.\n    \"\"\"\n    return [t[n] for t in list1]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple, Any\n\ndef extract_nth_element(list1: List[Tuple[str, int, int]], n: int) -> List[Any]:\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \n    Parameters:\n    list1 (List[Tuple[str, int, int]]): List of tuples from which elements are extracted.\n    n (int): Index of the element to extract from each tuple.\n    \n    Returns:\n    List[Any]: A list containing the nth element from each tuple.\n    \"\"\"\n    return [t[n] for t in list1]\n```"], "prompt_tokens": [536], "completion_tokens": [498], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_413_extract_nth_element"}
{"name": "mbpp_628_replace_spaces", "language": "Python3", "prompt": "def replace_spaces(string: str) -> str:\n    \"\"\"\n\tWrite a function to replace all spaces in the given string with '%20'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_628_replace_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_spaces", "test": "def check(candidate):\n    assert candidate('My Name is Dawood') == 'My%20Name%20is%20Dawood'\n    assert candidate('I am a Programmer') == 'I%20am%20a%20Programmer'\n    assert candidate('I love Coding') == 'I%20love%20Coding'\n\ndef test_check():\n    check(replace_spaces)\n\ntest_check()\n", "sample_io": ["assert replace_spaces('My Name is Dawood') == 'My%20Name%20is%20Dawood'"], "source_codes": ["\ndef replace_spaces(string: str) -> str:\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")\n\n\n"], "responses": ["```python\ndef replace_spaces(string: str) -> str:\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")\n```"], "prompt_tokens": [338], "completion_tokens": [260], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_628_replace_spaces"}
{"name": "mbpp_417_group_tuples", "language": "Python3", "prompt": "from typing import List\n\ndef group_tuples(Input: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to find common first element in given list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "group_tuples", "test": "def check(candidate):\n    assert candidate([['x', 'y'], ['x', 'z'], ['w', 't']]) == [['x', 'y', 'z'], ['w', 't']]\n    assert candidate([['a', 'b'], ['a', 'c'], ['d', 'e']]) == [['a', 'b', 'c'], ['d', 'e']]\n    assert candidate([['f', 'g'], ['f', 'g'], ['h', 'i']]) == [['f', 'g', 'g'], ['h', 'i']]\n\ndef test_check():\n    check(group_tuples)\n\ntest_check()\n", "sample_io": ["assert group_tuples([['x', 'y'], ['x', 'z'], ['w', 't']]) == [['x', 'y', 'z'], ['w', 't']]"], "source_codes": ["\nfrom typing import List\nfrom collections import defaultdict\n\ndef group_tuples(Input: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n    Group the input lists by their first element and return a list of grouped strings \n    where each group contains lists with the same first element.\n    \"\"\"\n    \n    groups = defaultdict(list)\n    \n    for lst in Input:\n        if lst:\n            groups[lst[0]].append(lst)\n    \n    result = []\n    for group in groups.values():\n        flattened_group = []\n        for g in group:\n            flattened_group.extend(g)\n        result.append(flattened_group)\n\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\nfrom collections import defaultdict\n\ndef group_tuples(Input: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n    Group the input lists by their first element and return a list of grouped strings \n    where each group contains lists with the same first element.\n    \"\"\"\n    \n    groups = defaultdict(list)\n    \n    for lst in Input:\n        if lst:\n            groups[lst[0]].append(lst)\n    \n    result = []\n    for group in groups.values():\n        flattened_group = []\n        for g in group:\n            flattened_group.extend(g)\n        result.append(flattened_group)\n\n    return result\n```"], "prompt_tokens": [565], "completion_tokens": [558], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_417_group_tuples"}
{"name": "mbpp_286_max_sub_array_sum_repeated", "language": "Python3", "prompt": "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sub_array_sum_repeated", "test": "def check(candidate):\n    assert candidate([10, 20, -30, -1], 4, 3) == 30\n    assert candidate([-1, 10, 20], 3, 2) == 59\n    assert candidate([-1, -2, -3], 3, 3) == -1\n\ndef test_check():\n    check(max_sub_array_sum_repeated)\n\ntest_check()\n", "sample_io": ["assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30"], "source_codes": ["\nfrom typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    total_sum = sum(a)\n    max_kadane = kadane(a)\n\n    if k == 1:\n        return max_kadane\n\n    max_prefix_sum = float('-inf')\n    temp_sum = 0\n    for val in a:\n        temp_sum += val\n        max_prefix_sum = max(max_prefix_sum, temp_sum)\n\n    max_suffix_sum = float('-inf')\n    temp_sum = 0\n    for val in reversed(a):\n        temp_sum += val\n        max_suffix_sum = max(max_suffix_sum, temp_sum)\n\n    if total_sum <= 0:\n        return kadane(a * 2)\n    else:\n        return max(max_kadane, max_suffix_sum + (k - 2) * total_sum + max_prefix_sum)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    total_sum = sum(a)\n    max_kadane = kadane(a)\n\n    if k == 1:\n        return max_kadane\n\n    max_prefix_sum = float('-inf')\n    temp_sum = 0\n    for val in a:\n        temp_sum += val\n        max_prefix_sum = max(max_prefix_sum, temp_sum)\n\n    max_suffix_sum = float('-inf')\n    temp_sum = 0\n    for val in reversed(a):\n        temp_sum += val\n        max_suffix_sum = max(max_suffix_sum, temp_sum)\n\n    if total_sum <= 0:\n        return kadane(a * 2)\n    else:\n        return max(max_kadane, max_suffix_sum + (k - 2) * total_sum + max_prefix_sum)\n```"], "prompt_tokens": [1087], "completion_tokens": [1163], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_286_max_sub_array_sum_repeated"}
{"name": "mbpp_66_pos_count", "language": "Python3", "prompt": "from typing import List\n\ndef pos_count(list: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to count the number of positive numbers in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pos_count", "test": "def check(candidate):\n    assert candidate([1, -2, 3, -4]) == 2\n    assert candidate([3, 4, 5, -1]) == 3\n    assert candidate([1, 2, 3, 4]) == 4\n\ndef test_check():\n    check(pos_count)\n\ntest_check()\n", "sample_io": ["assert pos_count([1, -2, 3, -4]) == 2"], "source_codes": ["\nfrom typing import List\n\ndef pos_count(lst: List[int]) -> int:\n    return sum(1 for num in lst if num > 0)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef pos_count(lst: List[int]) -> int:\n    return sum(1 for num in lst if num > 0)\n```"], "prompt_tokens": [360], "completion_tokens": [262], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_66_pos_count"}
{"name": "mbpp_450_extract_string", "language": "Python3", "prompt": "from typing import List\n\ndef extract_string(str: List[str], l: int) -> List[str]:\n    \"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_string", "test": "def check(candidate):\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'], 6) == ['Python']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'], 9) == ['exercises']\n\ndef test_check():\n    check(extract_string)\n\ntest_check()\n", "sample_io": ["assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']"], "source_codes": ["\nfrom typing import List\n\ndef extract_string(str_list: List[str], l: int) -> List[str]:\n    \"\"\"\n    Extract strings of length 'l' from the list of strings.\n    \n    Parameters:\n    str_list (List[str]): List of strings from which to extract\n    l (int): The desired length of strings to extract\n    \n    Returns:\n    List[str]: List of strings of length 'l'\n    \"\"\"\n    result = []\n    for s in str_list:\n        if len(s) == l:\n            result.append(s)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef extract_string(str_list: List[str], l: int) -> List[str]:\n    \"\"\"\n    Extract strings of length 'l' from the list of strings.\n    \n    Parameters:\n    str_list (List[str]): List of strings from which to extract\n    l (int): The desired length of strings to extract\n    \n    Returns:\n    List[str]: List of strings of length 'l'\n    \"\"\"\n    result = []\n    for s in str_list:\n        if len(s) == l:\n            result.append(s)\n    return result\n```"], "prompt_tokens": [522], "completion_tokens": [494], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_450_extract_string"}
{"name": "mbpp_444_trim_tuple", "language": "Python3", "prompt": "from typing import List\n\ndef trim_tuple(test_list: List[List[int]], K: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to trim each list by k in the given lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "trim_tuple", "test": "def check(candidate):\n    assert candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2) == [[2], [9], [2], [2]]\n    assert candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1) == [[3, 2, 1], [4, 9, 2], [1, 2, 3], [8, 2, 1]]\n    assert candidate([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1) == [[8, 4], [8, 12], [1, 7], [6, 9]]\n\ndef test_check():\n    check(trim_tuple)\n\ntest_check()\n", "sample_io": ["assert trim_tuple([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2) == [[2], [9], [2], [2]]"], "source_codes": ["\nfrom typing import List\n\ndef trim_tuple(test_list: List[List[int]], K: int) -> List[List[int]]:\n    \"\"\"\n    Write a function to trim each list by k in the given lists.\n    \"\"\"\n    trimmed_lists = []\n    for sublist in test_list:\n        trimmed_lists.append(sublist[:-K] if K != 0 else sublist[:])\n    return trimmed_lists\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef trim_tuple(test_list: List[List[int]], K: int) -> List[List[int]]:\n    \"\"\"\n    Write a function to trim each list by k in the given lists.\n    \"\"\"\n    trimmed_lists = []\n    for sublist in test_list:\n        trimmed_lists.append(sublist[:-K] if K != 0 else sublist[:])\n    return trimmed_lists\n```"], "prompt_tokens": [644], "completion_tokens": [579], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_444_trim_tuple"}
{"name": "mbpp_439_multiple_to_single", "language": "Python3", "prompt": "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    \"\"\"\n\tWrite a function to join a list of multiple integers into a single integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "multiple_to_single", "test": "def check(candidate):\n    assert candidate([11, 33, 50]) == 113350\n    assert candidate([-1, 2, 3, 4, 5, 6]) == -123456\n    assert candidate([10, 15, 20, 25]) == 10152025\n\ndef test_check():\n    check(multiple_to_single)\n\ntest_check()\n", "sample_io": ["assert multiple_to_single([11, 33, 50]) == 113350"], "source_codes": ["\nfrom typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n    \"\"\"\n    joined_str = ''.join(str(num) for num in L)\n    return int(joined_str)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n    \"\"\"\n    joined_str = ''.join(str(num) for num in L)\n    return int(joined_str)\n```"], "prompt_tokens": [306], "completion_tokens": [229], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_439_multiple_to_single"}
{"name": "mbpp_162_sum_series", "language": "Python3", "prompt": "def sum_series(n: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_162_sum_series.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_series", "test": "def check(candidate):\n    assert candidate(6) == 12\n    assert candidate(10) == 30\n    assert candidate(9) == 25\n\ndef test_check():\n    check(sum_series)\n\ntest_check()\n", "sample_io": ["assert sum_series(6) == 12"], "source_codes": ["\ndef sum_series(n: int) -> int:\n    m = n // 2 + 1\n    return m * (n - m + 1)\n\n\n"], "responses": ["```python\ndef sum_series(n: int) -> int:\n    m = n // 2 + 1\n    return m * (n - m + 1)\n```"], "prompt_tokens": [771], "completion_tokens": [621], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_162_sum_series"}
{"name": "mbpp_224_count_Set_Bits", "language": "Python3", "prompt": "def count_Set_Bits(n: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Set_Bits", "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(4) == 1\n    assert candidate(6) == 2\n\ndef test_check():\n    check(count_Set_Bits)\n\ntest_check()\n", "sample_io": ["assert count_Set_Bits(2) == 1"], "source_codes": ["\ndef count_Set_Bits(n: int) -> int:\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count\n\n\n"], "responses": ["```python\ndef count_Set_Bits(n: int) -> int:\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count\n```"], "prompt_tokens": [441], "completion_tokens": [347], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_224_count_Set_Bits"}
{"name": "mbpp_309_maximum", "language": "Python3", "prompt": "def maximum(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a python function to find the maximum of two numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "maximum", "test": "def check(candidate):\n    assert candidate(5, 10) == 10\n    assert candidate(-1, -2) == -1\n    assert candidate(9, 7) == 9\n\ndef test_check():\n    check(maximum)\n\ntest_check()\n", "sample_io": ["assert maximum(5, 10) == 10"], "source_codes": ["\ndef maximum(a: int, b: int) -> int:\n    if a > b:\n        return a\n    else:\n        return b\n\n\n"], "responses": ["```python\ndef maximum(a: int, b: int) -> int:\n    if a > b:\n        return a\n    else:\n        return b\n```"], "prompt_tokens": [298], "completion_tokens": [211], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_309_maximum"}
{"name": "mbpp_632_move_zero", "language": "Python3", "prompt": "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "move_zero", "test": "def check(candidate):\n    assert candidate([1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0]\n    assert candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0]\n    assert candidate([0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0]\n\ndef test_check():\n    check(move_zero)\n\ntest_check()\n", "sample_io": ["assert move_zero([1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0]"], "source_codes": ["\nfrom typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    \"\"\"\n    Move all zeroes in the input list to the end, preserving the order of non-zero elements.\n    \"\"\"\n    non_zero = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    result = non_zero + [0] * zero_count\n    return result\n\n# Testing\nprint(move_zero([0, 1, 0, 3, 12]))  # Output: [1, 3, 12, 0, 0]\nprint(move_zero([0, 0, 1]))         # Output: [1, 0, 0]\nprint(move_zero([1, 2, 3]))         # Output: [1, 2, 3]\nprint(move_zero([0, 0, 0]))         # Output: [0, 0, 0]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    \"\"\"\n    Move all zeroes in the input list to the end, preserving the order of non-zero elements.\n    \"\"\"\n    non_zero = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    result = non_zero + [0] * zero_count\n    return result\n\n# Testing\nprint(move_zero([0, 1, 0, 3, 12]))  # Output: [1, 3, 12, 0, 0]\nprint(move_zero([0, 0, 1]))         # Output: [1, 0, 0]\nprint(move_zero([1, 2, 3]))         # Output: [1, 2, 3]\nprint(move_zero([0, 0, 0]))         # Output: [0, 0, 0]\n```"], "prompt_tokens": [568], "completion_tokens": [634], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_632_move_zero"}
{"name": "mbpp_168_frequency", "language": "Python3", "prompt": "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to count the number of occurrences of a number in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "frequency", "test": "def check(candidate):\n    assert candidate([1, 2, 3], 4) == 0\n    assert candidate([1, 2, 2, 3, 3, 3, 4], 3) == 3\n    assert candidate([0, 1, 2, 3, 1, 2], 1) == 2\n\ndef test_check():\n    check(frequency)\n\ntest_check()\n", "sample_io": ["assert frequency([1, 2, 3], 4) == 0"], "source_codes": ["\nfrom typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)\n```"], "prompt_tokens": [529], "completion_tokens": [415], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_168_frequency"}
{"name": "mbpp_749_sort_numeric_strings", "language": "Python3", "prompt": "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_numeric_strings", "test": "def check(candidate):\n    assert candidate(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    assert candidate(['2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2']) == [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n    assert candidate(['1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11']) == [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n\ndef test_check():\n    check(sort_numeric_strings)\n\ntest_check()\n", "sample_io": ["assert sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]"], "source_codes": ["\nfrom typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a given list of strings of numbers numerically.\n\t\"\"\"\n    sorted_nums_str = sorted(nums_str, key=int)\n    return [int(num) for num in sorted_nums_str]\n\n# Example usage:\nif __name__ == \"__main__\":\n    nums_str = [\"10\", \"2\", \"33\", \"4\"]\n    print(sort_numeric_strings(nums_str))  # Output: [2, 4, 10, 33]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a given list of strings of numbers numerically.\n\t\"\"\"\n    sorted_nums_str = sorted(nums_str, key=int)\n    return [int(num) for num in sorted_nums_str]\n\n# Example usage:\nif __name__ == \"__main__\":\n    nums_str = [\"10\", \"2\", \"33\", \"4\"]\n    print(sort_numeric_strings(nums_str))  # Output: [2, 4, 10, 33]\n```"], "prompt_tokens": [733], "completion_tokens": [677], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_749_sort_numeric_strings"}
{"name": "mbpp_97_frequency_lists", "language": "Python3", "prompt": "from typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    \"\"\"\n\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "frequency_lists", "test": "def check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == { 1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1 }\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == { 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1 }\n    assert candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]) == { 20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1 }\n\ndef test_check():\n    check(frequency_lists)\n\ntest_check()\n", "sample_io": ["assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == { 1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1 }"], "source_codes": ["\nfrom typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n    \n    # Count frequency of each element\n    frequency = Counter(flattened_list)\n    \n    # Convert Counter to dictionary and return\n    return dict(frequency)\n\n\n"], "responses": ["```python\nfrom typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n    \n    # Count frequency of each element\n    frequency = Counter(flattened_list)\n    \n    # Convert Counter to dictionary and return\n    return dict(frequency)\n```"], "prompt_tokens": [372], "completion_tokens": [329], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_97_frequency_lists"}
{"name": "mbpp_429_and_tuples", "language": "Python3", "prompt": "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to extract the elementwise and tuples from the given two tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "and_tuples", "test": "def check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    assert candidate((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\n    assert candidate((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n\ndef test_check():\n    check(and_tuples)\n\ntest_check()\n", "sample_io": ["assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"], "source_codes": ["\nfrom typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n\n\n# Testing\nprint(and_tuples((1, 2, 3, 4), (4, 3, 2, 1)))  # Output: (0, 2, 2, 0)\nprint(and_tuples((15, 7, 8, 10), (5, 14, 2, 8)))  # Output: (5, 6, 0, 8)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n\n\n# Testing\nprint(and_tuples((1, 2, 3, 4), (4, 3, 2, 1)))  # Output: (0, 2, 2, 0)\nprint(and_tuples((15, 7, 8, 10), (5, 14, 2, 8)))  # Output: (5, 6, 0, 8)\n```"], "prompt_tokens": [632], "completion_tokens": [618], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_429_and_tuples"}
{"name": "mbpp_759_is_decimal", "language": "Python3", "prompt": "def is_decimal(num: str) -> bool:\n    \"\"\"\n\tWrite a function to check whether a given string is a decimal number with a precision of 2.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_decimal", "test": "def check(candidate):\n    assert candidate('123.11') == True\n    assert candidate('e666.86') == False\n    assert candidate('3.124587') == False\n    assert candidate('1.11') == True\n    assert candidate('1.1.11') == False\n\ndef test_check():\n    check(is_decimal)\n\ntest_check()\n", "sample_io": ["assert is_decimal('123.11') == True"], "source_codes": ["\nimport re\n\ndef is_decimal(num: str) -> bool:\n    \"\"\"\n    Check whether the string is a decimal number with precision of 2.\n    \"\"\"\n    pattern = r'^[+-]?\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, num))\n\n\n"], "responses": ["```python\nimport re\n\ndef is_decimal(num: str) -> bool:\n    \"\"\"\n    Check whether the string is a decimal number with precision of 2.\n    \"\"\"\n    pattern = r'^[+-]?\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, num))\n```"], "prompt_tokens": [409], "completion_tokens": [340], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_759_is_decimal"}
{"name": "mbpp_599_sum_average", "language": "Python3", "prompt": "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    \"\"\"\n\tWrite a function to find sum and average of first n natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_average", "test": "def check(candidate):\n    assert candidate(10) == (55, 5.5)\n    assert candidate(15) == (120, 8.0)\n    assert candidate(20) == (210, 10.5)\n\ndef test_check():\n    check(sum_average)\n\ntest_check()\n", "sample_io": ["assert sum_average(10) == (55, 5.5)"], "source_codes": ["\nfrom typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total_sum = number * (number + 1) // 2\n    avg = total_sum / number\n    return total_sum, avg\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total_sum = number * (number + 1) // 2\n    avg = total_sum / number\n    return total_sum, avg\n```"], "prompt_tokens": [395], "completion_tokens": [332], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_599_sum_average"}
{"name": "mbpp_804_is_product_even", "language": "Python3", "prompt": "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check whether the product of numbers in a list is even or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_804_is_product_even.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_product_even", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == True\n    assert candidate([1, 2, 1, 4]) == True\n    assert candidate([1, 1]) == False\n\ndef test_check():\n    check(is_product_even)\n\ntest_check()\n", "sample_io": ["assert is_product_even([1, 2, 3]) == True"], "source_codes": ["\nfrom typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    return any(num % 2 == 0 for num in arr)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    return any(num % 2 == 0 for num in arr)\n```"], "prompt_tokens": [372], "completion_tokens": [267], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_804_is_product_even"}
{"name": "mbpp_103_eulerian_num", "language": "Python3", "prompt": "def eulerian_num(n: int, m: int) -> int:\n    \"\"\"\n\tWrite a function to find the Eulerian number a(n, m).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "eulerian_num", "test": "def check(candidate):\n    assert candidate(3, 1) == 4\n    assert candidate(4, 1) == 11\n    assert candidate(5, 3) == 26\n\ndef test_check():\n    check(eulerian_num)\n\ntest_check()\n", "sample_io": ["assert eulerian_num(3, 1) == 4"], "source_codes": ["\ndef eulerian_num(n: int, m: int) -> int:\n    memo = {}\n\n    def helper(n, m):\n        if m < 0 or m >= n:\n            return 0\n        if n == 0 and m == 0:\n            return 1\n        if (n, m) in memo:\n            return memo[(n, m)]\n        \n        val = (n - m) * helper(n - 1, m - 1) + (m + 1) * helper(n - 1, m)\n        memo[(n, m)] = val\n        return val\n\n    return helper(n, m)\n\n\n"], "responses": ["```python\ndef eulerian_num(n: int, m: int) -> int:\n    memo = {}\n\n    def helper(n, m):\n        if m < 0 or m >= n:\n            return 0\n        if n == 0 and m == 0:\n            return 1\n        if (n, m) in memo:\n            return memo[(n, m)]\n        \n        val = (n - m) * helper(n - 1, m - 1) + (m + 1) * helper(n - 1, m)\n        memo[(n, m)] = val\n        return val\n\n    return helper(n, m)\n```"], "prompt_tokens": [709], "completion_tokens": [719], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_103_eulerian_num"}
{"name": "mbpp_391_convert_list_dictionary", "language": "Python3", "prompt": "from typing import List, Dict\n\ndef convert_list_dictionary(l1: List[str], l2: List[str], l3: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    \"\"\"\n\tWrite a function to convert more than one list to nested dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "convert_list_dictionary", "test": "def check(candidate):\n    assert candidate(['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92]) == [{ 'S001': { 'Adina Park': 85 } }, { 'S002': { 'Leyton Marsh': 98 } }, { 'S003': { 'Duncan Boyle': 89 } }, { 'S004': { 'Saim Richards': 92 } }]\n    assert candidate(['abc', 'def', 'ghi', 'jkl'], ['python', 'program', 'language', 'programs'], [100, 200, 300, 400]) == [{ 'abc': { 'python': 100 } }, { 'def': { 'program': 200 } }, { 'ghi': { 'language': 300 } }, { 'jkl': { 'programs': 400 } }]\n    assert candidate(['A1', 'A2', 'A3', 'A4'], ['java', 'C', 'C++', 'DBMS'], [10, 20, 30, 40]) == [{ 'A1': { 'java': 10 } }, { 'A2': { 'C': 20 } }, { 'A3': { 'C++': 30 } }, { 'A4': { 'DBMS': 40 } }]\n\ndef test_check():\n    check(convert_list_dictionary)\n\ntest_check()\n", "sample_io": ["assert convert_list_dictionary(['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92]) == [{ 'S001': { 'Adina Park': 85 } }]"], "source_codes": ["\nfrom typing import List, Dict\n\ndef convert_list_dictionary(l1: List[str], l2: List[str], l3: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    if not (len(l1) == len(l2) == len(l3)):\n        raise ValueError(\"All input lists must have the same length.\")\n    \n    result = []\n    for i in range(len(l1)):\n        result.append({l1[i]: {l2[i]: l3[i]}})\n    \n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Dict\n\ndef convert_list_dictionary(l1: List[str], l2: List[str], l3: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    if not (len(l1) == len(l2) == len(l3)):\n        raise ValueError(\"All input lists must have the same length.\")\n    \n    result = []\n    for i in range(len(l1)):\n        result.append({l1[i]: {l2[i]: l3[i]}})\n    \n    return result\n```"], "prompt_tokens": [787], "completion_tokens": [721], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_391_convert_list_dictionary"}
{"name": "mbpp_635_heap_sort", "language": "Python3", "prompt": "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "heap_sort", "test": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert candidate([7, 1, 9, 5]) == [1, 5, 7, 9]\n\ndef test_check():\n    check(heap_sort)\n\ntest_check()\n", "sample_io": ["assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"], "source_codes": ["\nfrom typing import List\n\ndef heapify(arr: List[int], n: int, i: int):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    n = len(iterable)\n    arr = iterable.copy()\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n\n    return arr\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef heapify(arr: List[int], n: int, i: int):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    n = len(iterable)\n    arr = iterable.copy()\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n\n    return arr\n```"], "prompt_tokens": [726], "completion_tokens": [822], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_635_heap_sort"}
{"name": "mbpp_270_sum_even_and_even_index", "language": "Python3", "prompt": "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of even numbers at even positions of a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_even_and_even_index", "test": "def check(candidate):\n    assert candidate([5, 6, 12, 1, 18, 8]) == 30\n    assert candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\n    assert candidate([5, 6, 12, 1]) == 12\n\ndef test_check():\n    check(sum_even_and_even_index)\n\ntest_check()\n", "sample_io": ["assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30"], "source_codes": ["\nfrom typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    \"\"\"\n    Find the sum of even numbers at even positions of a list.\n    \n    Args:\n    arr (List[int]): List of integers.\n    \n    Returns:\n    int: Sum of even numbers at even indices.\n    \"\"\"\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total\n\n\nprint(sum_even_and_even_index([1, 2, 3, 4, 6, 8, 10]))  # Output: 16\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    \"\"\"\n    Find the sum of even numbers at even positions of a list.\n    \n    Args:\n    arr (List[int]): List of integers.\n    \n    Returns:\n    int: Sum of even numbers at even indices.\n    \"\"\"\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total\n\n\nprint(sum_even_and_even_index([1, 2, 3, 4, 6, 8, 10]))  # Output: 16\n```"], "prompt_tokens": [434], "completion_tokens": [435], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_270_sum_even_and_even_index"}
{"name": "mbpp_787_text_match_three", "language": "Python3", "prompt": "def text_match_three(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an a followed by three 'b'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_three", "test": "def check(candidate):\n    assert candidate('ac') == False\n    assert candidate('dc') == False\n    assert candidate('abbbba') == True\n    assert candidate('caacabbbba') == True\n\ndef test_check():\n    check(text_match_three)\n\ntest_check()\n", "sample_io": ["assert text_match_three('ac') == False"], "source_codes": ["\ndef text_match_three(text: str) -> bool:\n    \"\"\"\n    Write a function that matches a string that has an 'a' followed by three 'b's.\n    \"\"\"\n    return \"abbb\" in text\n\n\n"], "responses": ["```python\ndef text_match_three(text: str) -> bool:\n    \"\"\"\n    Write a function that matches a string that has an 'a' followed by three 'b's.\n    \"\"\"\n    return \"abbb\" in text\n```"], "prompt_tokens": [382], "completion_tokens": [304], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_787_text_match_three"}
{"name": "mbpp_765_is_polite", "language": "Python3", "prompt": "def is_polite(n: int) -> int:\n    \"\"\"\n\tWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_polite", "test": "def check(candidate):\n    assert candidate(7) == 11\n    assert candidate(4) == 7\n    assert candidate(9) == 13\n\ndef test_check():\n    check(is_polite)\n\ntest_check()\n", "sample_io": ["assert is_polite(7) == 11"], "source_codes": ["\nimport math\n\ndef is_polite(n: int) -> int:\n    def polite_count(x):\n        if x == 0:\n            return 0\n        return x - (int(math.log2(x)) + 1)\n\n    low, high = 1, 2 * n\n    while low < high:\n        mid = (low + high) // 2\n        if polite_count(mid) >= n:\n            high = mid\n        else:\n            low = mid + 1\n    return low\n\n# Example:\n# print(is_polite(1))  # 3\n# print(is_polite(5))  # 9\n\n\n"], "responses": ["```python\nimport math\n\ndef is_polite(n: int) -> int:\n    def polite_count(x):\n        if x == 0:\n            return 0\n        return x - (int(math.log2(x)) + 1)\n\n    low, high = 1, 2 * n\n    while low < high:\n        mid = (low + high) // 2\n        if polite_count(mid) >= n:\n            high = mid\n        else:\n            low = mid + 1\n    return low\n\n# Example:\n# print(is_polite(1))  # 3\n# print(is_polite(5))  # 9\n```"], "prompt_tokens": [894], "completion_tokens": [901], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_765_is_polite"}
{"name": "mbpp_459_remove_uppercase", "language": "Python3", "prompt": "def remove_uppercase(str1: str) -> str:\n    \"\"\"\n\tWrite a function to remove uppercase substrings from a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_uppercase", "test": "def check(candidate):\n    assert candidate('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert candidate('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\n    assert candidate('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n\ndef test_check():\n    check(remove_uppercase)\n\ntest_check()\n", "sample_io": ["assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"], "source_codes": ["\nimport re\n\ndef remove_uppercase(str1: str) -> str:\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    return re.sub(r'[A-Z]+', '', str1)\n\n\n"], "responses": ["```python\nimport re\n\ndef remove_uppercase(str1: str) -> str:\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    return re.sub(r'[A-Z]+', '', str1)\n```"], "prompt_tokens": [332], "completion_tokens": [262], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_459_remove_uppercase"}
{"name": "mbpp_16_text_lowercase_underscore", "language": "Python3", "prompt": "def text_lowercase_underscore(text: str) -> bool:\n    \"\"\"\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_lowercase_underscore", "test": "def check(candidate):\n    assert candidate('aab_cbbbc') == True\n    assert candidate('aab_Abbbc') == False\n    assert candidate('Aaab_abbbc') == False\n\ndef test_check():\n    check(text_lowercase_underscore)\n\ntest_check()\n", "sample_io": ["assert text_lowercase_underscore('aab_cbbbc') == True"], "source_codes": ["\nimport re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    \"\"\"\n    Return True if the input string contains sequences of lowercase letters joined with an underscore,\n    False otherwise.\n    \"\"\"\n    pattern = r'[a-z]+_[a-z]+'\n    return re.search(pattern, text) is not None\n\n\n"], "responses": ["```python\nimport re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    \"\"\"\n    Return True if the input string contains sequences of lowercase letters joined with an underscore,\n    False otherwise.\n    \"\"\"\n    pattern = r'[a-z]+_[a-z]+'\n    return re.search(pattern, text) is not None\n```"], "prompt_tokens": [879], "completion_tokens": [805], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_16_text_lowercase_underscore"}
{"name": "mbpp_731_lateralsurface_cone", "language": "Python3", "prompt": "def lateralsurface_cone(r: int, h: int) -> float:\n    \"\"\"\n\tWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lateralsurface_cone", "test": "def check(candidate):\n    assert candidate(5, 12) == 204.20352248333654\n    assert candidate(10, 15) == 566.3586699569488\n    assert candidate(19, 17) == 1521.8090132193388\n\ndef test_check():\n    check(lateralsurface_cone)\n\ntest_check()\n", "sample_io": ["assert lateralsurface_cone(5, 12) == 204.20352248333654"], "source_codes": ["\nimport math\n\ndef lateralsurface_cone(r: int, h: int) -> float:\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \"\"\"\n    # Calculate the slant height\n    l = math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * l\n    return lateral_surface_area\n\n\n"], "responses": ["```python\nimport math\n\ndef lateralsurface_cone(r: int, h: int) -> float:\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \"\"\"\n    # Calculate the slant height\n    l = math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * l\n    return lateral_surface_area\n```"], "prompt_tokens": [482], "completion_tokens": [432], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_731_lateralsurface_cone"}
{"name": "mbpp_802_count_rotation", "language": "Python3", "prompt": "from typing import List\n\ndef count_rotation(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_rotation", "test": "def check(candidate):\n    assert candidate([3, 2, 1]) == 1\n    assert candidate([4, 5, 1, 2, 3]) == 2\n    assert candidate([7, 8, 9, 1, 2, 3]) == 3\n    assert candidate([1, 2, 3]) == 0\n    assert candidate([1, 3, 2]) == 2\n\ndef test_check():\n    check(count_rotation)\n\ntest_check()\n", "sample_io": ["assert count_rotation([3, 2, 1]) == 1"], "source_codes": ["\nfrom typing import List\n\ndef count_rotation(arr: List[int]) -> int:\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        if arr[low] <= arr[high]:\n            return low\n\n        mid = (low + high) // 2\n        next_idx = (mid + 1) % len(arr)\n        prev_idx = (mid - 1 + len(arr)) % len(arr)\n\n        if arr[mid] <= arr[next_idx] and arr[mid] <= arr[prev_idx]:\n            return mid\n\n        if arr[mid] >= arr[low]:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return 0\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_rotation(arr: List[int]) -> int:\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        if arr[low] <= arr[high]:\n            return low\n\n        mid = (low + high) // 2\n        next_idx = (mid + 1) % len(arr)\n        prev_idx = (mid - 1 + len(arr)) % len(arr)\n\n        if arr[mid] <= arr[next_idx] and arr[mid] <= arr[prev_idx]:\n            return mid\n\n        if arr[mid] >= arr[low]:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return 0\n```"], "prompt_tokens": [872], "completion_tokens": [849], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_802_count_rotation"}
{"name": "mbpp_782_odd_length_sum", "language": "Python3", "prompt": "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_length_sum", "test": "def check(candidate):\n    assert candidate([1, 2, 4]) == 14\n    assert candidate([1, 2, 1, 2]) == 15\n    assert candidate([1, 7]) == 8\n\ndef test_check():\n    check(odd_length_sum)\n\ntest_check()\n", "sample_io": ["assert odd_length_sum([1, 2, 4]) == 14"], "source_codes": ["\nfrom typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n\n    for i in range(n):\n        total_subarrays = (i + 1) * (n - i)\n        odd_count = (total_subarrays + 1) // 2\n        total_sum += arr[i] * odd_count\n\n    return total_sum\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n\n    for i in range(n):\n        total_subarrays = (i + 1) * (n - i)\n        odd_count = (total_subarrays + 1) // 2\n        total_sum += arr[i] * odd_count\n\n    return total_sum\n```"], "prompt_tokens": [1120], "completion_tokens": [1039], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_782_odd_length_sum"}
{"name": "mbpp_470_add_pairwise", "language": "Python3", "prompt": "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_pairwise", "test": "def check(candidate):\n    assert candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    assert candidate((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n    assert candidate((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n\ndef test_check():\n    check(add_pairwise)\n\ntest_check()\n", "sample_io": ["assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)"], "source_codes": ["\nfrom typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup) - 1))\n    return result\n\n# Example usage\nprint(add_pairwise((1, 2, 3, 4, 5)))  # Output: (3, 5, 7, 9)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup) - 1))\n    return result\n\n# Example usage\nprint(add_pairwise((1, 2, 3, 4, 5)))  # Output: (3, 5, 7, 9)\n```"], "prompt_tokens": [519], "completion_tokens": [478], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_470_add_pairwise"}
{"name": "mbpp_17_square_perimeter", "language": "Python3", "prompt": "def square_perimeter(a: int) -> int:\n    \"\"\"\n\tWrite a function that returns the perimeter of a square given its side length as input.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "square_perimeter", "test": "def check(candidate):\n    assert candidate(10) == 40\n    assert candidate(5) == 20\n    assert candidate(4) == 16\n\ndef test_check():\n    check(square_perimeter)\n\ntest_check()\n", "sample_io": ["assert square_perimeter(10) == 40"], "source_codes": ["\ndef square_perimeter(a: int) -> int:\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a\n\n\n"], "responses": ["```python\ndef square_perimeter(a: int) -> int:\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a\n```"], "prompt_tokens": [252], "completion_tokens": [168], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_17_square_perimeter"}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "Python3", "prompt": "def all_Bits_Set_In_The_Given_Range(n: int, l: int, r: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether all the bits are unset in the given range or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "all_Bits_Set_In_The_Given_Range", "test": "def check(candidate):\n    assert candidate(4, 1, 2) == True\n    assert candidate(17, 2, 4) == True\n    assert candidate(39, 4, 6) == False\n\ndef test_check():\n    check(all_Bits_Set_In_The_Given_Range)\n\ntest_check()\n", "sample_io": ["assert all_Bits_Set_In_The_Given_Range(4, 1, 2) == True"], "source_codes": ["\ndef all_Bits_Set_In_The_Given_Range(n: int, l: int, r: int) -> bool:\n    \"\"\"\n    Check whether all the bits are unset (0) in the given range [l, r] in integer n.\n    Bits are 1-indexed from the right (least significant bit).\n    Returns True if all bits in the range are unset, False otherwise.\n    \"\"\"\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    return (n & mask) == 0\n\n\n# Test cases\nif __name__ == \"__main__\":\n    # n = 68 (0b1000100), bits 2 to 4 are 0 0 0 -> True\n    print(all_Bits_Set_In_The_Given_Range(68, 2, 4))  # True\n\n    # n = 68 (0b1000100), bits 1 to 3 are 0 0 1 -> False\n    print(all_Bits_Set_In_The_Given_Range(68, 1, 3))  # False\n\n    # n = 0, any range should be True\n    print(all_Bits_Set_In_The_Given_Range(0, 1, 5))  # True\n\n    # n = 15 (0b1111), bits 1 to 4 are all 1, so False\n    print(all_Bits_Set_In_The_Given_Range(15, 1, 4))  # False\n\n    # n = 16 (0b10000), bits 2 to 5 are 0 0 0 1, so False for bits 2 to 5\n    print(all_Bits_Set_In_The_Given_Range(16, 2, 5))  # False\n\n    # n = 16 (0b10000), bits 1 to 4 are all 0, True\n    print(all_Bits_Set_In_The_Given_Range(16, 1, 4))  # True\n\n\n"], "responses": ["```python\ndef all_Bits_Set_In_The_Given_Range(n: int, l: int, r: int) -> bool:\n    \"\"\"\n    Check whether all the bits are unset (0) in the given range [l, r] in integer n.\n    Bits are 1-indexed from the right (least significant bit).\n    Returns True if all bits in the range are unset, False otherwise.\n    \"\"\"\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    return (n & mask) == 0\n\n\n# Test cases\nif __name__ == \"__main__\":\n    # n = 68 (0b1000100), bits 2 to 4 are 0 0 0 -> True\n    print(all_Bits_Set_In_The_Given_Range(68, 2, 4))  # True\n\n    # n = 68 (0b1000100), bits 1 to 3 are 0 0 1 -> False\n    print(all_Bits_Set_In_The_Given_Range(68, 1, 3))  # False\n\n    # n = 0, any range should be True\n    print(all_Bits_Set_In_The_Given_Range(0, 1, 5))  # True\n\n    # n = 15 (0b1111), bits 1 to 4 are all 1, so False\n    print(all_Bits_Set_In_The_Given_Range(15, 1, 4))  # False\n\n    # n = 16 (0b10000), bits 2 to 5 are 0 0 0 1, so False for bits 2 to 5\n    print(all_Bits_Set_In_The_Given_Range(16, 2, 5))  # False\n\n    # n = 16 (0b10000), bits 1 to 4 are all 0, True\n    print(all_Bits_Set_In_The_Given_Range(16, 1, 4))  # True\n```"], "prompt_tokens": [992], "completion_tokens": [1282], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_228_all_Bits_Set_In_The_Given_Range"}
{"name": "mbpp_240_replace_list", "language": "Python3", "prompt": "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    \"\"\"\n\tWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_240_replace_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_list", "test": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]\n    assert candidate([1, 2, 3, 4, 5], [5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n    assert candidate(['red', 'blue', 'green'], ['yellow']) == ['red', 'blue', 'yellow']\n\ndef test_check():\n    check(replace_list)\n\ntest_check()\n", "sample_io": ["assert replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]"], "source_codes": ["\nfrom typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    result = list1[:-1]\n    result.extend(list2)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    result = list1[:-1]\n    result.extend(list2)\n    return result\n```"], "prompt_tokens": [514], "completion_tokens": [389], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_240_replace_list"}
{"name": "mbpp_447_cube_nums", "language": "Python3", "prompt": "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find cubes of individual elements in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cube_nums", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    assert candidate([10, 20, 30]) == [1000, 8000, 27000]\n    assert candidate([12, 15]) == [1728, 3375]\n\ndef test_check():\n    check(cube_nums)\n\ntest_check()\n", "sample_io": ["assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"], "source_codes": ["\nfrom typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num ** 3 for num in nums]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num ** 3 for num in nums]\n```"], "prompt_tokens": [288], "completion_tokens": [208], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_447_cube_nums"}
{"name": "mbpp_261_division_elements", "language": "Python3", "prompt": "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "division_elements", "test": "def check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)\n    assert candidate((12, 6, 8, 16), (6, 3, 4, 4)) == (2, 2, 2, 4)\n    assert candidate((20, 14, 36, 18), (5, 7, 6, 9)) == (4, 2, 6, 2)\n\ndef test_check():\n    check(division_elements)\n\ntest_check()\n", "sample_io": ["assert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)"], "source_codes": ["\nfrom typing import Tuple\n\ndef division_elements(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \n    Returns a tuple of integer division results.\n    Raises ValueError if any element in the second tuple is zero.\n    \"\"\"\n    result = []\n    for a, b in zip(test_tup1, test_tup2):\n        if b == 0:\n            raise ValueError(\"Division by zero encountered in the second tuple.\")\n        result.append(a // b)\n    return tuple(result)\n\n# Example usage:\nprint(division_elements((10, 20, 30, 40), (2, 4, 5, 10)))  # Output: (5, 5, 6, 4)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef division_elements(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \n    Returns a tuple of integer division results.\n    Raises ValueError if any element in the second tuple is zero.\n    \"\"\"\n    result = []\n    for a, b in zip(test_tup1, test_tup2):\n        if b == 0:\n            raise ValueError(\"Division by zero encountered in the second tuple.\")\n        result.append(a // b)\n    return tuple(result)\n\n# Example usage:\nprint(division_elements((10, 20, 30, 40), (2, 4, 5, 10)))  # Output: (5, 5, 6, 4)\n```"], "prompt_tokens": [722], "completion_tokens": [718], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_261_division_elements"}
{"name": "mbpp_581_surface_Area", "language": "Python3", "prompt": "def surface_Area(b: int, s: int) -> int:\n    \"\"\"\n\tWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "surface_Area", "test": "def check(candidate):\n    assert candidate(3, 4) == 33\n    assert candidate(4, 5) == 56\n    assert candidate(1, 2) == 5\n\ndef test_check():\n    check(surface_Area)\n\ntest_check()\n", "sample_io": ["assert surface_Area(3, 4) == 33"], "source_codes": ["\nimport math\n\ndef surface_Area(b: int, s: int) -> int:\n    \"\"\"\n    Calculate the surface area of a square pyramid given base edge length (b) and height (s).\n\n    Parameters:\n    b (int): length of the base edge\n    s (int): height of the pyramid perpendicular to the base\n\n    Returns:\n    int: surface area of the square pyramid\n    \"\"\"\n    l = math.sqrt(s**2 + (b / 2)**2)\n    area = b**2 + 2 * b * l\n    return round(area)\n\n\n"], "responses": ["```python\nimport math\n\ndef surface_Area(b: int, s: int) -> int:\n    \"\"\"\n    Calculate the surface area of a square pyramid given base edge length (b) and height (s).\n\n    Parameters:\n    b (int): length of the base edge\n    s (int): height of the pyramid perpendicular to the base\n\n    Returns:\n    int: surface area of the square pyramid\n    \"\"\"\n    l = math.sqrt(s**2 + (b / 2)**2)\n    area = b**2 + 2 * b * l\n    return round(area)\n```"], "prompt_tokens": [642], "completion_tokens": [623], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_581_surface_Area"}
{"name": "mbpp_283_validate", "language": "Python3", "prompt": "def validate(n: int) -> bool:\n    \"\"\"\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "validate", "test": "def check(candidate):\n    assert candidate(1234) == True\n    assert candidate(51241) == False\n    assert candidate(321) == True\n\ndef test_check():\n    check(validate)\n\ntest_check()\n", "sample_io": ["assert validate(1234) == True"], "source_codes": ["\ndef validate(n: int) -> bool:\n    s = str(abs(n))\n    freq = {}\n    for digit in s:\n        freq[digit] = freq.get(digit, 0) + 1\n    for digit, count in freq.items():\n        if count > int(digit):\n            return False\n    return True\n\n\n"], "responses": ["```python\ndef validate(n: int) -> bool:\n    s = str(abs(n))\n    freq = {}\n    for digit in s:\n        freq[digit] = freq.get(digit, 0) + 1\n    for digit, count in freq.items():\n        if count > int(digit):\n            return False\n    return True\n```"], "prompt_tokens": [681], "completion_tokens": [607], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_283_validate"}
{"name": "mbpp_284_check_element", "language": "Python3", "prompt": "from typing import List, Any\n\ndef check_element(list: List[Any], element: Any) -> bool:\n    \"\"\"\n\tWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_284_check_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_element", "test": "def check(candidate):\n    assert candidate(['green', 'orange', 'black', 'white'], 'blue') == False\n    assert candidate([1, 2, 3, 4], 7) == False\n    assert candidate(['green', 'green', 'green', 'green'], 'green') == True\n\ndef test_check():\n    check(check_element)\n\ntest_check()\n", "sample_io": ["assert check_element(['green', 'orange', 'black', 'white'], 'blue') == False"], "source_codes": ["\nfrom typing import List, Any\n\ndef check_element(lst: List[Any], element: Any) -> bool:\n    return all(item == element for item in lst)\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef check_element(lst: List[Any], element: Any) -> bool:\n    return all(item == element for item in lst)\n```"], "prompt_tokens": [483], "completion_tokens": [355], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_284_check_element"}
{"name": "mbpp_101_kth_element", "language": "Python3", "prompt": "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    \"\"\"\n\tWrite a function to find the kth element in the given array using 1-based indexing.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "kth_element", "test": "def check(candidate):\n    assert candidate([12, 3, 5, 7, 19], 2) == 3\n    assert candidate([17, 24, 8, 23], 3) == 8\n    assert candidate([16, 21, 25, 36, 4], 4) == 36\n\ndef test_check():\n    check(kth_element)\n\ntest_check()\n", "sample_io": ["assert kth_element([12, 3, 5, 7, 19], 2) == 3"], "source_codes": ["\nfrom typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \n    Args:\n    arr (List[int]): List of integers.\n    k (int): The 1-based position of the element to retrieve.\n    \n    Returns:\n    int: The element at the kth position.\n    \n    Raises:\n    IndexError: If k is not within 1 and the length of the array.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise IndexError(\"k is out of bounds\")\n    return arr[k-1]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \n    Args:\n    arr (List[int]): List of integers.\n    k (int): The 1-based position of the element to retrieve.\n    \n    Returns:\n    int: The element at the kth position.\n    \n    Raises:\n    IndexError: If k is not within 1 and the length of the array.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise IndexError(\"k is out of bounds\")\n    return arr[k-1]\n```"], "prompt_tokens": [455], "completion_tokens": [448], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_101_kth_element"}
{"name": "mbpp_461_upper_ctr", "language": "Python3", "prompt": "def upper_ctr(str: str) -> int:\n    \"\"\"\n\tWrite a python function to count the upper case characters in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "upper_ctr", "test": "def check(candidate):\n    assert candidate('PYthon') == 1\n    assert candidate('BigData') == 1\n    assert candidate('program') == 0\n\ndef test_check():\n    check(upper_ctr)\n\ntest_check()\n", "sample_io": ["assert upper_ctr('PYthon') == 1"], "source_codes": ["\ndef upper_ctr(s: str) -> int:\n    \"\"\"\n    Count the uppercase characters in a given string.\n\n    :param s: Input string\n    :return: Number of uppercase characters in the string\n    \"\"\"\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n\n\n"], "responses": ["```python\ndef upper_ctr(s: str) -> int:\n    \"\"\"\n    Count the uppercase characters in a given string.\n\n    :param s: Input string\n    :return: Number of uppercase characters in the string\n    \"\"\"\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n```"], "prompt_tokens": [385], "completion_tokens": [339], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_461_upper_ctr"}
{"name": "mbpp_593_removezero_ip", "language": "Python3", "prompt": "def removezero_ip(ip: str) -> str:\n    \"\"\"\n\tWrite a function to remove leading zeroes from an ip address.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "removezero_ip", "test": "def check(candidate):\n    assert candidate('216.08.094.196') == '216.8.94.196'\n    assert candidate('12.01.024') == '12.1.24'\n    assert candidate('216.08.094.0196') == '216.8.94.196'\n\ndef test_check():\n    check(removezero_ip)\n\ntest_check()\n", "sample_io": ["assert removezero_ip('216.08.094.196') == '216.8.94.196'"], "source_codes": ["\ndef removezero_ip(ip: str) -> str:\n    parts = ip.split('.')\n    no_zero_parts = [str(int(part)) for part in parts]\n    return '.'.join(no_zero_parts)\n\n\n"], "responses": ["```python\ndef removezero_ip(ip: str) -> str:\n    parts = ip.split('.')\n    no_zero_parts = [str(int(part)) for part in parts]\n    return '.'.join(no_zero_parts)\n```"], "prompt_tokens": [425], "completion_tokens": [353], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_593_removezero_ip"}
{"name": "mbpp_788_new_tuple", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef new_tuple(test_list: List[str], test_str: str) -> Tuple[str, str, str]:\n    \"\"\"\n\tWrite a function to create a new tuple from the given string and list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "new_tuple", "test": "def check(candidate):\n    assert candidate(['WEB', 'is'], 'best') == ('WEB', 'is', 'best')\n    assert candidate(['We', 'are'], 'Developers') == ('We', 'are', 'Developers')\n    assert candidate(['Part', 'is'], 'Wrong') == ('Part', 'is', 'Wrong')\n\ndef test_check():\n    check(new_tuple)\n\ntest_check()\n", "sample_io": ["assert new_tuple(['WEB', 'is'], 'best') == ('WEB', 'is', 'best')"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef new_tuple(test_list: List[str], test_str: str) -> Tuple[str, str, str]:\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    The tuple contains first two elements from the list and the given string as the third element.\n    \"\"\"\n    if len(test_list) < 2:\n        raise ValueError(\"Input list must have at least two elements\")\n    return (test_list[0], test_list[1], test_str)\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef new_tuple(test_list: List[str], test_str: str) -> Tuple[str, str, str]:\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    The tuple contains first two elements from the list and the given string as the third element.\n    \"\"\"\n    if len(test_list) < 2:\n        raise ValueError(\"Input list must have at least two elements\")\n    return (test_list[0], test_list[1], test_str)\n```"], "prompt_tokens": [653], "completion_tokens": [605], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_788_new_tuple"}
{"name": "mbpp_777_find_sum", "language": "Python3", "prompt": "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of non-repeated elements in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_sum", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 1, 1, 4, 5, 6]) == 21\n    assert candidate([1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71\n    assert candidate([12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78\n\ndef test_check():\n    check(find_sum)\n\ntest_check()\n", "sample_io": ["assert find_sum([1, 2, 3, 1, 1, 4, 5, 6]) == 21"], "source_codes": ["\nfrom typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n\n    # Count the frequency of each element\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Sum elements which appeared only once\n    total = sum(num for num, count in freq.items() if count == 1)\n    return total\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n\n    # Count the frequency of each element\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Sum elements which appeared only once\n    total = sum(num for num, count in freq.items() if count == 1)\n    return total\n```"], "prompt_tokens": [388], "completion_tokens": [359], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_777_find_sum"}
{"name": "mbpp_586_split_Arr", "language": "Python3", "prompt": "from typing import List\n\ndef split_Arr(l: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "split_Arr", "test": "def check(candidate):\n    assert candidate([12, 10, 5, 6, 52, 36], 2) == [5, 6, 52, 36, 12, 10]\n    assert candidate([1, 2, 3, 4], 1) == [2, 3, 4, 1]\n    assert candidate([0, 1, 2, 3, 4, 5, 6, 7], 3) == [3, 4, 5, 6, 7, 0, 1, 2]\n\ndef test_check():\n    check(split_Arr)\n\ntest_check()\n", "sample_io": ["assert split_Arr([12, 10, 5, 6, 52, 36], 2) == [5, 6, 52, 36, 12, 10]"], "source_codes": ["\nfrom typing import List\n\ndef split_Arr(l: List[int], n: int) -> List[int]:\n    \"\"\"\n    Split a list at the nth element and add the first part to the end.\n\n    Parameters:\n    l (List[int]): The input list.\n    n (int): The index at which to split.\n\n    Returns:\n    List[int]: The list with first 'n' elements moved to the end.\n    \"\"\"\n    return l[n:] + l[:n]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef split_Arr(l: List[int], n: int) -> List[int]:\n    \"\"\"\n    Split a list at the nth element and add the first part to the end.\n\n    Parameters:\n    l (List[int]): The input list.\n    n (int): The index at which to split.\n\n    Returns:\n    List[int]: The list with first 'n' elements moved to the end.\n    \"\"\"\n    return l[n:] + l[:n]\n```"], "prompt_tokens": [646], "completion_tokens": [587], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_586_split_Arr"}
{"name": "mbpp_104_sort_sublists", "language": "Python3", "prompt": "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_sublists", "test": "def check(candidate):\n    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate([[' red ', 'green'], ['blue ', ' black'], [' orange', 'brown']]) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate([['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze']]) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n", "sample_io": ["assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"], "source_codes": ["\nfrom typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    return [sorted(sublist) for sublist in input_list]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    return [sorted(sublist) for sublist in input_list]\n```"], "prompt_tokens": [403], "completion_tokens": [317], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_104_sort_sublists"}
{"name": "mbpp_472_check_Consecutive", "language": "Python3", "prompt": "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_Consecutive", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 2, 3, 5, 6]) == False\n    assert candidate([1, 2, 1]) == False\n\ndef test_check():\n    check(check_Consecutive)\n\ntest_check()\n", "sample_io": ["assert check_Consecutive([1, 2, 3, 4, 5]) == True"], "source_codes": ["\nfrom typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    \"\"\"\n    Check whether the given list contains consecutive numbers.\n\n    Args:\n    l (List[int]): The input list of integers.\n\n    Returns:\n    bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    \n    l_sorted = sorted(l)\n    for i in range(len(l_sorted) - 1):\n        if l_sorted[i+1] - l_sorted[i] != 1:\n            return False\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    \"\"\"\n    Check whether the given list contains consecutive numbers.\n\n    Args:\n    l (List[int]): The input list of integers.\n\n    Returns:\n    bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    \n    l_sorted = sorted(l)\n    for i in range(len(l_sorted) - 1):\n        if l_sorted[i+1] - l_sorted[i] != 1:\n            return False\n    return True\n```"], "prompt_tokens": [454], "completion_tokens": [441], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_472_check_Consecutive"}
{"name": "mbpp_310_string_to_tuple", "language": "Python3", "prompt": "from typing import List\n\ndef string_to_tuple(str1: str) -> List[str]:\n    \"\"\"\n\tWrite a function to convert a given string to a list of characters.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_310_string_to_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "string_to_tuple", "test": "def check(candidate):\n    assert candidate('python 3.0') == ['p', 'y', 't', 'h', 'o', 'n', '3', '.', '0']\n    assert candidate('item1') == ['i', 't', 'e', 'm', '1']\n    assert candidate('15.10') == ['1', '5', '.', '1', '0']\n\ndef test_check():\n    check(string_to_tuple)\n\ntest_check()\n", "sample_io": ["assert string_to_tuple('python 3.0') == ['p', 'y', 't', 'h', 'o', 'n', '3', '.', '0']"], "source_codes": ["\nfrom typing import List\n\ndef string_to_tuple(str1: str) -> List[str]:\n    \"\"\"\n    Write a function to convert a given string to a list of characters.\n    \"\"\"\n    # Use list() to convert the string into a list of characters\n    return list(str1)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef string_to_tuple(str1: str) -> List[str]:\n    \"\"\"\n    Write a function to convert a given string to a list of characters.\n    \"\"\"\n    # Use list() to convert the string into a list of characters\n    return list(str1)\n```"], "prompt_tokens": [282], "completion_tokens": [208], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_310_string_to_tuple"}
{"name": "mbpp_266_lateralsurface_cube", "language": "Python3", "prompt": "def lateralsurface_cube(l: int) -> int:\n    \"\"\"\n\tWrite a function to find the lateral surface area of a cube given its side length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lateralsurface_cube", "test": "def check(candidate):\n    assert candidate(5) == 100\n    assert candidate(9) == 324\n    assert candidate(10) == 400\n\ndef test_check():\n    check(lateralsurface_cube)\n\ntest_check()\n", "sample_io": ["assert lateralsurface_cube(5) == 100"], "source_codes": ["\ndef lateralsurface_cube(l: int) -> int:\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    \n    Parameters:\n    l (int): The length of a side of the cube.\n    \n    Returns:\n    int: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * (l ** 2)\n\n\n"], "responses": ["```python\ndef lateralsurface_cube(l: int) -> int:\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    \n    Parameters:\n    l (int): The length of a side of the cube.\n    \n    Returns:\n    int: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * (l ** 2)\n```"], "prompt_tokens": [398], "completion_tokens": [347], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_266_lateralsurface_cube"}
{"name": "mbpp_271_even_Power_Sum", "language": "Python3", "prompt": "def even_Power_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "even_Power_Sum", "test": "def check(candidate):\n    assert candidate(2) == 1056\n    assert candidate(3) == 8832\n    assert candidate(1) == 32\n\ndef test_check():\n    check(even_Power_Sum)\n\ntest_check()\n", "sample_io": ["assert even_Power_Sum(2) == 1056"], "source_codes": ["\ndef even_Power_Sum(n: int) -> int:\n    return sum((2 * k) ** 5 for k in range(1, n + 1))\n\n\n"], "responses": ["```python\ndef even_Power_Sum(n: int) -> int:\n    return sum((2 * k) ** 5 for k in range(1, n + 1))\n```"], "prompt_tokens": [437], "completion_tokens": [322], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_271_even_Power_Sum"}
{"name": "mbpp_238_number_of_substrings", "language": "Python3", "prompt": "def number_of_substrings(str: str) -> int:\n    \"\"\"\n\tWrite a python function to count the number of non-empty substrings of a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "number_of_substrings", "test": "def check(candidate):\n    assert candidate('abc') == 6\n    assert candidate('abcd') == 10\n    assert candidate('abcde') == 15\n\ndef test_check():\n    check(number_of_substrings)\n\ntest_check()\n", "sample_io": ["assert number_of_substrings('abc') == 6"], "source_codes": ["\ndef number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) // 2\n\n\n"], "responses": ["```python\ndef number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) // 2\n```"], "prompt_tokens": [485], "completion_tokens": [390], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_238_number_of_substrings"}
{"name": "mbpp_592_sum_Of_product", "language": "Python3", "prompt": "def sum_Of_product(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_Of_product", "test": "def check(candidate):\n    assert candidate(3) == 15\n    assert candidate(4) == 56\n    assert candidate(1) == 1\n\ndef test_check():\n    check(sum_Of_product)\n\ntest_check()\n", "sample_io": ["assert sum_Of_product(3) == 15"], "source_codes": ["\nfrom math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total = 0\n    for k in range(n):\n        total += comb(n, k) * comb(n, k+1)\n    return total\n\n\n"], "responses": ["```python\nfrom math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total = 0\n    for k in range(n):\n        total += comb(n, k) * comb(n, k+1)\n    return total\n```"], "prompt_tokens": [684], "completion_tokens": [606], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_592_sum_Of_product"}
{"name": "mbpp_74_is_samepatterns", "language": "Python3", "prompt": "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    \"\"\"\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_samepatterns", "test": "def check(candidate):\n    assert candidate(['red', 'green', 'green'], ['a', 'b', 'b']) == True\n    assert candidate(['red', 'green', 'greenn'], ['a', 'b', 'b']) == False\n    assert candidate(['red', 'green', 'greenn'], ['a', 'b']) == False\n\ndef test_check():\n    check(is_samepatterns)\n\ntest_check()\n", "sample_io": ["assert is_samepatterns(['red', 'green', 'green'], ['a', 'b', 'b']) == True"], "source_codes": ["\nfrom typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    \n    pattern_to_color = {}\n    color_to_pattern = {}\n    \n    for p, c in zip(patterns, colors):\n        if p in pattern_to_color:\n            if pattern_to_color[p] != c:\n                return False\n        else:\n            pattern_to_color[p] = c\n        \n        if c in color_to_pattern:\n            if color_to_pattern[c] != p:\n                return False\n        else:\n            color_to_pattern[c] = p\n    \n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    \n    pattern_to_color = {}\n    color_to_pattern = {}\n    \n    for p, c in zip(patterns, colors):\n        if p in pattern_to_color:\n            if pattern_to_color[p] != c:\n                return False\n        else:\n            pattern_to_color[p] = c\n        \n        if c in color_to_pattern:\n            if color_to_pattern[c] != p:\n                return False\n        else:\n            color_to_pattern[c] = p\n    \n    return True\n```"], "prompt_tokens": [628], "completion_tokens": [618], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_74_is_samepatterns"}
{"name": "mbpp_415_max_Product", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"\n\tWrite a python function to find a pair with highest product from a given array of integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_Product", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8)\n    assert candidate([0, -1, -2, -4, 5, 0, -6]) == (-4, -6)\n    assert candidate([1, 2, 3]) == (2, 3)\n\ndef test_check():\n    check(max_Product)\n\ntest_check()\n", "sample_io": ["assert max_Product([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8)"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements.\")\n    \n    arr.sort()\n    \n    pair1 = (arr[0], arr[1])\n    pair2 = (arr[-2], arr[-1])\n\n    product1 = pair1[0] * pair1[1]\n    product2 = pair2[0] * pair2[1]\n\n    if product1 > product2:\n        return pair1\n    else:\n        return pair2\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements.\")\n    \n    arr.sort()\n    \n    pair1 = (arr[0], arr[1])\n    pair2 = (arr[-2], arr[-1])\n\n    product1 = pair1[0] * pair1[1]\n    product2 = pair2[0] * pair2[1]\n\n    if product1 > product2:\n        return pair1\n    else:\n        return pair2\n```"], "prompt_tokens": [664], "completion_tokens": [644], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_415_max_Product"}
{"name": "mbpp_781_count_divisors", "language": "Python3", "prompt": "def count_divisors(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_divisors", "test": "def check(candidate):\n    assert candidate(10) == True\n    assert candidate(100) == False\n    assert candidate(125) == True\n\ndef test_check():\n    check(count_divisors)\n\ntest_check()\n", "sample_io": ["assert count_divisors(10) == True"], "source_codes": ["\ndef count_divisors(n: int) -> bool:\n    \"\"\"\n    Check whether the count of divisors of n is even.\n    \n    Parameters:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if count of divisors is even, False otherwise.\n    \"\"\"\n    import math\n    \n    sqrt_n = int(math.isqrt(n))\n    if sqrt_n * sqrt_n == n:\n        return False\n    else:\n        return True\n\n\n"], "responses": ["```python\ndef count_divisors(n: int) -> bool:\n    \"\"\"\n    Check whether the count of divisors of n is even.\n    \n    Parameters:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if count of divisors is even, False otherwise.\n    \"\"\"\n    import math\n    \n    sqrt_n = int(math.isqrt(n))\n    if sqrt_n * sqrt_n == n:\n        return False\n    else:\n        return True\n```"], "prompt_tokens": [787], "completion_tokens": [722], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_781_count_divisors"}
{"name": "mbpp_441_surfacearea_cube", "language": "Python3", "prompt": "def surfacearea_cube(l: int) -> int:\n    \"\"\"\n\tWrite a function to find the surface area of a cube of a given size.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "surfacearea_cube", "test": "def check(candidate):\n    assert candidate(5) == 150\n    assert candidate(3) == 54\n    assert candidate(10) == 600\n\ndef test_check():\n    check(surfacearea_cube)\n\ntest_check()\n", "sample_io": ["assert surfacearea_cube(5) == 150"], "source_codes": ["\ndef surfacearea_cube(l: int) -> int:\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * (l ** 2)\n\n\n"], "responses": ["```python\ndef surfacearea_cube(l: int) -> int:\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * (l ** 2)\n```"], "prompt_tokens": [272], "completion_tokens": [194], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_441_surfacearea_cube"}
{"name": "mbpp_396_check_char", "language": "Python3", "prompt": "def check_char(string: str) -> str:\n    \"\"\"\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_char", "test": "def check(candidate):\n    assert candidate('abba') == 'Valid'\n    assert candidate('a') == 'Valid'\n    assert candidate('abcd') == 'Invalid'\n\ndef test_check():\n    check(check_char)\n\ntest_check()\n", "sample_io": ["assert check_char('abba') == 'Valid'"], "source_codes": ["\ndef check_char(string: str) -> str:\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if not string:\n        return \"Empty string\"\n\n    if string[0] == string[-1]:\n        return \"Starts and ends with the same character\"\n    else:\n        return \"Starts and ends with different characters\"\n\n\n"], "responses": ["```python\ndef check_char(string: str) -> str:\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if not string:\n        return \"Empty string\"\n\n    if string[0] == string[-1]:\n        return \"Starts and ends with the same character\"\n    else:\n        return \"Starts and ends with different characters\"\n```"], "prompt_tokens": [385], "completion_tokens": [342], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_396_check_char"}
{"name": "mbpp_757_count_reverse_pairs", "language": "Python3", "prompt": "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    \"\"\"\n\tWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_reverse_pairs", "test": "def check(candidate):\n    assert candidate(['julia', 'best', 'tseb', 'for', 'ailuj']) == 2\n    assert candidate(['geeks', 'best', 'for', 'skeeg']) == 1\n    assert candidate(['makes', 'best', 'sekam', 'for', 'rof']) == 2\n\ndef test_check():\n    check(count_reverse_pairs)\n\ntest_check()\n", "sample_io": ["assert count_reverse_pairs(['julia', 'best', 'tseb', 'for', 'ailuj']) == 2"], "source_codes": ["\nfrom typing import List\nfrom collections import Counter\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    freq = Counter(test_list)\n    visited = set()\n    pairs = 0\n\n    for s in freq:\n        if s in visited:\n            continue\n        rev_s = s[::-1]\n        if rev_s in freq:\n            if s == rev_s:\n                count = freq[s]\n                pairs += count * (count - 1) // 2\n            else:\n                pairs += freq[s] * freq[rev_s]\n            visited.add(s)\n            visited.add(rev_s)\n        else:\n            visited.add(s)\n    return pairs\n\n\n"], "responses": ["```python\nfrom typing import List\nfrom collections import Counter\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    freq = Counter(test_list)\n    visited = set()\n    pairs = 0\n\n    for s in freq:\n        if s in visited:\n            continue\n        rev_s = s[::-1]\n        if rev_s in freq:\n            if s == rev_s:\n                count = freq[s]\n                pairs += count * (count - 1) // 2\n            else:\n                pairs += freq[s] * freq[rev_s]\n            visited.add(s)\n            visited.add(rev_s)\n        else:\n            visited.add(s)\n    return pairs\n```"], "prompt_tokens": [1087], "completion_tokens": [1048], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_757_count_reverse_pairs"}
{"name": "mbpp_75_find_tuples", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, int, int]], K: int) -> List[Tuple[int, int, int]]:\n    \"\"\"\n\tWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_tuples", "test": "def check(candidate):\n    assert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n    assert candidate([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\n    assert candidate([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]\n\ndef test_check():\n    check(find_tuples)\n\ntest_check()\n", "sample_io": ["assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, int, int]], K: int) -> List[Tuple[int, int, int]]:\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(element % K == 0 for element in tup):\n            result.append(tup)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, int, int]], K: int) -> List[Tuple[int, int, int]]:\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(element % K == 0 for element in tup):\n            result.append(tup)\n    return result\n```"], "prompt_tokens": [509], "completion_tokens": [426], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_75_find_tuples"}
{"name": "mbpp_785_tuple_str_int", "language": "Python3", "prompt": "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, int, int]:\n    \"\"\"\n\tWrite a function to convert tuple string to integer tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tuple_str_int", "test": "def check(candidate):\n    assert candidate('(7, 8, 9)') == (7, 8, 9)\n    assert candidate('(1, 2, 3)') == (1, 2, 3)\n    assert candidate('(4, 5, 6)') == (4, 5, 6)\n    assert candidate('(7, 81, 19)') == (7, 81, 19)\n\ndef test_check():\n    check(tuple_str_int)\n\ntest_check()\n", "sample_io": ["assert tuple_str_int('(7, 8, 9)') == (7, 8, 9)"], "source_codes": ["\nfrom typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, int, int]:\n    # Remove parentheses\n    cleaned_str = test_str.strip(\"()\")\n    \n    # Split the string by comma\n    str_parts = cleaned_str.split(\",\")\n    \n    # Convert each part to integer and gather in a tuple\n    int_tuple = tuple(int(part.strip()) for part in str_parts)\n    \n    return int_tuple\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, int, int]:\n    # Remove parentheses\n    cleaned_str = test_str.strip(\"()\")\n    \n    # Split the string by comma\n    str_parts = cleaned_str.split(\",\")\n    \n    # Convert each part to integer and gather in a tuple\n    int_tuple = tuple(int(part.strip()) for part in str_parts)\n    \n    return int_tuple\n```"], "prompt_tokens": [528], "completion_tokens": [483], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_785_tuple_str_int"}
{"name": "mbpp_776_count_vowels", "language": "Python3", "prompt": "def count_vowels(test_str: str) -> int:\n    \"\"\"\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_vowels", "test": "def check(candidate):\n    assert candidate('bestinstareels') == 7\n    assert candidate('partofthejourneyistheend') == 12\n    assert candidate('amazonprime') == 5\n\ndef test_check():\n    check(count_vowels)\n\ntest_check()\n", "sample_io": ["assert count_vowels('bestinstareels') == 7"], "source_codes": ["\ndef count_vowels(test_str: str) -> int:\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = set(\"aeiouAEIOU\")\n    count = 0\n    length = len(test_str)\n    \n    for i in range(length):\n        prev_is_vowel = (i > 0 and test_str[i - 1] in vowels)\n        next_is_vowel = (i < length - 1 and test_str[i + 1] in vowels)\n        \n        if prev_is_vowel or next_is_vowel:\n            count += 1\n            \n    return count\n\n\n"], "responses": ["```python\ndef count_vowels(test_str: str) -> int:\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = set(\"aeiouAEIOU\")\n    count = 0\n    length = len(test_str)\n    \n    for i in range(length):\n        prev_is_vowel = (i > 0 and test_str[i - 1] in vowels)\n        next_is_vowel = (i < length - 1 and test_str[i + 1] in vowels)\n        \n        if prev_is_vowel or next_is_vowel:\n            count += 1\n            \n    return count\n```"], "prompt_tokens": [881], "completion_tokens": [889], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_776_count_vowels"}
{"name": "mbpp_277_dict_filter", "language": "Python3", "prompt": "from typing import Dict\n\ndef dict_filter(dict: Dict[str, int], n: int) -> Dict[str, int]:\n    \"\"\"\n\tWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "dict_filter", "test": "def check(candidate):\n    assert candidate({ 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190 }, 170) == { 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190 }\n    assert candidate({ 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190 }, 180) == { 'Alden Cantrell': 180, 'Pierre Cox': 190 }\n    assert candidate({ 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190 }, 190) == { 'Pierre Cox': 190 }\n\ndef test_check():\n    check(dict_filter)\n\ntest_check()\n", "sample_io": ["assert dict_filter(3) == 27"], "source_codes": ["\nfrom typing import Dict\n\ndef dict_filter(d: Dict[str, int], n: int) -> Dict[str, int]:\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in d.items() if value >= n}\n\n\n"], "responses": ["```python\nfrom typing import Dict\n\ndef dict_filter(d: Dict[str, int], n: int) -> Dict[str, int]:\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in d.items() if value >= n}\n```"], "prompt_tokens": [519], "completion_tokens": [423], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_277_dict_filter"}
{"name": "mbpp_468_max_product", "language": "Python3", "prompt": "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_product", "test": "def check(candidate):\n    assert candidate([3, 100, 4, 5, 150, 6]) == 3000\n    assert candidate([4, 42, 55, 68, 80]) == 50265600\n    assert candidate([10, 22, 9, 33, 21, 50, 41, 60]) == 2460\n\ndef test_check():\n    check(max_product)\n\ntest_check()\n", "sample_io": ["assert max_product([3, 100, 4, 5, 150, 6]) == 3000"], "source_codes": ["\nfrom typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    max_dp = arr[:]\n    min_dp = arr[:]\n\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                candidates = [arr[i], max_dp[j] * arr[i], min_dp[j] * arr[i]]\n                max_dp[i] = max(max_dp[i], max(candidates))\n                min_dp[i] = min(min_dp[i], min(candidates))\n\n    return max(max_dp)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    max_dp = arr[:]\n    min_dp = arr[:]\n\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                candidates = [arr[i], max_dp[j] * arr[i], min_dp[j] * arr[i]]\n                max_dp[i] = max(max_dp[i], max(candidates))\n                min_dp[i] = min(min_dp[i], min(candidates))\n\n    return max(max_dp)\n```"], "prompt_tokens": [1212], "completion_tokens": [1200], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_468_max_product"}
{"name": "mbpp_279_is_num_decagonal", "language": "Python3", "prompt": "def is_num_decagonal(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth decagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_num_decagonal", "test": "def check(candidate):\n    assert candidate(3) == 27\n    assert candidate(7) == 175\n    assert candidate(10) == 370\n\ndef test_check():\n    check(is_num_decagonal)\n\ntest_check()\n", "sample_io": ["assert is_num_decagonal(3) == 27"], "source_codes": ["\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    return 4 * n * n - 3 * n\n\n\n"], "responses": ["```python\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    return 4 * n * n - 3 * n\n```"], "prompt_tokens": [398], "completion_tokens": [327], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_279_is_num_decagonal"}
{"name": "mbpp_3_is_not_prime", "language": "Python3", "prompt": "def is_not_prime(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to identify non-prime numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_not_prime", "test": "def check(candidate):\n    assert candidate(2) == False\n    assert candidate(10) == True\n    assert candidate(35) == True\n    assert candidate(37) == False\n\ndef test_check():\n    check(is_not_prime)\n\ntest_check()\n", "sample_io": ["assert is_not_prime(2) == False"], "source_codes": ["\ndef is_not_prime(n: int) -> bool:\n    \"\"\"\n    Identify if a number is NOT prime.\n    Returns True if n is not prime, False if n is prime.\n    \"\"\"\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n\n"], "responses": ["```python\ndef is_not_prime(n: int) -> bool:\n    \"\"\"\n    Identify if a number is NOT prime.\n    Returns True if n is not prime, False if n is prime.\n    \"\"\"\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n```"], "prompt_tokens": [572], "completion_tokens": [548], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_3_is_not_prime"}
{"name": "mbpp_88_freq_count", "language": "Python3", "prompt": "from typing import List, Dict\n\ndef freq_count(list1: List[int]) -> Dict[int, int]:\n    \"\"\"\n\tWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "freq_count", "test": "def check(candidate):\n    assert candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == { 10: 4, 20: 4, 40: 2, 50: 2, 30: 1 }\n    assert candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]) == { 1: 3, 2: 2, 3: 3, 4: 3 }\n    assert candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]) == { 10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2 }\n\ndef test_check():\n    check(freq_count)\n\ntest_check()\n", "sample_io": ["assert freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == { 10: 4, 20: 4, 40: 2, 50: 2, 30: 1 }"], "source_codes": ["\nfrom typing import List, Dict\n\ndef freq_count(list1: List[int]) -> Dict[int, int]:\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    frequency = {}\n    for elem in list1:\n        if elem in frequency:\n            frequency[elem] += 1\n        else:\n            frequency[elem] = 1\n    return frequency\n\n\n"], "responses": ["```python\nfrom typing import List, Dict\n\ndef freq_count(list1: List[int]) -> Dict[int, int]:\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    frequency = {}\n    for elem in list1:\n        if elem in frequency:\n            frequency[elem] += 1\n        else:\n            frequency[elem] = 1\n    return frequency\n```"], "prompt_tokens": [412], "completion_tokens": [350], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_88_freq_count"}
{"name": "mbpp_259_maximize_elements", "language": "Python3", "prompt": "from typing import List\n\ndef maximize_elements(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to maximize the given two lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_259_maximize_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "maximize_elements", "test": "def check(candidate):\n    assert candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[6, 7], [4, 9], [2, 9], [7, 10]]\n    assert candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]) == [[7, 8], [5, 10], [3, 10], [8, 11]]\n    assert candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]) == [[8, 9], [6, 11], [4, 11], [9, 12]]\n\ndef test_check():\n    check(maximize_elements)\n\ntest_check()\n", "sample_io": ["assert maximize_elements([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[6, 7], [4, 9], [2, 9], [7, 10]]"], "source_codes": ["\nfrom typing import List\n\ndef maximize_elements(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Write a function to maximize the given two lists element-wise for each pair of sublists.\n    \"\"\"\n    result = []\n    for l1, l2 in zip(test_tup1, test_tup2):\n        # If lists are unequal length, only iterate up to the shortest length\n        max_sublist = [max(a, b) for a, b in zip(l1, l2)]\n        result.append(max_sublist)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef maximize_elements(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Write a function to maximize the given two lists element-wise for each pair of sublists.\n    \"\"\"\n    result = []\n    for l1, l2 in zip(test_tup1, test_tup2):\n        # If lists are unequal length, only iterate up to the shortest length\n        max_sublist = [max(a, b) for a, b in zip(l1, l2)]\n        result.append(max_sublist)\n    return result\n```"], "prompt_tokens": [616], "completion_tokens": [594], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_259_maximize_elements"}
{"name": "mbpp_568_empty_list", "language": "Python3", "prompt": "from typing import List, Dict\n\ndef empty_list(length: int) -> List[Dict[None, None]]:\n    \"\"\"\n\tWrite a function to create a list of N empty dictionaries.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_568_empty_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "empty_list", "test": "def check(candidate):\n    assert candidate(5) == [{  }, {  }, {  }, {  }, {  }]\n    assert candidate(6) == [{  }, {  }, {  }, {  }, {  }, {  }]\n    assert candidate(7) == [{  }, {  }, {  }, {  }, {  }, {  }, {  }]\n\ndef test_check():\n    check(empty_list)\n\ntest_check()\n", "sample_io": ["assert empty_list(5) == [{  }, {  }, {  }, {  }, {  }]"], "source_codes": ["\nfrom typing import List, Dict, Any\n\ndef empty_list(length: int) -> List[Dict[Any, Any]]:\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]\n\n\n"], "responses": ["```python\nfrom typing import List, Dict, Any\n\ndef empty_list(length: int) -> List[Dict[Any, Any]]:\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]\n```"], "prompt_tokens": [514], "completion_tokens": [428], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_568_empty_list"}
{"name": "mbpp_285_text_match_two_three", "language": "Python3", "prompt": "def text_match_two_three(text: str) -> bool:\n    \"\"\"\n\tWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_two_three", "test": "def check(candidate):\n    assert candidate('ac') == False\n    assert candidate('dc') == False\n    assert candidate('abbbba') == True\n\ndef test_check():\n    check(text_match_two_three)\n\ntest_check()\n", "sample_io": ["assert text_match_two_three('ac') == False"], "source_codes": ["\nimport re\n\ndef text_match_two_three(text: str) -> bool:\n    \"\"\"\n    Check if the input string contains 'a' followed by two or three 'b's.\n    \"\"\"\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_two_three(text: str) -> bool:\n    \"\"\"\n    Check if the input string contains 'a' followed by two or three 'b's.\n    \"\"\"\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))\n```"], "prompt_tokens": [500], "completion_tokens": [419], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_285_text_match_two_three"}
{"name": "mbpp_721_maxAverageOfPath", "language": "Python3", "prompt": "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    \"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "maxAverageOfPath", "test": "def check(candidate):\n    assert candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n    assert candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n    assert candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8\n\ndef test_check():\n    check(maxAverageOfPath)\n\ntest_check()\n", "sample_io": ["assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"], "source_codes": ["\nfrom typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    dp = [[float('-inf')] * N for _ in range(N)]\n    \n    dp[0][0] = cost[0][0]\n\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n\n    max_sum = dp[N-1][N-1]\n    path_length = 2 * N - 1\n\n    return max_sum / path_length\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    dp = [[float('-inf')] * N for _ in range(N)]\n    \n    dp[0][0] = cost[0][0]\n\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n\n    max_sum = dp[N-1][N-1]\n    path_length = 2 * N - 1\n\n    return max_sum / path_length\n```"], "prompt_tokens": [1167], "completion_tokens": [1088], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_721_maxAverageOfPath"}
{"name": "mbpp_797_sum_in_range", "language": "Python3", "prompt": "def sum_in_range(l: int, r: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_797_sum_in_range.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_in_range", "test": "def check(candidate):\n    assert candidate(2, 5) == 8\n    assert candidate(5, 7) == 12\n    assert candidate(7, 13) == 40\n\ndef test_check():\n    check(sum_in_range)\n\ntest_check()\n", "sample_io": ["assert sum_in_range(2, 5) == 8"], "source_codes": ["\ndef sum_in_range(l: int, r: int) -> int:\n    \"\"\"\n    Returns the sum of all odd natural numbers within the range l to r (inclusive).\n    \"\"\"\n    # Adjust l to the first odd number in the range\n    if l % 2 == 0:\n        l += 1\n    \n    # Adjust r to the last odd number in the range\n    if r % 2 == 0:\n        r -= 1\n    \n    # If after adjustment, l > r, there are no odd numbers in the range\n    if l > r:\n        return 0\n    \n    # Calculate the number of odd terms\n    n = ((r - l) // 2) + 1\n    \n    # Calculate and return the sum\n    return n * (l + r) // 2\n\n\n"], "responses": ["```python\ndef sum_in_range(l: int, r: int) -> int:\n    \"\"\"\n    Returns the sum of all odd natural numbers within the range l to r (inclusive).\n    \"\"\"\n    # Adjust l to the first odd number in the range\n    if l % 2 == 0:\n        l += 1\n    \n    # Adjust r to the last odd number in the range\n    if r % 2 == 0:\n        r -= 1\n    \n    # If after adjustment, l > r, there are no odd numbers in the range\n    if l > r:\n        return 0\n    \n    # Calculate the number of odd terms\n    n = ((r - l) // 2) + 1\n    \n    # Calculate and return the sum\n    return n * (l + r) // 2\n```"], "prompt_tokens": [712], "completion_tokens": [746], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_797_sum_in_range"}
{"name": "mbpp_4_heap_queue_largest", "language": "Python3", "prompt": "from typing import List\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "heap_queue_largest", "test": "def check(candidate):\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2) == [85, 75]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5) == [85, 75, 65, 58, 35]\n\ndef test_check():\n    check(heap_queue_largest)\n\ntest_check()\n", "sample_io": ["assert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]"], "source_codes": ["\nfrom typing import List\nimport heapq\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    return heapq.nlargest(n, nums)\n\n\n"], "responses": ["```python\nfrom typing import List\nimport heapq\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    return heapq.nlargest(n, nums)\n```"], "prompt_tokens": [546], "completion_tokens": [453], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_4_heap_queue_largest"}
{"name": "mbpp_120_max_product_tuple", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_product_tuple", "test": "def check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\n    assert candidate([(10, 20), (15, 2), (5, 10)]) == 200\n    assert candidate([(11, 44), (10, 15), (20, 5), (12, 9)]) == 484\n\ndef test_check():\n    check(max_product_tuple)\n\ntest_check()\n", "sample_io": ["assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_abs_product = 0\n    n = len(list1)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            t1 = list1[i]\n            t2 = list1[j]\n            products = [\n                abs(t1[0] * t2[0]),\n                abs(t1[0] * t2[1]),\n                abs(t1[1] * t2[0]),\n                abs(t1[1] * t2[1])\n            ]\n            current_max = max(products)\n            if current_max > max_abs_product:\n                max_abs_product = current_max\n    \n    return max_abs_product\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_abs_product = 0\n    n = len(list1)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            t1 = list1[i]\n            t2 = list1[j]\n            products = [\n                abs(t1[0] * t2[0]),\n                abs(t1[0] * t2[1]),\n                abs(t1[1] * t2[0]),\n                abs(t1[1] * t2[1])\n            ]\n            current_max = max(products)\n            if current_max > max_abs_product:\n                max_abs_product = current_max\n    \n    return max_abs_product\n```"], "prompt_tokens": [957], "completion_tokens": [964], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_120_max_product_tuple"}
{"name": "mbpp_230_replace_blank", "language": "Python3", "prompt": "def replace_blank(str1: str, char: str) -> str:\n    \"\"\"\n\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_blank", "test": "def check(candidate):\n    assert candidate('hello people', '@') == 'hello@people'\n    assert candidate('python program language', '$') == 'python$program$language'\n    assert candidate('blank space', '-') == 'blank-space'\n\ndef test_check():\n    check(replace_blank)\n\ntest_check()\n", "sample_io": ["assert replace_blank('hello people', '@') == 'hello@people'"], "source_codes": ["\ndef replace_blank(str1: str, char: str) -> str:\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(' ', char)\n\n\n"], "responses": ["```python\ndef replace_blank(str1: str, char: str) -> str:\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(' ', char)\n```"], "prompt_tokens": [362], "completion_tokens": [268], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_230_replace_blank"}
{"name": "mbpp_600_is_Even", "language": "Python3", "prompt": "def is_Even(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given number is even or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_600_is_Even.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Even", "test": "def check(candidate):\n    assert candidate(1) == False\n    assert candidate(2) == True\n    assert candidate(3) == False\n\ndef test_check():\n    check(is_Even)\n\ntest_check()\n", "sample_io": ["assert is_Even(1) == False"], "source_codes": ["\ndef is_Even(n: int) -> bool:\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    return n % 2 == 0\n\n\n"], "responses": ["```python\ndef is_Even(n: int) -> bool:\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    return n % 2 == 0\n```"], "prompt_tokens": [230], "completion_tokens": [152], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_600_is_Even"}
{"name": "mbpp_440_find_adverb_position", "language": "Python3", "prompt": "from typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    \"\"\"\n\tWrite a function to find the first adverb and their positions in a given sentence.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_adverb_position", "test": "def check(candidate):\n    assert candidate('clearly!! we can see the sky') == (0, 7, 'clearly')\n    assert candidate('seriously!! there are many roses') == (0, 9, 'seriously')\n    assert candidate('unfortunately!! sita is going to home') == (0, 13, 'unfortunately')\n\ndef test_check():\n    check(find_adverb_position)\n\ntest_check()\n", "sample_io": ["assert find_adverb_position('clearly!! we can see the sky') == (0, 7, 'clearly')"], "source_codes": ["\nimport nltk\nfrom typing import Tuple\n\n# Uncomment these lines if running for the first time\n# nltk.download('punkt')\n# nltk.download('averaged_perceptron_tagger')\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    Returns a tuple of (start_index, end_index, adverb) where\n    start_index is the position of the first character of the adverb,\n    end_index is the position of the last character + 1,\n    and adverb is the adverb string.\n    If no adverb is found, returns (-1, -1, \"\").\n    \"\"\"\n    words = nltk.word_tokenize(text)\n    pos_tags = nltk.pos_tag(words)\n\n    search_start = 0\n    for idx, (word, tag) in enumerate(pos_tags):\n        if tag in ('RB', 'RBR', 'RBS'):\n            for i in range(idx + 1):\n                word_i = words[i]\n                pos = text.find(word_i, search_start)\n                search_start = pos + len(word_i)\n                if i == idx:\n                    start_index = pos\n                    end_index = pos + len(word_i)\n                    return (start_index, end_index, word)\n    return (-1, -1, \"\")\n\n\n"], "responses": ["```python\nimport nltk\nfrom typing import Tuple\n\n# Uncomment these lines if running for the first time\n# nltk.download('punkt')\n# nltk.download('averaged_perceptron_tagger')\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    Returns a tuple of (start_index, end_index, adverb) where\n    start_index is the position of the first character of the adverb,\n    end_index is the position of the last character + 1,\n    and adverb is the adverb string.\n    If no adverb is found, returns (-1, -1, \"\").\n    \"\"\"\n    words = nltk.word_tokenize(text)\n    pos_tags = nltk.pos_tag(words)\n\n    search_start = 0\n    for idx, (word, tag) in enumerate(pos_tags):\n        if tag in ('RB', 'RBR', 'RBS'):\n            for i in range(idx + 1):\n                word_i = words[i]\n                pos = text.find(word_i, search_start)\n                search_start = pos + len(word_i)\n                if i == idx:\n                    start_index = pos\n                    end_index = pos + len(word_i)\n                    return (start_index, end_index, word)\n    return (-1, -1, \"\")\n```"], "prompt_tokens": [909], "completion_tokens": [1045], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_440_find_adverb_position"}
{"name": "mbpp_773_occurance_substring", "language": "Python3", "prompt": "from typing import Optional, Tuple\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    \"\"\"\n\tWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "occurance_substring", "test": "def check(candidate):\n    assert candidate('python programming, python language', 'python') == ('python', 0, 6)\n    assert candidate('python programming,programming language', 'programming') == ('programming', 7, 18)\n    assert candidate('python programming,programming language', 'language') == ('language', 31, 39)\n    assert candidate('c++ programming, c++ language', 'python') == None\n\ndef test_check():\n    check(occurance_substring)\n\ntest_check()\n", "sample_io": ["assert occurance_substring('python programming, python language', 'python') == ('python', 0, 6)"], "source_codes": ["\nfrom typing import Optional, Tuple\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n\n    Returns a tuple of (matched substring, start_index, end_index).\n    \"\"\"\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)\n\n\n"], "responses": ["```python\nfrom typing import Optional, Tuple\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n\n    Returns a tuple of (matched substring, start_index, end_index).\n    \"\"\"\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)\n```"], "prompt_tokens": [528], "completion_tokens": [468], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_773_occurance_substring"}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "Python3", "prompt": "def get_total_number_of_sequences(m: int, n: int) -> int:\n    \"\"\"\n\tWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_total_number_of_sequences", "test": "def check(candidate):\n    assert candidate(10, 4) == 4\n    assert candidate(5, 2) == 6\n    assert candidate(16, 3) == 84\n\ndef test_check():\n    check(get_total_number_of_sequences)\n\ntest_check()\n", "sample_io": ["assert get_total_number_of_sequences(10, 4) == 4"], "source_codes": ["\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n    dp = [[0] * (m + 2) for _ in range(n + 1)]\n    for x in range(1, m + 1):\n        dp[1][x] = 1\n    for length in range(2, n + 1):\n        prefix = [0] * (m + 3)\n        for x in range(m, 0, -1):\n            prefix[x] = prefix[x + 1] + dp[length - 1][x]\n        for x in range(1, m + 1):\n            double_x = 2 * x\n            dp[length][x] = prefix[double_x] if double_x <= m else 0\n    return sum(dp[n][x] for x in range(1, m + 1))\n\n\n"], "responses": ["```python\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n    dp = [[0] * (m + 2) for _ in range(n + 1)]\n    for x in range(1, m + 1):\n        dp[1][x] = 1\n    for length in range(2, n + 1):\n        prefix = [0] * (m + 3)\n        for x in range(m, 0, -1):\n            prefix[x] = prefix[x + 1] + dp[length - 1][x]\n        for x in range(1, m + 1):\n            double_x = 2 * x\n            dp[length][x] = prefix[double_x] if double_x <= m else 0\n    return sum(dp[n][x] for x in range(1, m + 1))\n```"], "prompt_tokens": [1414], "completion_tokens": [1400], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_239_get_total_number_of_sequences"}
{"name": "mbpp_265_list_split", "language": "Python3", "prompt": "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    \"\"\"\n\tWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "list_split", "test": "def check(candidate):\n    assert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3) == [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]\n    assert candidate(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2) == [['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n\ndef test_check():\n    check(list_split)\n\ntest_check()\n", "sample_io": ["assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"], "source_codes": ["\nfrom typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    \"\"\"\n    Splits the list `S` into sublists each containing `step` elements.\n    The last sublist may contain fewer than `step` elements if len(S) is not divisible by `step`.\n    \n    Parameters:\n        S (List[Any]): The list to split.\n        step (int): The size of each sublist.\n    \n    Returns:\n        List[List[Any]]: A list of sublists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        sublist = S[i:i + step]\n        result.append(sublist)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    \"\"\"\n    Splits the list `S` into sublists each containing `step` elements.\n    The last sublist may contain fewer than `step` elements if len(S) is not divisible by `step`.\n    \n    Parameters:\n        S (List[Any]): The list to split.\n        step (int): The size of each sublist.\n    \n    Returns:\n        List[List[Any]]: A list of sublists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        sublist = S[i:i + step]\n        result.append(sublist)\n    return result\n```"], "prompt_tokens": [667], "completion_tokens": [641], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_265_list_split"}
{"name": "mbpp_412_remove_odd", "language": "Python3", "prompt": "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to remove odd numbers from a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_odd", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == [2]\n    assert candidate([2, 4, 6]) == [2, 4, 6]\n    assert candidate([10, 20, 3]) == [10, 20]\n\ndef test_check():\n    check(remove_odd)\n\ntest_check()\n", "sample_io": ["assert remove_odd([1, 2, 3]) == [2]"], "source_codes": ["\nfrom typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    # Using list comprehension to filter out odd numbers\n    return [num for num in l if num % 2 == 0]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    # Using list comprehension to filter out odd numbers\n    return [num for num in l if num % 2 == 0]\n```"], "prompt_tokens": [296], "completion_tokens": [232], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_412_remove_odd"}
{"name": "mbpp_414_overlapping", "language": "Python3", "prompt": "from typing import List\n\ndef overlapping(list1: List[int], list2: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "overlapping", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]) == False\n    assert candidate([1, 2, 3], [4, 5, 6]) == False\n    assert candidate([1, 4, 5], [1, 4, 5]) == True\n\ndef test_check():\n    check(overlapping)\n\ntest_check()\n", "sample_io": ["assert overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9]) == False"], "source_codes": ["\nfrom typing import List\n\ndef overlapping(list1: List[int], list2: List[int]) -> bool:\n    \"\"\"\n    Check whether any value in list1 exists in list2 or not.\n    \n    :param list1: List of integers.\n    :param list2: List of integers.\n    :return: True if there is any value that exists in both lists, False otherwise.\n    \"\"\"\n    return bool(set(list1) & set(list2))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef overlapping(list1: List[int], list2: List[int]) -> bool:\n    \"\"\"\n    Check whether any value in list1 exists in list2 or not.\n    \n    :param list1: List of integers.\n    :param list2: List of integers.\n    :return: True if there is any value that exists in both lists, False otherwise.\n    \"\"\"\n    return bool(set(list1) & set(list2))\n```"], "prompt_tokens": [680], "completion_tokens": [624], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_414_overlapping"}
{"name": "mbpp_160_find_solution", "language": "Python3", "prompt": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_solution", "test": "def check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n", "sample_io": ["assert find_solution(2, 3, 7) == (2, 1)"], "source_codes": ["\nfrom typing import Optional, Tuple\n\ndef extended_gcd(a: int, b: int) -> Tuple[int, int, int]:\n    if b == 0:\n        return (a, 1, 0)\n    else:\n        g, x1, y1 = extended_gcd(b, a % b)\n        x = y1\n        y = x1 - (a // b) * y1\n        return (g, x, y)\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    g, x0, y0 = extended_gcd(a, b)\n    if n % g != 0:\n        return None\n    x = x0 * (n // g)\n    y = y0 * (n // g)\n    return (x, y)\n\n\n"], "responses": ["```python\nfrom typing import Optional, Tuple\n\ndef extended_gcd(a: int, b: int) -> Tuple[int, int, int]:\n    if b == 0:\n        return (a, 1, 0)\n    else:\n        g, x1, y1 = extended_gcd(b, a % b)\n        x = y1\n        y = x1 - (a // b) * y1\n        return (g, x, y)\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    g, x0, y0 = extended_gcd(a, b)\n    if n % g != 0:\n        return None\n    x = x0 * (n // g)\n    y = y0 * (n // g)\n    return (x, y)\n```"], "prompt_tokens": [738], "completion_tokens": [732], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_160_find_solution"}
{"name": "mbpp_559_max_sub_array_sum", "language": "Python3", "prompt": "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    \"\"\"\n\tWrite a function to find the sum of the largest contiguous sublist in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sub_array_sum", "test": "def check(candidate):\n    assert candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n    assert candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\n    assert candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10\n\ndef test_check():\n    check(max_sub_array_sum)\n\ntest_check()\n", "sample_io": ["assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7"], "source_codes": ["\nfrom typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size == 0:\n        return 0\n\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size == 0:\n        return 0\n\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n```"], "prompt_tokens": [677], "completion_tokens": [644], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_559_max_sub_array_sum"}
{"name": "mbpp_809_check_smaller", "language": "Python3", "prompt": "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> bool:\n    \"\"\"\n\tWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_smaller", "test": "def check(candidate):\n    assert candidate((1, 2, 3), (2, 3, 4)) == False\n    assert candidate((4, 5, 6), (3, 4, 5)) == True\n    assert candidate((11, 12, 13), (10, 11, 12)) == True\n\ndef test_check():\n    check(check_smaller)\n\ntest_check()\n", "sample_io": ["assert check_smaller((1, 2, 3), (2, 3, 4)) == False"], "source_codes": ["\nfrom typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> bool:\n    \"\"\"\n    Write a function to check if each element of second tuple \n    is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for a, b in zip(test_tup1, test_tup2):\n        if b >= a:\n            return False\n    return True\n\n\n# Test cases\nprint(check_smaller((3, 5, 7), (2, 4, 6)))  # True\nprint(check_smaller((3, 5, 7), (3, 4, 6)))  # False\nprint(check_smaller((1, 1, 1), (0, 0, 0)))  # True\nprint(check_smaller((10, 20, 30), (5, 25, 10)))  # False\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> bool:\n    \"\"\"\n    Write a function to check if each element of second tuple \n    is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for a, b in zip(test_tup1, test_tup2):\n        if b >= a:\n            return False\n    return True\n\n\n# Test cases\nprint(check_smaller((3, 5, 7), (2, 4, 6)))  # True\nprint(check_smaller((3, 5, 7), (3, 4, 6)))  # False\nprint(check_smaller((1, 1, 1), (0, 0, 0)))  # True\nprint(check_smaller((10, 20, 30), (5, 25, 10)))  # False\n```"], "prompt_tokens": [665], "completion_tokens": [686], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_809_check_smaller"}
{"name": "mbpp_629_Split", "language": "Python3", "prompt": "from typing import List\n\ndef Split(list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to find even numbers from a list of numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Split", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == [2, 4]\n    assert candidate([4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0]\n    assert candidate([8, 12, 15, 19]) == [8, 12]\n\ndef test_check():\n    check(Split)\n\ntest_check()\n", "sample_io": ["assert Split([1, 2, 3, 4, 5]) == [2, 4]"], "source_codes": ["\nfrom typing import List\n\ndef Split(list: List[int]) -> List[int]:\n    return [num for num in list if num % 2 == 0]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Split(list: List[int]) -> List[int]:\n    return [num for num in list if num % 2 == 0]\n```"], "prompt_tokens": [377], "completion_tokens": [283], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_629_Split"}
{"name": "mbpp_723_count_same_pair", "language": "Python3", "prompt": "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"\n\tThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_same_pair", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]) == 4\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1\n    assert candidate([0, 1, 1, 2], [0, 1, 2, 2]) == 3\n\ndef test_check():\n    check(count_same_pair)\n\ntest_check()\n", "sample_io": ["assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]) == 4"], "source_codes": ["\nfrom typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"\n    The input is defined as two lists of the same length. \n    This function counts indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"\n    The input is defined as two lists of the same length. \n    This function counts indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n```"], "prompt_tokens": [543], "completion_tokens": [467], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_723_count_same_pair"}
{"name": "mbpp_242_count_charac", "language": "Python3", "prompt": "def count_charac(str1: str) -> int:\n    \"\"\"\n\tWrite a function to count the total number of characters in a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_242_count_charac.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_charac", "test": "def check(candidate):\n    assert candidate('python programming') == 18\n    assert candidate('language') == 8\n    assert candidate('words') == 5\n\ndef test_check():\n    check(count_charac)\n\ntest_check()\n", "sample_io": ["assert count_charac('python programming') == 18"], "source_codes": ["\ndef count_charac(str1: str) -> int:\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    return len(str1)\n\n\n"], "responses": ["```python\ndef count_charac(str1: str) -> int:\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    return len(str1)\n```"], "prompt_tokens": [272], "completion_tokens": [190], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_242_count_charac"}
{"name": "mbpp_616_tuple_modulo", "language": "Python3", "prompt": "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tuple_modulo", "test": "def check(candidate):\n    assert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n    assert candidate((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\n    assert candidate((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)\n\ndef test_check():\n    check(tuple_modulo)\n\ntest_check()\n", "sample_io": ["assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)"], "source_codes": ["\nfrom typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    result = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n    return result\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    result = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n    return result\n```"], "prompt_tokens": [520], "completion_tokens": [420], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_616_tuple_modulo"}
{"name": "mbpp_583_catalan_number", "language": "Python3", "prompt": "def catalan_number(num: int) -> int:\n    \"\"\"\n\tWrite a function which returns nth catalan number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "catalan_number", "test": "def check(candidate):\n    assert candidate(10) == 16796\n    assert candidate(9) == 4862\n    assert candidate(7) == 429\n\ndef test_check():\n    check(catalan_number)\n\ntest_check()\n", "sample_io": ["assert catalan_number(10) == 16796"], "source_codes": ["\ndef catalan_number(num: int) -> int:\n    \"\"\"\n    Compute the nth Catalan number.\n    \n    The nth Catalan number is given by:\n    C_n = (1 / (n+1)) * comb(2n, n)\n    \"\"\"\n    if num == 0:\n        return 1\n\n    # Compute binomial coefficient (2n choose n)\n    res = 1\n    for i in range(num):\n        res = res * (2 * num - i) // (i + 1)\n\n    # Divide by (n + 1) to get the Catalan number\n    catalan = res // (num + 1)\n\n    return catalan\n\n\n"], "responses": ["```python\ndef catalan_number(num: int) -> int:\n    \"\"\"\n    Compute the nth Catalan number.\n    \n    The nth Catalan number is given by:\n    C_n = (1 / (n+1)) * comb(2n, n)\n    \"\"\"\n    if num == 0:\n        return 1\n\n    # Compute binomial coefficient (2n choose n)\n    res = 1\n    for i in range(num):\n        res = res * (2 * num - i) // (i + 1)\n\n    # Divide by (n + 1) to get the Catalan number\n    catalan = res // (num + 1)\n\n    return catalan\n```"], "prompt_tokens": [514], "completion_tokens": [546], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_583_catalan_number"}
{"name": "mbpp_129_magic_square_test", "language": "Python3", "prompt": "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    \"\"\"\n\tWrite a function to calculate whether the matrix is a magic square.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "magic_square_test", "test": "def check(candidate):\n    assert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]) == False\n\ndef test_check():\n    check(magic_square_test)\n\ntest_check()\n", "sample_io": ["assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True"], "source_codes": ["\nfrom typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n    \n    # 1. Check if the matrix is square\n    for row in my_matrix:\n        if len(row) != n:\n            return False\n    \n    # 2. Flatten the matrix and check if all numbers are distinct\n    elements = [num for row in my_matrix for num in row]\n    if len(set(elements)) != n * n:\n        return False\n    \n    # 3. Calculate the target sum using the first row\n    target_sum = sum(my_matrix[0])\n    \n    # 4. Check sums of all rows\n    for row in my_matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # 5. Check sums of all columns\n    for col in range(n):\n        col_sum = sum(my_matrix[row][col] for row in range(n))\n        if col_sum != target_sum:\n            return False\n    \n    # 6. Check sums of the two main diagonals\n    diag1 = sum(my_matrix[i][i] for i in range(n))\n    diag2 = sum(my_matrix[i][n - 1 - i] for i in range(n))\n    if diag1 != target_sum or diag2 != target_sum:\n        return False\n    \n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n    \n    # 1. Check if the matrix is square\n    for row in my_matrix:\n        if len(row) != n:\n            return False\n    \n    # 2. Flatten the matrix and check if all numbers are distinct\n    elements = [num for row in my_matrix for num in row]\n    if len(set(elements)) != n * n:\n        return False\n    \n    # 3. Calculate the target sum using the first row\n    target_sum = sum(my_matrix[0])\n    \n    # 4. Check sums of all rows\n    for row in my_matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # 5. Check sums of all columns\n    for col in range(n):\n        col_sum = sum(my_matrix[row][col] for row in range(n))\n        if col_sum != target_sum:\n            return False\n    \n    # 6. Check sums of the two main diagonals\n    diag1 = sum(my_matrix[i][i] for i in range(n))\n    diag2 = sum(my_matrix[i][n - 1 - i] for i in range(n))\n    if diag1 != target_sum or diag2 != target_sum:\n        return False\n    \n    return True\n```"], "prompt_tokens": [553], "completion_tokens": [722], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_129_magic_square_test"}
{"name": "mbpp_61_count_Substrings", "language": "Python3", "prompt": "def count_Substrings(s: str) -> int:\n    \"\"\"\n\tWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Substrings", "test": "def check(candidate):\n    assert candidate('112112') == 6\n    assert candidate('111') == 6\n    assert candidate('1101112') == 12\n\ndef test_check():\n    check(count_Substrings)\n\ntest_check()\n", "sample_io": ["assert count_Substrings('112112') == 6"], "source_codes": ["\ndef count_Substrings(s: str) -> int:\n    n = len(s)\n    prefix = [0] * (n + 1)\n    \n    # Compute prefix sums of digits\n    for i in range(1, n + 1):\n        prefix[i] = prefix[i - 1] + int(s[i - 1])\n    \n    # Calculate arr where arr[k] = prefix[k] - k\n    arr = [prefix[i] - i for i in range(n + 1)]\n    \n    count_map = {}\n    result = 0\n    \n    # Count pairs with same arr value\n    for val in arr:\n        if val in count_map:\n            result += count_map[val]\n            count_map[val] += 1\n        else:\n            count_map[val] = 1\n    \n    return result\n\n\n"], "responses": ["```python\ndef count_Substrings(s: str) -> int:\n    n = len(s)\n    prefix = [0] * (n + 1)\n    \n    # Compute prefix sums of digits\n    for i in range(1, n + 1):\n        prefix[i] = prefix[i - 1] + int(s[i - 1])\n    \n    # Calculate arr where arr[k] = prefix[k] - k\n    arr = [prefix[i] - i for i in range(n + 1)]\n    \n    count_map = {}\n    result = 0\n    \n    # Count pairs with same arr value\n    for val in arr:\n        if val in count_map:\n            result += count_map[val]\n            count_map[val] += 1\n        else:\n            count_map[val] = 1\n    \n    return result\n```"], "prompt_tokens": [1085], "completion_tokens": [1125], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_61_count_Substrings"}
{"name": "mbpp_287_square_Sum", "language": "Python3", "prompt": "def square_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_287_square_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "square_Sum", "test": "def check(candidate):\n    assert candidate(2) == 20\n    assert candidate(3) == 56\n    assert candidate(4) == 120\n\ndef test_check():\n    check(square_Sum)\n\ntest_check()\n", "sample_io": ["assert square_Sum(2) == 20"], "source_codes": ["\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    return (2 * n * (n + 1) * (2 * n + 1)) // 3\n\n\n"], "responses": ["```python\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    return (2 * n * (n + 1) * (2 * n + 1)) // 3\n```"], "prompt_tokens": [592], "completion_tokens": [513], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_287_square_Sum"}
{"name": "mbpp_93_power", "language": "Python3", "prompt": "def power(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the value of 'a' to the power 'b'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_93_power.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "power", "test": "def check(candidate):\n    assert candidate(3, 4) == 81\n    assert candidate(2, 3) == 8\n    assert candidate(5, 5) == 3125\n\ndef test_check():\n    check(power)\n\ntest_check()\n", "sample_io": ["assert power(3, 4) == 81"], "source_codes": ["\ndef power(a: int, b: int) -> int:\n    if b < 0:\n        raise ValueError(\"This function does not support negative powers.\")\n    \n    result = 1\n    for _ in range(b):\n        result *= a\n    return result\n\n\n"], "responses": ["```python\ndef power(a: int, b: int) -> int:\n    if b < 0:\n        raise ValueError(\"This function does not support negative powers.\")\n    \n    result = 1\n    for _ in range(b):\n        result *= a\n    return result\n```"], "prompt_tokens": [675], "completion_tokens": [603], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_93_power"}
{"name": "mbpp_607_find_literals", "language": "Python3", "prompt": "from typing import Tuple\n\ndef find_literals(text: str, pattern: str) -> Tuple[str, int, int]:\n    \"\"\"\n\tWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_literals", "test": "def check(candidate):\n    assert candidate('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n    assert candidate('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\n    assert candidate('Hardest choices required strongest will', 'will') == ('will', 35, 39)\n\ndef test_check():\n    check(find_literals)\n\ntest_check()\n", "sample_io": ["assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"], "source_codes": ["\nimport re\nfrom typing import Tuple, Optional\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    \"\"\"\n    Search a string for a regex pattern.\n    \n    Parameters:\n    - text: The string to search within.\n    - pattern: The regex pattern to search for.\n    \n    Returns:\n    A tuple (match, start_index, end_index) if a match is found,\n    otherwise None.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None\n\n\n"], "responses": ["```python\nimport re\nfrom typing import Tuple, Optional\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    \"\"\"\n    Search a string for a regex pattern.\n    \n    Parameters:\n    - text: The string to search within.\n    - pattern: The regex pattern to search for.\n    \n    Returns:\n    A tuple (match, start_index, end_index) if a match is found,\n    otherwise None.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None\n```"], "prompt_tokens": [652], "completion_tokens": [606], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_607_find_literals"}
{"name": "mbpp_94_index_minimum", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> str:\n    \"\"\"\n\tGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "index_minimum", "test": "def check(candidate):\n    assert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n    assert candidate([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\n    assert candidate([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\n\ndef test_check():\n    check(index_minimum)\n\ntest_check()\n", "sample_io": ["assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> str:\n    if not test_list:\n        raise ValueError(\"Input list is empty\")\n    min_tuple = min(test_list, key=lambda x: x[1])\n    return min_tuple[0]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> str:\n    if not test_list:\n        raise ValueError(\"Input list is empty\")\n    min_tuple = min(test_list, key=lambda x: x[1])\n    return min_tuple[0]\n```"], "prompt_tokens": [563], "completion_tokens": [463], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_94_index_minimum"}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "Python3", "prompt": "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Sum_Of_Powers_Of_Two", "test": "def check(candidate):\n    assert candidate(10) == True\n    assert candidate(7) == False\n    assert candidate(14) == True\n\ndef test_check():\n    check(is_Sum_Of_Powers_Of_Two)\n\ntest_check()\n", "sample_io": ["assert is_Sum_Of_Powers_Of_Two(10) == True"], "source_codes": ["\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    \"\"\"\n    Check whether the given number n can be represented as sum of non-zero powers of 2.\n    Non-zero powers of 2 means powers 2^1, 2^2, 2^3, ...\n    \"\"\"\n    if n < 2:\n        return False\n    return (n & 1) == 0\n\n\n"], "responses": ["```python\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    \"\"\"\n    Check whether the given number n can be represented as sum of non-zero powers of 2.\n    Non-zero powers of 2 means powers 2^1, 2^2, 2^3, ...\n    \"\"\"\n    if n < 2:\n        return False\n    return (n & 1) == 0\n```"], "prompt_tokens": [1391], "completion_tokens": [1330], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_138_is_Sum_Of_Powers_Of_Two"}
{"name": "mbpp_594_diff_even_odd", "language": "Python3", "prompt": "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the difference of the first even and first odd number of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "diff_even_odd", "test": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 4, 1, 6, 8]) == 3\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\n    assert candidate([1, 5, 7, 9, 10]) == 9\n\ndef test_check():\n    check(diff_even_odd)\n\ntest_check()\n", "sample_io": ["assert diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 3"], "source_codes": ["\nfrom typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number\")\n    \n    return first_even - first_odd\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number\")\n    \n    return first_even - first_odd\n```"], "prompt_tokens": [596], "completion_tokens": [611], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_594_diff_even_odd"}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "Python3", "prompt": "def even_binomial_Coeff_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_274_even_binomial_Coeff_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "even_binomial_Coeff_Sum", "test": "def check(candidate):\n    assert candidate(4) == 8\n    assert candidate(6) == 32\n    assert candidate(2) == 2\n\ndef test_check():\n    check(even_binomial_Coeff_Sum)\n\ntest_check()\n", "sample_io": ["assert even_binomial_Coeff_Sum(4) == 8"], "source_codes": ["\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    \"\"\"\n    Return the sum of the binomial coefficients with even indices for given n.\n    Using formula: sum of even indexed binomial coefficients = 2^(n-1)\n    \"\"\"\n    if n == 0:\n        return 1  # sum C(0,0) = 1, since only one term\n    return 2 ** (n - 1)\n\n\n"], "responses": ["```python\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    \"\"\"\n    Return the sum of the binomial coefficients with even indices for given n.\n    Using formula: sum of even indexed binomial coefficients = 2^(n-1)\n    \"\"\"\n    if n == 0:\n        return 1  # sum C(0,0) = 1, since only one term\n    return 2 ** (n - 1)\n```"], "prompt_tokens": [963], "completion_tokens": [916], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_274_even_binomial_Coeff_Sum"}
{"name": "mbpp_126_sum", "language": "Python3", "prompt": "def sum(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of common divisors of two given numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum", "test": "def check(candidate):\n    assert candidate(10, 15) == 6\n    assert candidate(100, 150) == 93\n    assert candidate(4, 6) == 3\n\ndef test_check():\n    check(sum)\n\ntest_check()\n", "sample_io": ["assert sum(10, 15) == 6"], "source_codes": ["\ndef sum(a: int, b: int) -> int:\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    import math\n    \n    gcd_val = math.gcd(a, b)\n    total = 0\n    for i in range(1, int(math.sqrt(gcd_val)) + 1):\n        if gcd_val % i == 0:\n            total += i\n            if i != gcd_val // i:\n                total += gcd_val // i\n    return total\n\n\n"], "responses": ["```python\ndef sum(a: int, b: int) -> int:\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    import math\n    \n    gcd_val = math.gcd(a, b)\n    total = 0\n    for i in range(1, int(math.sqrt(gcd_val)) + 1):\n        if gcd_val % i == 0:\n            total += i\n            if i != gcd_val // i:\n                total += gcd_val // i\n    return total\n```"], "prompt_tokens": [649], "completion_tokens": [632], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_126_sum"}
{"name": "mbpp_769_Diff", "language": "Python3", "prompt": "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to get the difference between two lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Diff", "test": "def check(candidate):\n    assert candidate([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]\n    assert candidate([1, 2, 3, 4, 5], [6, 7, 1]) == [2, 3, 4, 5, 6, 7]\n    assert candidate([1, 2, 3], [6, 7, 1]) == [2, 3, 6, 7]\n\ndef test_check():\n    check(Diff)\n\ntest_check()\n", "sample_io": ["assert Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]"], "source_codes": ["\nfrom typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    \"\"\"\n    Return a list containing elements present in li1 but not in li2.\n    \"\"\"\n    set_li2 = set(li2)\n    return [item for item in li1 if item not in set_li2]\n\n# Test cases\nprint(Diff([1, 2, 3, 4], [2, 4]))  # Expected output: [1, 3]\nprint(Diff([7, 8, 9], [10, 9, 8]))  # Expected output: [7]\nprint(Diff([1, 2, 3], [1, 2, 3]))  # Expected output: []\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    \"\"\"\n    Return a list containing elements present in li1 but not in li2.\n    \"\"\"\n    set_li2 = set(li2)\n    return [item for item in li1 if item not in set_li2]\n\n# Test cases\nprint(Diff([1, 2, 3, 4], [2, 4]))  # Expected output: [1, 3]\nprint(Diff([7, 8, 9], [10, 9, 8]))  # Expected output: [7]\nprint(Diff([1, 2, 3], [1, 2, 3]))  # Expected output: []\n```"], "prompt_tokens": [485], "completion_tokens": [509], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_769_Diff"}
{"name": "mbpp_796_return_sum", "language": "Python3", "prompt": "from typing import Dict\n\ndef return_sum(dict: Dict[str, int]) -> int:\n    \"\"\"\n\tWrite function to find the sum of all items in the given dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "return_sum", "test": "def check(candidate):\n    assert candidate({ 'a': 100, 'b': 200, 'c': 300 }) == 600\n    assert candidate({ 'a': 25, 'b': 18, 'c': 45 }) == 88\n    assert candidate({ 'a': 36, 'b': 39, 'c': 49 }) == 124\n\ndef test_check():\n    check(return_sum)\n\ntest_check()\n", "sample_io": ["assert return_sum({ 'a': 100, 'b': 200, 'c': 300 }) == 600"], "source_codes": ["\nfrom typing import Dict\n\ndef return_sum(dict: Dict[str, int]) -> int:\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    return sum(dict.values())\n\n\n"], "responses": ["```python\nfrom typing import Dict\n\ndef return_sum(dict: Dict[str, int]) -> int:\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    return sum(dict.values())\n```"], "prompt_tokens": [299], "completion_tokens": [211], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_796_return_sum"}
{"name": "mbpp_574_surfacearea_cylinder", "language": "Python3", "prompt": "def surfacearea_cylinder(r: int, h: int) -> float:\n    \"\"\"\n\tWrite a function to find the surface area of a cylinder.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "surfacearea_cylinder", "test": "def check(candidate):\n    assert candidate(10, 5) == 942.45\n    assert candidate(4, 5) == 226.18800000000002\n    assert candidate(4, 10) == 351.848\n\ndef test_check():\n    check(surfacearea_cylinder)\n\ntest_check()\n", "sample_io": ["assert surfacearea_cylinder(10, 5) == 942.45"], "source_codes": ["\nimport math\n\ndef surfacearea_cylinder(r: int, h: int) -> float:\n    \"\"\"\n    Calculate the surface area of a cylinder given radius and height.\n    \"\"\"\n    lateral_area = 2 * math.pi * r * h\n    base_area = 2 * math.pi * r**2\n    total_surface_area = lateral_area + base_area\n    return total_surface_area\n\nprint(surfacearea_cylinder(3, 5))  # Example output\n\n\n"], "responses": ["```python\nimport math\n\ndef surfacearea_cylinder(r: int, h: int) -> float:\n    \"\"\"\n    Calculate the surface area of a cylinder given radius and height.\n    \"\"\"\n    lateral_area = 2 * math.pi * r * h\n    base_area = 2 * math.pi * r**2\n    total_surface_area = lateral_area + base_area\n    return total_surface_area\n\nprint(surfacearea_cylinder(3, 5))  # Example output\n```"], "prompt_tokens": [362], "completion_tokens": [335], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_574_surfacearea_cylinder"}
{"name": "mbpp_783_rgb_to_hsv", "language": "Python3", "prompt": "from typing import List\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> List[float]:\n    \"\"\"\n\tWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rgb_to_hsv", "test": "def check(candidate):\n    assert candidate(255, 255, 255) == [0.0, 0.0, 100.0]\n    assert candidate(0, 215, 0) == [120.0, 100.0, 84.31372549019608]\n    assert candidate(10, 215, 110) == [149.26829268292684, 95.34883720930233, 84.31372549019608]\n\ndef test_check():\n    check(rgb_to_hsv)\n\ntest_check()\n", "sample_io": ["assert rgb_to_hsv(255, 255, 255) == [0.0, 0.0, 100.0]"], "source_codes": ["\nfrom typing import List\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> List[float]:\n    # Normalize RGB values to [0, 1]\n    r_prime = r / 255.0\n    g_prime = g / 255.0\n    b_prime = b / 255.0\n\n    c_max = max(r_prime, g_prime, b_prime)\n    c_min = min(r_prime, g_prime, b_prime)\n    delta = c_max - c_min\n\n    # Compute Hue\n    if delta == 0:\n        h = 0\n    elif c_max == r_prime:\n        h = 60 * (((g_prime - b_prime) / delta) % 6)\n    elif c_max == g_prime:\n        h = 60 * (((b_prime - r_prime) / delta) + 2)\n    else:  # c_max == b_prime\n        h = 60 * (((r_prime - g_prime) / delta) + 4)\n\n    # Compute Saturation\n    s = 0 if c_max == 0 else delta / c_max\n\n    # Compute Value\n    v = c_max\n\n    return [h, s, v]\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(rgb_to_hsv(255, 0, 0))  # Pure Red -> [0.0, 1.0, 1.0]\n    print(rgb_to_hsv(0, 255, 0))  # Pure Green -> [120.0, 1.0, 1.0]\n    print(rgb_to_hsv(0, 0, 255))  # Pure Blue -> [240.0, 1.0, 1.0]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> List[float]:\n    # Normalize RGB values to [0, 1]\n    r_prime = r / 255.0\n    g_prime = g / 255.0\n    b_prime = b / 255.0\n\n    c_max = max(r_prime, g_prime, b_prime)\n    c_min = min(r_prime, g_prime, b_prime)\n    delta = c_max - c_min\n\n    # Compute Hue\n    if delta == 0:\n        h = 0\n    elif c_max == r_prime:\n        h = 60 * (((g_prime - b_prime) / delta) % 6)\n    elif c_max == g_prime:\n        h = 60 * (((b_prime - r_prime) / delta) + 2)\n    else:  # c_max == b_prime\n        h = 60 * (((r_prime - g_prime) / delta) + 4)\n\n    # Compute Saturation\n    s = 0 if c_max == 0 else delta / c_max\n\n    # Compute Value\n    v = c_max\n\n    return [h, s, v]\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(rgb_to_hsv(255, 0, 0))  # Pure Red -> [0.0, 1.0, 1.0]\n    print(rgb_to_hsv(0, 255, 0))  # Pure Green -> [120.0, 1.0, 1.0]\n    print(rgb_to_hsv(0, 0, 255))  # Pure Blue -> [240.0, 1.0, 1.0]\n```"], "prompt_tokens": [884], "completion_tokens": [1076], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_783_rgb_to_hsv"}
{"name": "mbpp_70_get_equal", "language": "Python3", "prompt": "from typing import List\n\ndef get_equal(Input: List[List[int]]) -> bool:\n    \"\"\"\n\tWrite a function to find whether all the given lists have equal length or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_equal", "test": "def check(candidate):\n    assert candidate([[11, 22, 33], [44, 55, 66]]) == True\n    assert candidate([[1, 2, 3], [4, 5, 6, 7]]) == False\n    assert candidate([[1, 2], [3, 4]]) == True\n\ndef test_check():\n    check(get_equal)\n\ntest_check()\n", "sample_io": ["assert get_equal([[11, 22, 33], [44, 55, 66]]) == True"], "source_codes": ["\nfrom typing import List\n\ndef get_equal(Input: List[List[int]]) -> bool:\n    \"\"\"\n    Write a function to find whether all the given lists have equal length or not.\n    \"\"\"\n    if not Input:\n        return True\n    \n    first_length = len(Input[0])\n    for lst in Input:\n        if len(lst) != first_length:\n            return False\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef get_equal(Input: List[List[int]]) -> bool:\n    \"\"\"\n    Write a function to find whether all the given lists have equal length or not.\n    \"\"\"\n    if not Input:\n        return True\n    \n    first_length = len(Input[0])\n    for lst in Input:\n        if len(lst) != first_length:\n            return False\n    return True\n```"], "prompt_tokens": [374], "completion_tokens": [320], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_70_get_equal"}
{"name": "mbpp_267_square_Sum", "language": "Python3", "prompt": "def square_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "square_Sum", "test": "def check(candidate):\n    assert candidate(2) == 10\n    assert candidate(3) == 35\n    assert candidate(4) == 84\n\ndef test_check():\n    check(square_Sum)\n\ntest_check()\n", "sample_io": ["assert square_Sum(2) == 10"], "source_codes": ["\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Approach 1: Iterative\n    total = 0\n    for i in range(1, n+1):\n        odd_num = 2*i - 1\n        total += odd_num ** 2\n    return total\n\n    # Approach 2: Using formula\n    # return n * (2*n + 1) * (2*n - 1) // 3\n\n\n"], "responses": ["```python\ndef square_Sum(n: int) -> int:\n    \"\"\"\n    Returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Approach 1: Iterative\n    total = 0\n    for i in range(1, n+1):\n        odd_num = 2*i - 1\n        total += odd_num ** 2\n    return total\n\n    # Approach 2: Using formula\n    # return n * (2*n + 1) * (2*n - 1) // 3\n```"], "prompt_tokens": [583], "completion_tokens": [558], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_267_square_Sum"}
{"name": "mbpp_171_perimeter_pentagon", "language": "Python3", "prompt": "def perimeter_pentagon(a: int) -> int:\n    \"\"\"\n\tWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "perimeter_pentagon", "test": "def check(candidate):\n    assert candidate(5) == 25\n    assert candidate(10) == 50\n    assert candidate(15) == 75\n\ndef test_check():\n    check(perimeter_pentagon)\n\ntest_check()\n", "sample_io": ["assert perimeter_pentagon(5) == 25"], "source_codes": ["\ndef perimeter_pentagon(a: int) -> int:\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    return 5 * a\n\n\n"], "responses": ["```python\ndef perimeter_pentagon(a: int) -> int:\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    return 5 * a\n```"], "prompt_tokens": [235], "completion_tokens": [149], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_171_perimeter_pentagon"}
{"name": "mbpp_222_check_type", "language": "Python3", "prompt": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_type", "test": "def check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n", "sample_io": ["assert check_type((5, 6, 7, 3, 5, 6)) == True"], "source_codes": ["\nfrom typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n    \n    if len(test_tuple) <= 1:\n        return True\n    \n    first_type = type(test_tuple[0])\n    \n    for element in test_tuple[1:]:\n        if type(element) != first_type:\n            return False\n    \n    return True\n\n\n"], "responses": ["```python\nfrom typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n    \n    if len(test_tuple) <= 1:\n        return True\n    \n    first_type = type(test_tuple[0])\n    \n    for element in test_tuple[1:]:\n        if type(element) != first_type:\n            return False\n    \n    return True\n```"], "prompt_tokens": [588], "completion_tokens": [563], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_222_check_type"}
{"name": "mbpp_164_are_equivalent", "language": "Python3", "prompt": "def are_equivalent(num1: int, num2: int) -> bool:\n    \"\"\"\n\tWrite a function to determine if the sum of the divisors of two integers are the same.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "are_equivalent", "test": "def check(candidate):\n    assert candidate(36, 57) == False\n    assert candidate(2, 4) == False\n    assert candidate(23, 47) == True\n\ndef test_check():\n    check(are_equivalent)\n\ntest_check()\n", "sample_io": ["assert are_equivalent(36, 57) == False"], "source_codes": ["\ndef sum_of_divisors(n: int) -> int:\n    total = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n        i += 1\n    return total\n\ndef are_equivalent(num1: int, num2: int) -> bool:\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n\n\n"], "responses": ["```python\ndef sum_of_divisors(n: int) -> int:\n    total = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n        i += 1\n    return total\n\ndef are_equivalent(num1: int, num2: int) -> bool:\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n```"], "prompt_tokens": [608], "completion_tokens": [574], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_164_are_equivalent"}
{"name": "mbpp_803_is_perfect_square", "language": "Python3", "prompt": "def is_perfect_square(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_perfect_square", "test": "def check(candidate):\n    assert candidate(10) == False\n    assert candidate(36) == True\n    assert candidate(14) == False\n    assert candidate(196) == True\n    assert candidate(125) == False\n    assert candidate(15625) == True\n\ndef test_check():\n    check(is_perfect_square)\n\ntest_check()\n", "sample_io": ["assert is_perfect_square(10) == False"], "source_codes": ["\nimport math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n\n\n\n"], "responses": ["```python\nimport math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n\n```"], "prompt_tokens": [552], "completion_tokens": [429], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_803_is_perfect_square"}
{"name": "mbpp_305_start_withp", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "start_withp", "test": "def check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n", "sample_io": ["assert start_withp(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = [w for w in words if w.lower().startswith('p')]\n    \n    if len(p_words) < 2:\n        raise ValueError(\"Fewer than two words starting with 'p' found.\")\n    \n    return (p_words[0], p_words[1])\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = [w for w in words if w.lower().startswith('p')]\n    \n    if len(p_words) < 2:\n        raise ValueError(\"Fewer than two words starting with 'p' found.\")\n    \n    return (p_words[0], p_words[1])\n```"], "prompt_tokens": [511], "completion_tokens": [468], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_305_start_withp"}
{"name": "mbpp_617_min_Jumps", "language": "Python3", "prompt": "from typing import Tuple\n\ndef min_Jumps(steps: Tuple[int, int], d: int) -> float:\n    \"\"\"\n\tWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_Jumps", "test": "def check(candidate):\n    assert candidate((3, 4), 11) == 3.5\n    assert candidate((3, 4), 0) == 0\n    assert candidate((11, 14), 11) == 1\n\ndef test_check():\n    check(min_Jumps)\n\ntest_check()\n", "sample_io": ["assert min_Jumps((3, 4), 11) == 3.5"], "source_codes": ["\nfrom typing import Tuple\nimport math\n\ndef min_Jumps(steps: Tuple[int, int], d: int) -> int:\n    x, y = steps\n    dist = math.sqrt(x*x + y*y)\n    \n    if dist == 0:\n        return 0\n    elif dist == d:\n        return 1\n    elif dist < d:\n        return 2\n    else:\n        return math.ceil(dist / d)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\nimport math\n\ndef min_Jumps(steps: Tuple[int, int], d: int) -> int:\n    x, y = steps\n    dist = math.sqrt(x*x + y*y)\n    \n    if dist == 0:\n        return 0\n    elif dist == d:\n        return 1\n    elif dist < d:\n        return 2\n    else:\n        return math.ceil(dist / d)\n```"], "prompt_tokens": [1033], "completion_tokens": [940], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_617_min_Jumps"}
{"name": "mbpp_117_list_to_float", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef list_to_float(test_list: List[Tuple[str, str]]) -> List[Tuple[float, float]]:\n    \"\"\"\n\tWrite a function to convert all possible convertible elements in a list of lists to floats.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "list_to_float", "test": "def check(candidate):\n    assert candidate([('3', '4'), ('1', '26.45'), ('7.32', '8'), ('4', '8')]) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n    assert candidate([('4', '4'), ('2', '27'), ('4.12', '9'), ('7', '11')]) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\n    assert candidate([('6', '78'), ('5', '26.45'), ('1.33', '4'), ('82', '13')]) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\n\ndef test_check():\n    check(list_to_float)\n\ntest_check()\n", "sample_io": ["assert list_to_float([('3', '4'), ('1', '26.45'), ('7.32', '8'), ('4', '8')]) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]"], "source_codes": ["\nfrom typing import List, Tuple, Optional\n\ndef list_to_float(test_list: List[Tuple[str, str]]) -> List[Tuple[Optional[float], Optional[float]]]:\n    \"\"\"\n    Convert all possible convertible elements in a list of tuples of strings to floats.\n    Elements that cannot be converted are replaced with None.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        converted = []\n        for elem in tup:\n            try:\n                converted.append(float(elem))\n            except ValueError:\n                converted.append(None)\n        result.append(tuple(converted))\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple, Optional\n\ndef list_to_float(test_list: List[Tuple[str, str]]) -> List[Tuple[Optional[float], Optional[float]]]:\n    \"\"\"\n    Convert all possible convertible elements in a list of tuples of strings to floats.\n    Elements that cannot be converted are replaced with None.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        converted = []\n        for elem in tup:\n            try:\n                converted.append(float(elem))\n            except ValueError:\n                converted.append(None)\n        result.append(tuple(converted))\n    return result\n```"], "prompt_tokens": [617], "completion_tokens": [574], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_117_list_to_float"}
{"name": "mbpp_425_count_element_in_list", "language": "Python3", "prompt": "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    \"\"\"\n\tWrite a function to count the number of sublists containing a particular element.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_425_count_element_in_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_element_in_list", "test": "def check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'A') == 3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'E') == 1\n\ndef test_check():\n    check(count_element_in_list)\n\ntest_check()\n", "sample_io": ["assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3"], "source_codes": ["\nfrom typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n```"], "prompt_tokens": [428], "completion_tokens": [354], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_425_count_element_in_list"}
{"name": "mbpp_67_bell_number", "language": "Python3", "prompt": "def bell_number(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the number of ways to partition a set of Bell numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "bell_number", "test": "def check(candidate):\n    assert candidate(2) == 2\n    assert candidate(10) == 115975\n    assert candidate(56) == 6775685320645824322581483068371419745979053216268760300\n\ndef test_check():\n    check(bell_number)\n\ntest_check()\n", "sample_io": ["assert bell_number(2) == 2"], "source_codes": ["\ndef bell_number(n: int) -> int:\n    \"\"\"\n    Compute the nth Bell number, the number of ways to partition a set of n elements.\n    \"\"\"\n    if n == 0:\n        return 1\n\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n\n        for j in range(1, i+1):\n            bell[i][j] = bell[i][j-1] + bell[i-1][j-1]\n\n    return bell[n][0]\n\n\n"], "responses": ["```python\ndef bell_number(n: int) -> int:\n    \"\"\"\n    Compute the nth Bell number, the number of ways to partition a set of n elements.\n    \"\"\"\n    if n == 0:\n        return 1\n\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n\n        for j in range(1, i+1):\n            bell[i][j] = bell[i][j-1] + bell[i-1][j-1]\n\n    return bell[n][0]\n```"], "prompt_tokens": [563], "completion_tokens": [590], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_67_bell_number"}
{"name": "mbpp_404_minimum", "language": "Python3", "prompt": "def minimum(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a python function to find the minimum of two numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_404_minimum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "minimum", "test": "def check(candidate):\n    assert candidate(1, 2) == 1\n    assert candidate(-5, -4) == -5\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(minimum)\n\ntest_check()\n", "sample_io": ["assert minimum(1, 2) == 1"], "source_codes": ["\ndef minimum(a: int, b: int) -> int:\n    if a <= b:\n        return a\n    else:\n        return b\n\n\n"], "responses": ["```python\ndef minimum(a: int, b: int) -> int:\n    if a <= b:\n        return a\n    else:\n        return b\n```"], "prompt_tokens": [293], "completion_tokens": [205], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_404_minimum"}
{"name": "mbpp_14_find_Volume", "language": "Python3", "prompt": "def find_Volume(l: int, b: int, h: int) -> int:\n    \"\"\"\n\tWrite a python function to find the volume of a triangular prism.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Volume", "test": "def check(candidate):\n    assert candidate(10, 8, 6) == 240\n    assert candidate(3, 2, 2) == 6\n    assert candidate(1, 2, 1) == 1\n\ndef test_check():\n    check(find_Volume)\n\ntest_check()\n", "sample_io": ["assert find_Volume(10, 8, 6) == 240"], "source_codes": ["\ndef find_Volume(l: int, b: int, h: int) -> int:\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \n    Parameters:\n    l (int): length of the prism\n    b (int): base of the triangular face\n    h (int): height of the triangular face\n\n    Returns:\n    int: volume of the triangular prism\n    \"\"\"\n    volume = (1/2) * b * h * l\n    return int(volume)\n\n\n"], "responses": ["```python\ndef find_Volume(l: int, b: int, h: int) -> int:\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \n    Parameters:\n    l (int): length of the prism\n    b (int): base of the triangular face\n    h (int): height of the triangular face\n\n    Returns:\n    int: volume of the triangular prism\n    \"\"\"\n    volume = (1/2) * b * h * l\n    return int(volume)\n```"], "prompt_tokens": [503], "completion_tokens": [477], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_14_find_Volume"}
{"name": "mbpp_8_square_nums", "language": "Python3", "prompt": "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find squares of individual elements in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "square_nums", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10, 20, 30]) == [100, 400, 900]\n    assert candidate([12, 15]) == [144, 225]\n\ndef test_check():\n    check(square_nums)\n\ntest_check()\n", "sample_io": ["assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"], "source_codes": ["\nfrom typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]\n```"], "prompt_tokens": [430], "completion_tokens": [332], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_8_square_nums"}
{"name": "mbpp_722_filter_data", "language": "Python3", "prompt": "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, int]], h: float, w: int) -> Dict[str, Tuple[float, int]]:\n    \"\"\"\n\tThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "filter_data", "test": "def check(candidate):\n    assert candidate({ 'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66) }, 6.0, 70) == { 'Cierra Vega': (6.2, 70) }\n    assert candidate({ 'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66) }, 5.9, 67) == { 'Cierra Vega': (6.2, 70), 'Kierra Gentry': (6.0, 68) }\n    assert candidate({ 'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66) }, 5.7, 64) == { 'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66) }\n\ndef test_check():\n    check(filter_data)\n\ntest_check()\n", "sample_io": ["assert filter_data({ 'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66) }, 6.0, 70) == { 'Cierra Vega': (6.2, 70) }"], "source_codes": ["\nfrom typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, int]], h: float, w: int) -> Dict[str, Tuple[float, int]]:\n    return {student: (height, weight) for student, (height, weight) in students.items() if height > h and weight > w}\n\n\n"], "responses": ["```python\nfrom typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, int]], h: float, w: int) -> Dict[str, Tuple[float, int]]:\n    return {student: (height, weight) for student, (height, weight) in students.items() if height > h and weight > w}\n```"], "prompt_tokens": [627], "completion_tokens": [445], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_722_filter_data"}
{"name": "mbpp_244_next_Perfect_Square", "language": "Python3", "prompt": "def next_Perfect_Square(N: int) -> int:\n    \"\"\"\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "next_Perfect_Square", "test": "def check(candidate):\n    assert candidate(35) == 36\n    assert candidate(6) == 9\n    assert candidate(9) == 16\n\ndef test_check():\n    check(next_Perfect_Square)\n\ntest_check()\n", "sample_io": ["assert next_Perfect_Square(35) == 36"], "source_codes": ["\ndef next_Perfect_Square(N: int) -> int:\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    import math\n\n    # Step 1: Find the integer square root of N\n    k = int(math.sqrt(N))\n\n    # Step 2: Compute the next perfect square\n    next_square = (k + 1) ** 2\n    \n    return next_square\n\n\n"], "responses": ["```python\ndef next_Perfect_Square(N: int) -> int:\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    import math\n\n    # Step 1: Find the integer square root of N\n    k = int(math.sqrt(N))\n\n    # Step 2: Compute the next perfect square\n    next_square = (k + 1) ** 2\n    \n    return next_square\n```"], "prompt_tokens": [376], "completion_tokens": [342], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_244_next_Perfect_Square"}
{"name": "mbpp_755_second_smallest", "language": "Python3", "prompt": "from typing import List, Union, Optional\n\ndef second_smallest(numbers: List[Union[int, float]]) -> Optional[float]:\n    \"\"\"\n\tWrite a function to find the second smallest number in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "second_smallest", "test": "def check(candidate):\n    assert candidate([1, 2, -8, -2, 0, -2]) == -2\n    assert candidate([1, 1, -0.5, 0, 2, -2, -2]) == -0.5\n    assert candidate([2, 2]) == None\n    assert candidate([2, 2, 2]) == None\n\ndef test_check():\n    check(second_smallest)\n\ntest_check()\n", "sample_io": ["assert second_smallest([1, 2, -8, -2, 0, -2]) == -2"], "source_codes": ["\nfrom typing import List, Union, Optional\n\ndef second_smallest(numbers: List[Union[int, float]]) -> Optional[float]:\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    Returns None if there isn't a second smallest number.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n\n    unique_numbers = set(numbers)\n    if len(unique_numbers) < 2:\n        return None\n\n    sorted_numbers = sorted(unique_numbers)\n    return float(sorted_numbers[1])\n\n\n"], "responses": ["```python\nfrom typing import List, Union, Optional\n\ndef second_smallest(numbers: List[Union[int, float]]) -> Optional[float]:\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    Returns None if there isn't a second smallest number.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n\n    unique_numbers = set(numbers)\n    if len(unique_numbers) < 2:\n        return None\n\n    sorted_numbers = sorted(unique_numbers)\n    return float(sorted_numbers[1])\n```"], "prompt_tokens": [463], "completion_tokens": [423], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_755_second_smallest"}
{"name": "mbpp_405_check_tuplex", "language": "Python3", "prompt": "from typing import List, Union, Any\n\ndef check_tuplex(tuplex: List[Union[str, int]], tuple1: Any) -> bool:\n    \"\"\"\n\tWrite a function to check whether an element exists within a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_405_check_tuplex.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_tuplex", "test": "def check(candidate):\n    assert candidate(['w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'], 'r') == True\n    assert candidate(['w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'], '5') == False\n    assert candidate(['w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'], 3) == True\n\ndef test_check():\n    check(check_tuplex)\n\ntest_check()\n", "sample_io": ["assert check_tuplex(['w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'], 'r') == True"], "source_codes": ["\nfrom typing import List, Union\n\ndef check_tuplex(tuplex: List[Union[str, int]], tuple1: tuple) -> bool:\n    \"\"\"\n    Check whether any element in the list 'tuplex' exists in the tuple 'tuple1'.\n\n    Args:\n        tuplex (List[Union[str, int]]): List of elements to check.\n        tuple1 (tuple): Tuple in which to check elements.\n\n    Returns:\n        bool: True if at least one element in tuplex exists in tuple1, else False.\n    \"\"\"\n    return any(element in tuple1 for element in tuplex)\n\n# Example usage:\nprint(check_tuplex(['a', 'b', 3], ('a', 'c', 5)))  # True\nprint(check_tuplex([7, 8], (1, 2, 3)))             # False\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef check_tuplex(tuplex: List[Union[str, int]], tuple1: tuple) -> bool:\n    \"\"\"\n    Check whether any element in the list 'tuplex' exists in the tuple 'tuple1'.\n\n    Args:\n        tuplex (List[Union[str, int]]): List of elements to check.\n        tuple1 (tuple): Tuple in which to check elements.\n\n    Returns:\n        bool: True if at least one element in tuplex exists in tuple1, else False.\n    \"\"\"\n    return any(element in tuple1 for element in tuplex)\n\n# Example usage:\nprint(check_tuplex(['a', 'b', 3], ('a', 'c', 5)))  # True\nprint(check_tuplex([7, 8], (1, 2, 3)))             # False\n```"], "prompt_tokens": [791], "completion_tokens": [813], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_405_check_tuplex"}
{"name": "mbpp_292_find", "language": "Python3", "prompt": "def find(n: int, m: int) -> int:\n    \"\"\"\n\tWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find", "test": "def check(candidate):\n    assert candidate(10, 3) == 3\n    assert candidate(4, 2) == 2\n    assert candidate(20, 5) == 4\n\ndef test_check():\n    check(find)\n\ntest_check()\n", "sample_io": ["assert find(10, 3) == 3"], "source_codes": ["\ndef find(n: int, m: int) -> int:\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m\n\n\n"], "responses": ["```python\ndef find(n: int, m: int) -> int:\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m\n```"], "prompt_tokens": [319], "completion_tokens": [232], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_292_find"}
{"name": "mbpp_603_get_ludic", "language": "Python3", "prompt": "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    \"\"\"\n\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_603_get_ludic.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_ludic", "test": "def check(candidate):\n    assert candidate(10) == [1, 2, 3, 5, 7]\n    assert candidate(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n    assert candidate(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n\ndef test_check():\n    check(get_ludic)\n\ntest_check()\n", "sample_io": ["assert get_ludic(10) == [1, 2, 3, 5, 7]"], "source_codes": ["\nfrom typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    numbers = list(range(1, n+1))\n    ludics = []\n    index = 0\n    while index < len(numbers):\n        l = numbers[index]\n        ludics.append(l)\n        filtered = []\n        count = 0\n        for i, num in enumerate(numbers):\n            if i <= index:\n                filtered.append(num)\n            else:\n                count += 1\n                if count % l != 0:\n                    filtered.append(num)\n        numbers = filtered\n        index += 1\n    return [x for x in ludics if x <= n]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    numbers = list(range(1, n+1))\n    ludics = []\n    index = 0\n    while index < len(numbers):\n        l = numbers[index]\n        ludics.append(l)\n        filtered = []\n        count = 0\n        for i, num in enumerate(numbers):\n            if i <= index:\n                filtered.append(num)\n            else:\n                count += 1\n                if count % l != 0:\n                    filtered.append(num)\n        numbers = filtered\n        index += 1\n    return [x for x in ludics if x <= n]\n```"], "prompt_tokens": [1125], "completion_tokens": [1124], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_603_get_ludic"}
{"name": "mbpp_734_sum_Of_Subarray_Prod", "language": "Python3", "prompt": "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_Of_Subarray_Prod", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 20\n    assert candidate([1, 2]) == 5\n    assert candidate([1, 2, 3, 4]) == 84\n\ndef test_check():\n    check(sum_Of_Subarray_Prod)\n\ntest_check()\n", "sample_io": ["assert sum_Of_Subarray_Prod([1, 2, 3]) == 20"], "source_codes": ["\nfrom typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    total_sum = dp[0]\n    \n    for i in range(1, n):\n        dp[i] = arr[i] + arr[i] * dp[i-1]\n        total_sum += dp[i]\n    \n    return total_sum\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    total_sum = dp[0]\n    \n    for i in range(1, n):\n        dp[i] = arr[i] + arr[i] * dp[i-1]\n        total_sum += dp[i]\n    \n    return total_sum\n```"], "prompt_tokens": [845], "completion_tokens": [757], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_734_sum_Of_Subarray_Prod"}
{"name": "mbpp_563_extract_values", "language": "Python3", "prompt": "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    \"\"\"\n\tWrite a function to extract values between quotation marks from a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_values", "test": "def check(candidate):\n    assert candidate('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']\n    assert candidate('\"python\",\"program\",\"language\"') == ['python', 'program', 'language']\n    assert candidate('\"red\",\"blue\",\"green\",\"yellow\"') == ['red', 'blue', 'green', 'yellow']\n\ndef test_check():\n    check(extract_values)\n\ntest_check()\n", "sample_io": ["assert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']"], "source_codes": ["\nimport re\nfrom typing import List\n\ndef extract_values(text: str) -> List[str]:\n    \"\"\"\n    Extract values between double quotation marks from a string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)\n\n\n"], "responses": ["```python\nimport re\nfrom typing import List\n\ndef extract_values(text: str) -> List[str]:\n    \"\"\"\n    Extract values between double quotation marks from a string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)\n```"], "prompt_tokens": [358], "completion_tokens": [285], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_563_extract_values"}
{"name": "mbpp_567_issort_list", "language": "Python3", "prompt": "from typing import List\n\ndef issort_list(list1: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check whether a specified list is sorted or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "issort_list", "test": "def check(candidate):\n    assert candidate([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True\n    assert candidate([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == False\n    assert candidate([1, 2, 4, 6, 8, 10, 15, 14, 20]) == False\n\ndef test_check():\n    check(issort_list)\n\ntest_check()\n", "sample_io": ["assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True"], "source_codes": ["\nfrom typing import List\n\ndef issort_list(list1: List[int]) -> bool:\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef issort_list(list1: List[int]) -> bool:\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n```"], "prompt_tokens": [478], "completion_tokens": [418], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_567_issort_list"}
{"name": "mbpp_475_sort_counter", "language": "Python3", "prompt": "from typing import Dict, List, Tuple\n\ndef sort_counter(dict1: Dict[str, int]) -> List[Tuple[str, int]]:\n    \"\"\"\n\tWrite a function to sort a dictionary by value.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_counter", "test": "def check(candidate):\n    assert candidate({ 'Math': 81, 'Physics': 83, 'Chemistry': 87 }) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    assert candidate({ 'Math': 400, 'Physics': 300, 'Chemistry': 250 }) == [('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    assert candidate({ 'Math': 900, 'Physics': 1000, 'Chemistry': 1250 }) == [('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n\ndef test_check():\n    check(sort_counter)\n\ntest_check()\n", "sample_io": ["assert sort_counter({ 'Math': 81, 'Physics': 83, 'Chemistry': 87 }) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]"], "source_codes": ["\nfrom typing import Dict, List, Tuple\n\ndef sort_counter(dict1: Dict[str, int]) -> List[Tuple[str, int]]:\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_items = sorted(dict1.items(), key=lambda item: item[1])\n    return sorted_items\n\n\n"], "responses": ["```python\nfrom typing import Dict, List, Tuple\n\ndef sort_counter(dict1: Dict[str, int]) -> List[Tuple[str, int]]:\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_items = sorted(dict1.items(), key=lambda item: item[1])\n    return sorted_items\n```"], "prompt_tokens": [372], "completion_tokens": [293], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_475_sort_counter"}
{"name": "mbpp_65_recursive_list_sum", "language": "Python3", "prompt": "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List[int]]]) -> int:\n    \"\"\"\n\tWrite a function to flatten a list and sum all of its elements.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "recursive_list_sum", "test": "def check(candidate):\n    assert candidate([1, 2, [3, 4], [5, 6]]) == 21\n    assert candidate([7, 10, [15, 14], [19, 41]]) == 106\n    assert candidate([10, 20, [30, 40], [50, 60]]) == 210\n\ndef test_check():\n    check(recursive_list_sum)\n\ntest_check()\n", "sample_io": ["assert recursive_list_sum([1, 2, [3, 4], [5, 6]]) == 21"], "source_codes": ["\nfrom typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, int):\n            total += element\n        elif isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            raise ValueError(f\"Invalid element type: {type(element)}\")\n    return total\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, int):\n            total += element\n        elif isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            raise ValueError(f\"Invalid element type: {type(element)}\")\n    return total\n```"], "prompt_tokens": [506], "completion_tokens": [444], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_65_recursive_list_sum"}
{"name": "mbpp_560_union_elements", "language": "Python3", "prompt": "from typing import List\n\ndef union_elements(test_tup1: List[int], test_tup2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find the union of the elements of two given lists and output them in sorted order.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "union_elements", "test": "def check(candidate):\n    assert candidate([3, 4, 5, 6], [5, 7, 4, 10]) == [3, 4, 5, 6, 7, 10]\n    assert candidate([1, 2, 3, 4], [3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert candidate([11, 12, 13, 14], [13, 15, 16, 17]) == [11, 12, 13, 14, 15, 16, 17]\n\ndef test_check():\n    check(union_elements)\n\ntest_check()\n", "sample_io": ["assert union_elements([3, 4, 5, 6], [5, 7, 4, 10]) == [3, 4, 5, 6, 7, 10]"], "source_codes": ["\nfrom typing import List\n\ndef union_elements(test_tup1: List[int], test_tup2: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to find the union of the elements of two given lists and output them in sorted order.\n    \"\"\"\n    combined_list = test_tup1 + test_tup2\n    unique_elements = set(combined_list)\n    sorted_list = sorted(list(unique_elements))\n    return sorted_list\n\n# Testing\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 3, 6, 7, 8]\n\nprint(union_elements(list1, list2))  # Output: [1, 2, 3, 5, 6, 7, 8]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef union_elements(test_tup1: List[int], test_tup2: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to find the union of the elements of two given lists and output them in sorted order.\n    \"\"\"\n    combined_list = test_tup1 + test_tup2\n    unique_elements = set(combined_list)\n    sorted_list = sorted(list(unique_elements))\n    return sorted_list\n\n# Testing\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 3, 6, 7, 8]\n\nprint(union_elements(list1, list2))  # Output: [1, 2, 3, 5, 6, 7, 8]\n```"], "prompt_tokens": [514], "completion_tokens": [511], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_560_union_elements"}
{"name": "mbpp_737_check_str", "language": "Python3", "prompt": "def check_str(string: str) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given string is starting with a vowel or not using regex.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_str", "test": "def check(candidate):\n    assert candidate('annie') == True\n    assert candidate('dawood') == False\n    assert candidate('Else') == True\n\ndef test_check():\n    check(check_str)\n\ntest_check()\n", "sample_io": ["assert check_str('annie') == True"], "source_codes": ["\nimport re\n\ndef check_str(string: str) -> bool:\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    pattern = r\"^[aeiouAEIOU]\"\n    return bool(re.match(pattern, string))\n\n\n"], "responses": ["```python\nimport re\n\ndef check_str(string: str) -> bool:\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    pattern = r\"^[aeiouAEIOU]\"\n    return bool(re.match(pattern, string))\n```"], "prompt_tokens": [320], "completion_tokens": [252], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_737_check_str"}
{"name": "mbpp_626_triangle_area", "language": "Python3", "prompt": "from typing import Optional\n\ndef triangle_area(r: int) -> Optional[int]:\n    \"\"\"\n\tWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "triangle_area", "test": "def check(candidate):\n    assert candidate(-1) == None\n    assert candidate(0) == 0\n    assert candidate(2) == 4\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n", "sample_io": ["assert triangle_area(-1) == None"], "source_codes": ["\nfrom typing import Optional\n\ndef triangle_area(r: int) -> Optional[int]:\n    \"\"\"\n    Find the area of the largest triangle that can be inscribed \n    in a semicircle with a given radius r.\n\n    The largest triangle is the right triangle with the hypotenuse as diameter,\n    and its area is r^2.\n    \"\"\"\n    if r <= 0:\n        return None\n    \n    return r * r\n\n\n"], "responses": ["```python\nfrom typing import Optional\n\ndef triangle_area(r: int) -> Optional[int]:\n    \"\"\"\n    Find the area of the largest triangle that can be inscribed \n    in a semicircle with a given radius r.\n\n    The largest triangle is the right triangle with the hypotenuse as diameter,\n    and its area is r^2.\n    \"\"\"\n    if r <= 0:\n        return None\n    \n    return r * r\n```"], "prompt_tokens": [714], "completion_tokens": [649], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_626_triangle_area"}
{"name": "mbpp_253_count_integer", "language": "Python3", "prompt": "from typing import List, Union\n\ndef count_integer(list1: List[Union[int, str, float]]) -> int:\n    \"\"\"\n\tWrite a python function that returns the number of integer elements in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_253_count_integer.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_integer", "test": "def check(candidate):\n    assert candidate([1, 2, 'abc', 1.2]) == 2\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([1, 1.2, 4, 5.1]) == 2\n\ndef test_check():\n    check(count_integer)\n\ntest_check()\n", "sample_io": ["assert count_integer([1, 2, 'abc', 1.2]) == 2"], "source_codes": ["\nfrom typing import List, Union\n\ndef count_integer(list1: List[Union[int, str, float]]) -> int:\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef count_integer(list1: List[Union[int, str, float]]) -> int:\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n```"], "prompt_tokens": [411], "completion_tokens": [317], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_253_count_integer"}
{"name": "mbpp_463_max_subarray_product", "language": "Python3", "prompt": "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum product subarray of the given array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_subarray_product", "test": "def check(candidate):\n    assert candidate([1, -2, -3, 0, 7, -8, -2]) == 112\n    assert candidate([6, -3, -10, 0, 2]) == 180\n    assert candidate([-2, -40, 0, -2, -3]) == 80\n\ndef test_check():\n    check(max_subarray_product)\n\ntest_check()\n", "sample_io": ["assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112"], "source_codes": ["\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    \n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n        \n        max_ending_here = max(num, max_ending_here * num)\n        min_ending_here = min(num, min_ending_here * num)\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    \n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n        \n        max_ending_here = max(num, max_ending_here * num)\n        min_ending_here = min(num, min_ending_here * num)\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n```"], "prompt_tokens": [706], "completion_tokens": [722], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_463_max_subarray_product"}
{"name": "mbpp_223_is_majority", "language": "Python3", "prompt": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_majority", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n    assert candidate([1, 1, 2, 2], 5, 1) == False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n", "sample_io": ["assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"], "source_codes": ["\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], x: int) -> int:\n    low, high = 0, len(arr) - 1\n    first = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            first = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return first\n\ndef find_last_occurrence(arr: List[int], x: int) -> int:\n    low, high = 0, len(arr) - 1\n    last = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return last\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    first = find_first_occurrence(arr, x)\n    if first == -1:\n        return False\n    last = find_last_occurrence(arr, x)\n    count = last - first + 1\n    return count > n // 2\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], x: int) -> int:\n    low, high = 0, len(arr) - 1\n    first = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            first = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return first\n\ndef find_last_occurrence(arr: List[int], x: int) -> int:\n    low, high = 0, len(arr) - 1\n    last = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return last\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    first = find_first_occurrence(arr, x)\n    if first == -1:\n        return False\n    last = find_last_occurrence(arr, x)\n    count = last - first + 1\n    return count > n // 2\n```"], "prompt_tokens": [1307], "completion_tokens": [1385], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_223_is_majority"}
{"name": "mbpp_794_text_starta_endb", "language": "Python3", "prompt": "def text_starta_endb(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_starta_endb", "test": "def check(candidate):\n    assert candidate('aabbbb') == True\n    assert candidate('aabAbbbc') == False\n    assert candidate('accddbbjjj') == False\n\ndef test_check():\n    check(text_starta_endb)\n\ntest_check()\n", "sample_io": ["assert text_starta_endb('aabbbb') == True"], "source_codes": ["\nimport re\n\ndef text_starta_endb(text: str) -> bool:\n    pattern = r\"^a.*b$\"\n    return re.match(pattern, text) is not None\n\n\n"], "responses": ["```python\nimport re\n\ndef text_starta_endb(text: str) -> bool:\n    pattern = r\"^a.*b$\"\n    return re.match(pattern, text) is not None\n```"], "prompt_tokens": [573], "completion_tokens": [474], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_794_text_starta_endb"}
{"name": "mbpp_79_word_len", "language": "Python3", "prompt": "def word_len(s: str) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the length of the word is odd or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "word_len", "test": "def check(candidate):\n    assert candidate('Hadoop') == False\n    assert candidate('great') == True\n    assert candidate('structure') == True\n\ndef test_check():\n    check(word_len)\n\ntest_check()\n", "sample_io": ["assert word_len('Hadoop') == False"], "source_codes": ["\ndef word_len(s: str) -> bool:\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    length = len(s)\n    is_odd = length % 2 != 0\n    return is_odd\n\n\n"], "responses": ["```python\ndef word_len(s: str) -> bool:\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    length = len(s)\n    is_odd = length % 2 != 0\n    return is_odd\n```"], "prompt_tokens": [373], "completion_tokens": [307], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_79_word_len"}
{"name": "mbpp_390_add_string", "language": "Python3", "prompt": "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    \"\"\"\n\tWrite a function to apply a given format string to all of the elements in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_string", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']\n    assert candidate(['a', 'b', 'c', 'd'], 'python{0}') == ['pythona', 'pythonb', 'pythonc', 'pythond']\n    assert candidate([5, 6, 7, 8], 'string{0}') == ['string5', 'string6', 'string7', 'string8']\n\ndef test_check():\n    check(add_string)\n\ntest_check()\n", "sample_io": ["assert add_string([1, 2, 3, 4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']"], "source_codes": ["\nfrom typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \n    Args:\n        list_ (List[Any]): The list of elements to be formatted.\n        string (str): The format string, e.g. \"Value: {}\".\n    \n    Returns:\n        List[str]: A list of formatted strings.\n    \"\"\"\n    return [string.format(item) for item in list_]\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \n    Args:\n        list_ (List[Any]): The list of elements to be formatted.\n        string (str): The format string, e.g. \"Value: {}\".\n    \n    Returns:\n        List[str]: A list of formatted strings.\n    \"\"\"\n    return [string.format(item) for item in list_]\n```"], "prompt_tokens": [480], "completion_tokens": [440], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_390_add_string"}
{"name": "mbpp_741_all_Characters_Same", "language": "Python3", "prompt": "def all_Characters_Same(s: str) -> bool:\n    \"\"\"\n\tWrite a python function to check whether all the characters are same or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "all_Characters_Same", "test": "def check(candidate):\n    assert candidate('python') == False\n    assert candidate('aaa') == True\n    assert candidate('data') == False\n\ndef test_check():\n    check(all_Characters_Same)\n\ntest_check()\n", "sample_io": ["assert all_Characters_Same('python') == False"], "source_codes": ["\ndef all_Characters_Same(s: str) -> bool:\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True\n\n\n"], "responses": ["```python\ndef all_Characters_Same(s: str) -> bool:\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True\n```"], "prompt_tokens": [583], "completion_tokens": [511], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_741_all_Characters_Same"}
{"name": "mbpp_775_odd_position", "language": "Python3", "prompt": "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_position", "test": "def check(candidate):\n    assert candidate([2, 1, 4, 3, 6, 7, 6, 3]) == True\n    assert candidate([4, 1, 2]) == True\n    assert candidate([1, 2, 3]) == False\n\ndef test_check():\n    check(odd_position)\n\ntest_check()\n", "sample_io": ["assert odd_position([2, 1, 4, 3, 6, 7, 6, 3]) == True"], "source_codes": ["\nfrom typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    \"\"\"\n    Check whether every odd index contains odd numbers in a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    \"\"\"\n    Check whether every odd index contains odd numbers in a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n```"], "prompt_tokens": [458], "completion_tokens": [391], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_775_odd_position"}
{"name": "mbpp_644_reverse_Array_Upto_K", "language": "Python3", "prompt": "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    \"\"\"\n\tWrite a python function to reverse an array upto a given position.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "reverse_Array_Upto_K", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]\n    assert candidate([4, 5, 6, 7], 2) == [5, 4, 6, 7]\n    assert candidate([9, 8, 7, 6, 5], 3) == [7, 8, 9, 6, 5]\n\ndef test_check():\n    check(reverse_Array_Upto_K)\n\ntest_check()\n", "sample_io": ["assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]"], "source_codes": ["\nfrom typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    \"\"\"\n    Reverse the elements of the input array upto the index k (inclusive).\n    \n    Parameters:\n    input (List[int]): The input list of integers.\n    k (int): The index upto which the list needs to be reversed.\n    \n    Returns:\n    List[int]: The list after reversing upto k.\n    \"\"\"\n    if k < 0:\n        return input\n    if k >= len(input):\n        k = len(input) - 1\n    \n    reversed_part = input[:k+1][::-1]\n    remaining_part = input[k+1:]\n    \n    return reversed_part + remaining_part\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    \"\"\"\n    Reverse the elements of the input array upto the index k (inclusive).\n    \n    Parameters:\n    input (List[int]): The input list of integers.\n    k (int): The index upto which the list needs to be reversed.\n    \n    Returns:\n    List[int]: The list after reversing upto k.\n    \"\"\"\n    if k < 0:\n        return input\n    if k >= len(input):\n        k = len(input) - 1\n    \n    reversed_part = input[:k+1][::-1]\n    remaining_part = input[k+1:]\n    \n    return reversed_part + remaining_part\n```"], "prompt_tokens": [792], "completion_tokens": [800], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_644_reverse_Array_Upto_K"}
{"name": "mbpp_588_big_diff", "language": "Python3", "prompt": "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the difference between largest and smallest value in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "big_diff", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4]) == 3\n    assert candidate([4, 5, 12]) == 8\n    assert candidate([9, 2, 3]) == 7\n\ndef test_check():\n    check(big_diff)\n\ntest_check()\n", "sample_io": ["assert big_diff([1, 2, 3, 4]) == 3"], "source_codes": ["\nfrom typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    \"\"\"\n    Find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Input list is empty\")\n    return max(nums) - min(nums)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    \"\"\"\n    Find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Input list is empty\")\n    return max(nums) - min(nums)\n```"], "prompt_tokens": [456], "completion_tokens": [378], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_588_big_diff"}
{"name": "mbpp_297_flatten_list", "language": "Python3", "prompt": "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List[int]]]) -> List[int]:\n    \"\"\"\n\tWrite a function to flatten a given nested list structure.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "flatten_list", "test": "def check(candidate):\n    assert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    assert candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n\ndef test_check():\n    check(flatten_list)\n\ntest_check()\n", "sample_io": ["assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"], "source_codes": ["\nfrom typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List[int]]]) -> List[int]:\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened = []\n    for element in list1:\n        if isinstance(element, int):\n            flattened.append(element)\n        elif isinstance(element, list):\n            flattened.extend(flatten_list(element))\n        else:\n            raise ValueError(f\"Unsupported element type: {type(element)}\")\n    return flattened\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List[int]]]) -> List[int]:\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened = []\n    for element in list1:\n        if isinstance(element, int):\n            flattened.append(element)\n        elif isinstance(element, list):\n            flattened.extend(flatten_list(element))\n        else:\n            raise ValueError(f\"Unsupported element type: {type(element)}\")\n    return flattened\n```"], "prompt_tokens": [489], "completion_tokens": [449], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_297_flatten_list"}
{"name": "mbpp_445_index_multiplication", "language": "Python3", "prompt": "from typing import List\n\ndef index_multiplication(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to perform index wise multiplication of list elements in the given two lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "index_multiplication", "test": "def check(candidate):\n    assert candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[6, 21], [12, 45], [2, 9], [7, 30]]\n    assert candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]) == [[14, 32], [20, 60], [6, 20], [16, 44]]\n    assert candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]) == [[24, 45], [30, 77], [12, 33], [27, 60]]\n\ndef test_check():\n    check(index_multiplication)\n\ntest_check()\n", "sample_io": ["assert index_multiplication([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[6, 21], [12, 45], [2, 9], [7, 30]]"], "source_codes": ["\nfrom typing import List\n\ndef index_multiplication(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Input lists must have the same number of rows.\")\n    for row1, row2 in zip(test_tup1, test_tup2):\n        if len(row1) != len(row2):\n            raise ValueError(\"All rows must have the same number of elements.\")\n    result = [\n        [elem1 * elem2 for elem1, elem2 in zip(row1, row2)]\n        for row1, row2 in zip(test_tup1, test_tup2)\n    ]\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef index_multiplication(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Input lists must have the same number of rows.\")\n    for row1, row2 in zip(test_tup1, test_tup2):\n        if len(row1) != len(row2):\n            raise ValueError(\"All rows must have the same number of elements.\")\n    result = [\n        [elem1 * elem2 for elem1, elem2 in zip(row1, row2)]\n        for row1, row2 in zip(test_tup1, test_tup2)\n    ]\n    return result\n```"], "prompt_tokens": [749], "completion_tokens": [739], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_445_index_multiplication"}
{"name": "mbpp_256_count_Primes_nums", "language": "Python3", "prompt": "def count_Primes_nums(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Primes_nums", "test": "def check(candidate):\n    assert candidate(5) == 2\n    assert candidate(10) == 4\n    assert candidate(100) == 25\n\ndef test_check():\n    check(count_Primes_nums)\n\ntest_check()\n", "sample_io": ["assert count_Primes_nums(5) == 2"], "source_codes": ["\ndef count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n\n    is_prime = [True] * n\n    is_prime[0] = False\n    is_prime[1] = False\n\n    p = 2\n    while p * p < n:\n        if is_prime[p]:\n            for i in range(p * p, n, p):\n                is_prime[i] = False\n        p += 1\n\n    return sum(is_prime)\n\n\n"], "responses": ["```python\ndef count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n\n    is_prime = [True] * n\n    is_prime[0] = False\n    is_prime[1] = False\n\n    p = 2\n    while p * p < n:\n        if is_prime[p]:\n            for i in range(p * p, n, p):\n                is_prime[i] = False\n        p += 1\n\n    return sum(is_prime)\n```"], "prompt_tokens": [613], "completion_tokens": [575], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_256_count_Primes_nums"}
{"name": "mbpp_170_sum_range_list", "language": "Python3", "prompt": "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    \"\"\"\n\tWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_range_list", "test": "def check(candidate):\n    assert candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29\n    assert candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7) == 16\n    assert candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10) == 38\n\ndef test_check():\n    check(sum_range_list)\n\ntest_check()\n", "sample_io": ["assert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29"], "source_codes": ["\nfrom typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    \"\"\"\n    Return the sum of elements in list1 from index m to n inclusive.\n    \"\"\"\n    if m > n:\n        m, n = n, m\n    m = max(0, m)\n    n = min(len(list1) - 1, n)\n    return sum(list1[m:n+1])\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    \"\"\"\n    Return the sum of elements in list1 from index m to n inclusive.\n    \"\"\"\n    if m > n:\n        m, n = n, m\n    m = max(0, m)\n    n = min(len(list1) - 1, n)\n    return sum(list1[m:n+1])\n```"], "prompt_tokens": [625], "completion_tokens": [560], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_170_sum_range_list"}
{"name": "mbpp_71_comb_sort", "language": "Python3", "prompt": "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a list of elements.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "comb_sort", "test": "def check(candidate):\n    assert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert candidate([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\n    assert candidate([99, 15, 13, 47]) == [13, 15, 47, 99]\n\ndef test_check():\n    check(comb_sort)\n\ntest_check()\n", "sample_io": ["assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"], "source_codes": ["\nfrom typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap // shrink)\n        if gap < 1:\n            gap = 1\n        \n        sorted = True\n        \n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n    \n    return nums\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap // shrink)\n        if gap < 1:\n            gap = 1\n        \n        sorted = True\n        \n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n    \n    return nums\n```"], "prompt_tokens": [568], "completion_tokens": [567], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_71_comb_sort"}
{"name": "mbpp_451_remove_whitespaces", "language": "Python3", "prompt": "def remove_whitespaces(text1: str) -> str:\n    \"\"\"\n\tWrite a function to remove all whitespaces from the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_whitespaces", "test": "def check(candidate):\n    assert candidate(' Google    Flutter ') == 'GoogleFlutter'\n    assert candidate(' Google    Dart ') == 'GoogleDart'\n    assert candidate(' iOS    Swift ') == 'iOSSwift'\n\ndef test_check():\n    check(remove_whitespaces)\n\ntest_check()\n", "sample_io": ["assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"], "source_codes": ["\ndef remove_whitespaces(text1: str) -> str:\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return ''.join(text1.split())\n\n\n"], "responses": ["```python\ndef remove_whitespaces(text1: str) -> str:\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return ''.join(text1.split())\n```"], "prompt_tokens": [490], "completion_tokens": [409], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_451_remove_whitespaces"}
{"name": "mbpp_747_lcs_of_three", "language": "Python3", "prompt": "def lcs_of_three(X: str, Y: str, Z: str) -> int:\n    \"\"\"\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lcs_of_three", "test": "def check(candidate):\n    assert candidate('AGGT12', '12TXAYB', '12XBA') == 2\n    assert candidate('Reels', 'Reelsfor', 'ReelsforReels') == 5\n    assert candidate('abcd1e2', 'bc12ea', 'bd1ea') == 3\n\ndef test_check():\n    check(lcs_of_three)\n\ntest_check()\n", "sample_io": ["assert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2"], "source_codes": ["\ndef lcs_of_three(X: str, Y: str, Z: str) -> int:\n    m, n, o = len(X), len(Y), len(Z)\n    dp = [[[0]*(o+1) for _ in range(n+1)] for __ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(\n                        dp[i-1][j][k],\n                        dp[i][j-1][k],\n                        dp[i][j][k-1]\n                    )\n    return dp[m][n][o]\n\n\n"], "responses": ["```python\ndef lcs_of_three(X: str, Y: str, Z: str) -> int:\n    m, n, o = len(X), len(Y), len(Z)\n    dp = [[[0]*(o+1) for _ in range(n+1)] for __ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(\n                        dp[i-1][j][k],\n                        dp[i][j-1][k],\n                        dp[i][j][k-1]\n                    )\n    return dp[m][n][o]\n```"], "prompt_tokens": [742], "completion_tokens": [761], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_747_lcs_of_three"}
{"name": "mbpp_257_swap_numbers", "language": "Python3", "prompt": "from typing import List\n\ndef swap_numbers(a: int, b: int) -> List[int]:\n    \"\"\"\n\tWrite a function that takes in two numbers and returns a list with the second number and then the first number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "swap_numbers", "test": "def check(candidate):\n    assert candidate(10, 20) == [20, 10]\n    assert candidate(15, 17) == [17, 15]\n    assert candidate(100, 200) == [200, 100]\n\ndef test_check():\n    check(swap_numbers)\n\ntest_check()\n", "sample_io": ["assert swap_numbers(10, 20) == [20, 10]"], "source_codes": ["\nfrom typing import List\n\ndef swap_numbers(a: int, b: int) -> List[int]:\n    \"\"\"\n    Write a function that takes in two numbers and returns a list with the second number and then the first number.\n    \"\"\"\n    return [b, a]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef swap_numbers(a: int, b: int) -> List[int]:\n    \"\"\"\n    Write a function that takes in two numbers and returns a list with the second number and then the first number.\n    \"\"\"\n    return [b, a]\n```"], "prompt_tokens": [310], "completion_tokens": [213], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_257_swap_numbers"}
{"name": "mbpp_64_subject_marks", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    \"\"\"\n\tWrite a function to sort a list of tuples using the second value of each tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "subject_marks", "test": "def check(candidate):\n    assert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    assert candidate([('Telugu', 49), ('Hindhi', 54), ('Social', 33)]) == [('Social', 33), ('Telugu', 49), ('Hindhi', 54)]\n    assert candidate([('Physics', 96), ('Chemistry', 97), ('Biology', 45)]) == [('Biology', 45), ('Physics', 96), ('Chemistry', 97)]\n\ndef test_check():\n    check(subject_marks)\n\ntest_check()\n", "sample_io": ["assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n```"], "prompt_tokens": [480], "completion_tokens": [394], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_64_subject_marks"}
{"name": "mbpp_116_tuple_to_int", "language": "Python3", "prompt": "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, int, int]) -> int:\n    \"\"\"\n\tWrite a function to convert a given tuple of positive integers into a single integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tuple_to_int", "test": "def check(candidate):\n    assert candidate((1, 2, 3)) == 123\n    assert candidate((4, 5, 6)) == 456\n    assert candidate((5, 6, 7)) == 567\n\ndef test_check():\n    check(tuple_to_int)\n\ntest_check()\n", "sample_io": ["assert tuple_to_int((1, 2, 3)) == 123"], "source_codes": ["\nfrom typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, int, int]) -> int:\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer by concatenating their string representations.\n    \"\"\"\n    str_nums = [str(num) for num in nums]\n    concatenated = ''.join(str_nums)\n    return int(concatenated)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, int, int]) -> int:\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer by concatenating their string representations.\n    \"\"\"\n    str_nums = [str(num) for num in nums]\n    concatenated = ''.join(str_nums)\n    return int(concatenated)\n```"], "prompt_tokens": [455], "completion_tokens": [389], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_116_tuple_to_int"}
{"name": "mbpp_479_first_Digit", "language": "Python3", "prompt": "def first_Digit(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the first digit of a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "first_Digit", "test": "def check(candidate):\n    assert candidate(123) == 1\n    assert candidate(456) == 4\n    assert candidate(12) == 1\n\ndef test_check():\n    check(first_Digit)\n\ntest_check()\n", "sample_io": ["assert first_Digit(123) == 1"], "source_codes": ["\ndef first_Digit(n: int) -> int:\n    n = abs(n)\n    first_char = str(n)[0]\n    return int(first_char)\n\n\n"], "responses": ["```python\ndef first_Digit(n: int) -> int:\n    n = abs(n)\n    first_char = str(n)[0]\n    return int(first_char)\n```"], "prompt_tokens": [365], "completion_tokens": [280], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_479_first_Digit"}
{"name": "mbpp_118_string_to_list", "language": "Python3", "prompt": "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    \"\"\"\n\tWrite a function to convert a string to a list of strings split on the space character.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "string_to_list", "test": "def check(candidate):\n    assert candidate('python programming') == ['python', 'programming']\n    assert candidate('lists tuples strings') == ['lists', 'tuples', 'strings']\n    assert candidate('write a program') == ['write', 'a', 'program']\n\ndef test_check():\n    check(string_to_list)\n\ntest_check()\n", "sample_io": ["assert string_to_list('python programming') == ['python', 'programming']"], "source_codes": ["\nfrom typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()\n```"], "prompt_tokens": [298], "completion_tokens": [206], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_118_string_to_list"}
{"name": "mbpp_763_find_min_diff", "language": "Python3", "prompt": "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_min_diff", "test": "def check(candidate):\n    assert candidate([1, 5, 3, 19, 18, 25], 6) == 1\n    assert candidate([4, 3, 2, 6], 4) == 1\n    assert candidate([30, 5, 20, 9], 4) == 4\n\ndef test_check():\n    check(find_min_diff)\n\ntest_check()\n", "sample_io": ["assert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1"], "source_codes": ["\nfrom typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n```"], "prompt_tokens": [553], "completion_tokens": [449], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_763_find_min_diff"}
{"name": "mbpp_408_k_smallest_pairs", "language": "Python3", "prompt": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "k_smallest_pairs", "test": "def check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n", "sample_io": ["assert k_smallest_pairs([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]"], "source_codes": ["\nfrom typing import List\nimport heapq\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    if not nums1 or not nums2 or k == 0:\n        return []\n\n    min_heap = []\n    res = []\n\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n\n    while min_heap and len(res) < k:\n        current_sum, i, j = heapq.heappop(min_heap)\n        res.append([nums1[i], nums2[j]])\n\n        if j + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1))\n\n    return res\n\n\n"], "responses": ["```python\nfrom typing import List\nimport heapq\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    if not nums1 or not nums2 or k == 0:\n        return []\n\n    min_heap = []\n    res = []\n\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n\n    while min_heap and len(res) < k:\n        current_sum, i, j = heapq.heappop(min_heap)\n        res.append([nums1[i], nums2[j]])\n\n        if j + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1))\n\n    return res\n```"], "prompt_tokens": [1148], "completion_tokens": [1143], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_408_k_smallest_pairs"}
{"name": "mbpp_748_capital_words_spaces", "language": "Python3", "prompt": "def capital_words_spaces(str1: str) -> str:\n    \"\"\"\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "capital_words_spaces", "test": "def check(candidate):\n    assert candidate('Python') == 'Python'\n    assert candidate('PythonProgrammingExamples') == 'Python Programming Examples'\n    assert candidate('GetReadyToBeCodingFreak') == 'Get Ready To Be Coding Freak'\n\ndef test_check():\n    check(capital_words_spaces)\n\ntest_check()\n", "sample_io": ["assert capital_words_spaces('Python') == 'Python'"], "source_codes": ["\nimport re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub(r'(?<!^)([A-Z])', r' \\1', str1)\n\n\n"], "responses": ["```python\nimport re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub(r'(?<!^)([A-Z])', r' \\1', str1)\n```"], "prompt_tokens": [587], "completion_tokens": [500], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_748_capital_words_spaces"}
{"name": "mbpp_252_convert", "language": "Python3", "prompt": "from typing import Tuple\n\ndef convert(numbers: int) -> Tuple[float, float]:\n    \"\"\"\n\tWrite a python function to convert complex numbers to polar coordinates.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "convert", "test": "def check(candidate):\n    assert candidate(1) == (1.0, 0.0)\n    assert candidate(4) == (4.0, 0.0)\n    assert candidate(5) == (5.0, 0.0)\n\ndef test_check():\n    check(convert)\n\ntest_check()\n", "sample_io": ["assert convert(1) == (1.0, 0.0)"], "source_codes": ["\nfrom typing import Tuple\nimport cmath\n\ndef convert(number: complex) -> Tuple[float, float]:\n    \"\"\"\n    Convert a complex number to polar coordinates (r, theta).\n    \n    Args:\n        number (complex): The complex number to convert.\n    \n    Returns:\n        Tuple[float, float]: A tuple containing magnitude (r) and angle (theta in radians).\n    \"\"\"\n    r = abs(number)  # magnitude\n    theta = cmath.phase(number)  # angle in radians\n    return (r, theta)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\nimport cmath\n\ndef convert(number: complex) -> Tuple[float, float]:\n    \"\"\"\n    Convert a complex number to polar coordinates (r, theta).\n    \n    Args:\n        number (complex): The complex number to convert.\n    \n    Returns:\n        Tuple[float, float]: A tuple containing magnitude (r) and angle (theta in radians).\n    \"\"\"\n    r = abs(number)  # magnitude\n    theta = cmath.phase(number)  # angle in radians\n    return (r, theta)\n```"], "prompt_tokens": [489], "completion_tokens": [472], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_252_convert"}
{"name": "mbpp_436_neg_nos", "language": "Python3", "prompt": "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to return the negative numbers in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "neg_nos", "test": "def check(candidate):\n    assert candidate([-1, 4, 5, -6]) == [-1, -6]\n    assert candidate([-1, -2, 3, 4]) == [-1, -2]\n    assert candidate([-7, -6, 8, 9]) == [-7, -6]\n\ndef test_check():\n    check(neg_nos)\n\ntest_check()\n", "sample_io": ["assert neg_nos([-1, 4, 5, -6]) == [-1, -6]"], "source_codes": ["\nfrom typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    # Using list comprehension to filter negative numbers\n    return [num for num in list1 if num < 0]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    # Using list comprehension to filter negative numbers\n    return [num for num in list1 if num < 0]\n```"], "prompt_tokens": [368], "completion_tokens": [299], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_436_neg_nos"}
{"name": "mbpp_397_median_numbers", "language": "Python3", "prompt": "def median_numbers(a: int, b: int, c: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of three numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "median_numbers", "test": "def check(candidate):\n    assert candidate(25, 55, 65) == 55.0\n    assert candidate(20, 10, 30) == 20.0\n    assert candidate(15, 45, 75) == 45.0\n\ndef test_check():\n    check(median_numbers)\n\ntest_check()\n", "sample_io": ["assert median_numbers(25, 55, 65) == 55.0"], "source_codes": ["\ndef median_numbers(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    nums = [a, b, c]\n    nums.sort()\n    return float(nums[1])\n\n\n"], "responses": ["```python\ndef median_numbers(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    nums = [a, b, c]\n    nums.sort()\n    return float(nums[1])\n```"], "prompt_tokens": [262], "completion_tokens": [192], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_397_median_numbers"}
{"name": "mbpp_462_combinations_list", "language": "Python3", "prompt": "from typing import List, Union\n\ndef combinations_list(list1: List[str]) -> List[Union[List[None], List[str]]]:\n    \"\"\"\n\tWrite a function to find all possible combinations of the elements of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_462_combinations_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "combinations_list", "test": "def check(candidate):\n    assert candidate(['orange', 'red', 'green', 'blue']) == [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange']) == [[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    assert candidate(['red', 'green', 'black', 'orange']) == [[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n\ndef test_check():\n    check(combinations_list)\n\ntest_check()\n", "sample_io": ["assert combinations_list(['orange', 'red', 'green', 'blue']) == [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"], "source_codes": ["\nfrom typing import List, Union\nfrom itertools import combinations\n\ndef combinations_list(list1: List[str]) -> List[Union[List[None], List[str]]]:\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for r in range(len(list1) + 1):\n        for combo in combinations(list1, r):\n            result.append(list(combo))\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Union\nfrom itertools import combinations\n\ndef combinations_list(list1: List[str]) -> List[Union[List[None], List[str]]]:\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for r in range(len(list1) + 1):\n        for combo in combinations(list1, r):\n            result.append(list(combo))\n    return result\n```"], "prompt_tokens": [551], "completion_tokens": [487], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_462_combinations_list"}
{"name": "mbpp_745_divisible_by_digits", "language": "Python3", "prompt": "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "divisible_by_digits", "test": "def check(candidate):\n    assert candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    assert candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n    assert candidate(20, 25) == [22, 24]\n\ndef test_check():\n    check(divisible_by_digits)\n\ntest_check()\n", "sample_io": ["assert divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"], "source_codes": ["\nfrom typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    return [\n        num for num in range(startnum, endnum + 1)\n        if '0' not in str(num) and all(num % int(d) == 0 for d in str(num))\n    ]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    return [\n        num for num in range(startnum, endnum + 1)\n        if '0' not in str(num) and all(num % int(d) == 0 for d in str(num))\n    ]\n```"], "prompt_tokens": [587], "completion_tokens": [447], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_745_divisible_by_digits"}
{"name": "mbpp_554_Split", "language": "Python3", "prompt": "from typing import List\n\ndef Split(list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Split", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5]\n    assert candidate([10, 11, 12, 13]) == [11, 13]\n    assert candidate([7, 8, 9, 1]) == [7, 9, 1]\n\ndef test_check():\n    check(Split)\n\ntest_check()\n", "sample_io": ["assert Split([1, 2, 3, 4, 5, 6]) == [1, 3, 5]"], "source_codes": ["\nfrom typing import List\n\ndef Split(lst: List[int]) -> List[int]:\n    return [num for num in lst if num % 2 != 0]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Split(lst: List[int]) -> List[int]:\n    return [num for num in lst if num % 2 != 0]\n```"], "prompt_tokens": [403], "completion_tokens": [303], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_554_Split"}
{"name": "mbpp_128_long_words", "language": "Python3", "prompt": "from typing import List\n\ndef long_words(n: int, str: str) -> List[str]:\n    \"\"\"\n\tWrite a function to find words that are longer than n characters from a given list of words.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "long_words", "test": "def check(candidate):\n    assert candidate(3, 'python is a programming language') == ['python', 'programming', 'language']\n    assert candidate(2, 'writing a program') == ['writing', 'program']\n    assert candidate(5, 'sorting list') == ['sorting']\n\ndef test_check():\n    check(long_words)\n\ntest_check()\n", "sample_io": ["assert long_words(3, 'python is a programming language') == ['python', 'programming', 'language']"], "source_codes": ["\nfrom typing import List\n\ndef long_words(n: int, str: str) -> List[str]:\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    result = [word for word in words if len(word) > n]\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef long_words(n: int, str: str) -> List[str]:\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    result = [word for word in words if len(word) > n]\n    return result\n```"], "prompt_tokens": [394], "completion_tokens": [319], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_128_long_words"}
{"name": "mbpp_69_is_sublist", "language": "Python3", "prompt": "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_sublist", "test": "def check(candidate):\n    assert candidate([2, 4, 3, 5, 7], [3, 7]) == False\n    assert candidate([2, 4, 3, 5, 7], [4, 3]) == True\n    assert candidate([2, 4, 3, 5, 7], [1, 6]) == False\n\ndef test_check():\n    check(is_sublist)\n\ntest_check()\n", "sample_io": ["assert is_sublist([2, 4, 3, 5, 7], [3, 7]) == False"], "source_codes": ["\nfrom typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    \"\"\"\n    Check whether list l contains the given sublist s.\n    \"\"\"\n    if not s:\n        # An empty list is always a sublist\n        return True\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    \"\"\"\n    Check whether list l contains the given sublist s.\n    \"\"\"\n    if not s:\n        # An empty list is always a sublist\n        return True\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False\n```"], "prompt_tokens": [442], "completion_tokens": [405], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_69_is_sublist"}
{"name": "mbpp_431_common_element", "language": "Python3", "prompt": "from typing import List, Any, Optional\n\ndef common_element(list1: List[Any], list2: List[Any]) -> Optional[bool]:\n    \"\"\"\n\tWrite a function that takes two lists and returns true if they have at least one common element.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "common_element", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == True\n    assert candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]) == None\n    assert candidate(['a', 'b', 'c'], ['d', 'b', 'e']) == True\n\ndef test_check():\n    check(common_element)\n\ntest_check()\n", "sample_io": ["assert common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == True"], "source_codes": ["\nfrom typing import List, Any, Optional\n\ndef common_element(list1: List[Any], list2: List[Any]) -> Optional[bool]:\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1 & set2)\n\n\n"], "responses": ["```python\nfrom typing import List, Any, Optional\n\ndef common_element(list1: List[Any], list2: List[Any]) -> Optional[bool]:\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1 & set2)\n```"], "prompt_tokens": [619], "completion_tokens": [534], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_431_common_element"}
{"name": "mbpp_732_replace_specialchar", "language": "Python3", "prompt": "def replace_specialchar(text: str) -> str:\n    \"\"\"\n\tWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_specialchar", "test": "def check(candidate):\n    assert candidate('Python language, Programming language.') == 'Python:language::Programming:language:'\n    assert candidate('a b c,d e f') == 'a:b:c:d:e:f'\n    assert candidate('ram reshma,ram rahim') == 'ram:reshma:ram:rahim'\n\ndef test_check():\n    check(replace_specialchar)\n\ntest_check()\n", "sample_io": ["assert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'"], "source_codes": ["\nimport re\n\ndef replace_specialchar(text: str) -> str:\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    return re.sub(r\"[ ,\\.]\", \":\", text)\n\n\n"], "responses": ["```python\nimport re\n\ndef replace_specialchar(text: str) -> str:\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    return re.sub(r\"[ ,\\.]\", \":\", text)\n```"], "prompt_tokens": [557], "completion_tokens": [482], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_732_replace_specialchar"}
{"name": "mbpp_141_pancake_sort", "language": "Python3", "prompt": "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a list of elements.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pancake_sort", "test": "def check(candidate):\n    assert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert candidate([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\n    assert candidate([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n\ndef test_check():\n    check(pancake_sort)\n\ntest_check()\n", "sample_io": ["assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"], "source_codes": ["\nfrom typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    def flip(sublist: List[int], k: int):\n        # Reverse first k elements\n        return sublist[:k][::-1] + sublist[k:]\n    \n    n = len(nums)\n    for size in range(n, 1, -1):\n        # Find index of max element in nums[0:size]\n        max_index = nums.index(max(nums[:size]))\n        \n        if max_index != size - 1:\n            # Flip max element to front if it's not already at front\n            if max_index != 0:\n                nums = flip(nums, max_index + 1)\n            # Flip max element to its correct position\n            nums = flip(nums, size)\n    return nums\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    def flip(sublist: List[int], k: int):\n        # Reverse first k elements\n        return sublist[:k][::-1] + sublist[k:]\n    \n    n = len(nums)\n    for size in range(n, 1, -1):\n        # Find index of max element in nums[0:size]\n        max_index = nums.index(max(nums[:size]))\n        \n        if max_index != size - 1:\n            # Flip max element to front if it's not already at front\n            if max_index != 0:\n                nums = flip(nums, max_index + 1)\n            # Flip max element to its correct position\n            nums = flip(nums, size)\n    return nums\n```"], "prompt_tokens": [525], "completion_tokens": [565], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_141_pancake_sort"}
{"name": "mbpp_308_large_product", "language": "Python3", "prompt": "from typing import List\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "large_product", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50]\n    assert candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4) == [60, 54, 50, 48]\n    assert candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5) == [60, 54, 50, 48, 45]\n\ndef test_check():\n    check(large_product)\n\ntest_check()\n", "sample_io": ["assert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50]"], "source_codes": ["\nfrom typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if not nums1 or not nums2 or N <= 0:\n        return []\n    \n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    max_heap = []\n    visited = set()\n    \n    initial_product = nums1[0] * nums2[0]\n    heapq.heappush(max_heap, (-initial_product, 0, 0))\n    visited.add((0, 0))\n    \n    result = []\n    \n    while max_heap and len(result) < N:\n        product_neg, i, j = heapq.heappop(max_heap)\n        result.append(-product_neg)\n        \n        if i + 1 < len(nums1) and (i + 1, j) not in visited:\n            next_product = nums1[i + 1] * nums2[j]\n            heapq.heappush(max_heap, (-next_product, i + 1, j))\n            visited.add((i + 1, j))\n            \n        if j + 1 < len(nums2) and (i, j + 1) not in visited:\n            next_product = nums1[i] * nums2[j + 1]\n            heapq.heappush(max_heap, (-next_product, i, j + 1))\n            visited.add((i, j + 1))\n    \n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if not nums1 or not nums2 or N <= 0:\n        return []\n    \n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    max_heap = []\n    visited = set()\n    \n    initial_product = nums1[0] * nums2[0]\n    heapq.heappush(max_heap, (-initial_product, 0, 0))\n    visited.add((0, 0))\n    \n    result = []\n    \n    while max_heap and len(result) < N:\n        product_neg, i, j = heapq.heappop(max_heap)\n        result.append(-product_neg)\n        \n        if i + 1 < len(nums1) and (i + 1, j) not in visited:\n            next_product = nums1[i + 1] * nums2[j]\n            heapq.heappush(max_heap, (-next_product, i + 1, j))\n            visited.add((i + 1, j))\n            \n        if j + 1 < len(nums2) and (i, j + 1) not in visited:\n            next_product = nums1[i] * nums2[j + 1]\n            heapq.heappush(max_heap, (-next_product, i, j + 1))\n            visited.add((i, j + 1))\n    \n    return result\n```"], "prompt_tokens": [887], "completion_tokens": [1022], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_308_large_product"}
{"name": "mbpp_293_otherside_rightangle", "language": "Python3", "prompt": "def otherside_rightangle(w: int, h: int) -> float:\n    \"\"\"\n\tWrite a function to find the third side of a right angled triangle.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "otherside_rightangle", "test": "def check(candidate):\n    assert candidate(7, 8) == 10.63014581273465\n    assert candidate(3, 4) == 5\n    assert candidate(7, 15) == 16.55294535724685\n\ndef test_check():\n    check(otherside_rightangle)\n\ntest_check()\n", "sample_io": ["assert otherside_rightangle(7, 8) == 10.63014581273465"], "source_codes": ["\nimport math\n\ndef otherside_rightangle(w: int, h: int) -> float:\n    \"\"\"\n    Find the length of the third side of a right angled triangle given two sides w and h.\n    One of the sides might be the hypotenuse.\n    \n    Parameters:\n    w (int): length of one side.\n    h (int): length of another side.\n    \n    Returns:\n    float: length of the third side.\n    \"\"\"\n    hyp = max(w, h)\n    leg = min(w, h)\n    \n    if hyp**2 < w**2 + h**2:\n        return math.sqrt(w**2 + h**2)\n    else:\n        return math.sqrt(hyp**2 - leg**2)\n\n\n"], "responses": ["```python\nimport math\n\ndef otherside_rightangle(w: int, h: int) -> float:\n    \"\"\"\n    Find the length of the third side of a right angled triangle given two sides w and h.\n    One of the sides might be the hypotenuse.\n    \n    Parameters:\n    w (int): length of one side.\n    h (int): length of another side.\n    \n    Returns:\n    float: length of the third side.\n    \"\"\"\n    hyp = max(w, h)\n    leg = min(w, h)\n    \n    if hyp**2 < w**2 + h**2:\n        return math.sqrt(w**2 + h**2)\n    else:\n        return math.sqrt(hyp**2 - leg**2)\n```"], "prompt_tokens": [888], "completion_tokens": [912], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_293_otherside_rightangle"}
{"name": "mbpp_106_add_lists", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef add_lists(test_list: List[int], test_tup: Tuple[int, int]) -> Tuple[int, int, int, int, int]:\n    \"\"\"\n\tWrite a function to append the given list to the given tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_lists", "test": "def check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    assert candidate([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\n    assert candidate([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n\ndef test_check():\n    check(add_lists)\n\ntest_check()\n", "sample_io": ["assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef add_lists(test_list: List[int], test_tup: Tuple[int, int]) -> Tuple[int, int, int, int, int]:\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    return test_tup + tuple(test_list)\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef add_lists(test_list: List[int], test_tup: Tuple[int, int]) -> Tuple[int, int, int, int, int]:\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    return test_tup + tuple(test_list)\n```"], "prompt_tokens": [501], "completion_tokens": [399], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_106_add_lists"}
{"name": "mbpp_720_add_dict_to_tuple", "language": "Python3", "prompt": "from typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple[int, int, int], test_dict: Dict[str, int]) -> Tuple[int, int, int, Dict[str, int]]:\n    \"\"\"\n\tWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_dict_to_tuple", "test": "def check(candidate):\n    assert candidate((4, 5, 6), { 'MSAM': 1, 'is': 2, 'best': 3 }) == (4, 5, 6, { 'MSAM': 1, 'is': 2, 'best': 3 })\n    assert candidate((1, 2, 3), { 'UTS': 2, 'is': 3, 'Worst': 4 }) == (1, 2, 3, { 'UTS': 2, 'is': 3, 'Worst': 4 })\n    assert candidate((8, 9, 10), { 'POS': 3, 'is': 4, 'Okay': 5 }) == (8, 9, 10, { 'POS': 3, 'is': 4, 'Okay': 5 })\n\ndef test_check():\n    check(add_dict_to_tuple)\n\ntest_check()\n", "sample_io": ["assert add_dict_to_tuple((4, 5, 6), { 'MSAM': 1, 'is': 2, 'best': 3 }) == (4, 5, 6, { 'MSAM': 1, 'is': 2, 'best': 3 })"], "source_codes": ["\nfrom typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple[int, int, int], test_dict: Dict[str, int]) -> Tuple[int, int, int, Dict[str, int]]:\n    \"\"\"\n    Write a function to add a dictionary to the tuple.\n    The output should be a tuple consisting of the original 3 integers and the dictionary as the 4th item.\n    \"\"\"\n    return test_tup + (test_dict,)\n\n\n"], "responses": ["```python\nfrom typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple[int, int, int], test_dict: Dict[str, int]) -> Tuple[int, int, int, Dict[str, int]]:\n    \"\"\"\n    Write a function to add a dictionary to the tuple.\n    The output should be a tuple consisting of the original 3 integers and the dictionary as the 4th item.\n    \"\"\"\n    return test_tup + (test_dict,)\n```"], "prompt_tokens": [536], "completion_tokens": [438], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_720_add_dict_to_tuple"}
{"name": "mbpp_395_first_non_repeating_character", "language": "Python3", "prompt": "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    \"\"\"\n\tWrite a python function to find the first non-repeated character in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "first_non_repeating_character", "test": "def check(candidate):\n    assert candidate('abcabc') == None\n    assert candidate('abc') == 'a'\n    assert candidate('ababc') == 'c'\n\ndef test_check():\n    check(first_non_repeating_character)\n\ntest_check()\n", "sample_io": ["assert first_non_repeating_character('abcabc') == None"], "source_codes": ["\nfrom typing import Optional\nfrom collections import Counter\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None\n\n\n"], "responses": ["```python\nfrom typing import Optional\nfrom collections import Counter\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None\n```"], "prompt_tokens": [409], "completion_tokens": [348], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_395_first_non_repeating_character"}
{"name": "mbpp_457_Find_Min", "language": "Python3", "prompt": "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n\tWrite a python function to find the sublist having minimum length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Min", "test": "def check(candidate):\n    assert candidate([[1], [1, 2], [1, 2, 3]]) == [1]\n    assert candidate([[1, 1], [1, 1, 1], [1, 2, 7, 8]]) == [1, 1]\n    assert candidate([['x'], ['x', 'y'], ['x', 'y', 'z']]) == ['x']\n\ndef test_check():\n    check(Find_Min)\n\ntest_check()\n", "sample_io": ["assert Find_Min([[1], [1, 2], [1, 2, 3]]) == [1]"], "source_codes": ["\nfrom typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    if not lst:\n        return []\n\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < len(min_sublist):\n            min_sublist = sublist\n    return min_sublist\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    if not lst:\n        return []\n\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < len(min_sublist):\n            min_sublist = sublist\n    return min_sublist\n```"], "prompt_tokens": [429], "completion_tokens": [383], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_457_Find_Min"}
{"name": "mbpp_725_extract_quotation", "language": "Python3", "prompt": "from typing import List, Any\n\ndef extract_quotation(text1: str) -> List[Any]:\n    \"\"\"\n\tWrite a function to extract values between quotation marks \" \" of the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_725_extract_quotation.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_quotation", "test": "def check(candidate):\n    assert candidate('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n    assert candidate('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\n    assert candidate('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\n    assert candidate(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []\n\ndef test_check():\n    check(extract_quotation)\n\ntest_check()\n", "sample_io": ["assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"], "source_codes": ["\nimport re\nfrom typing import List, Any\n\ndef extract_quotation(text1: str) -> List[Any]:\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \n    Args:\n        text1 (str): Input string potentially containing quoted substrings.\n    \n    Returns:\n        List[Any]: List of substrings found between double quotes.\n    \"\"\"\n    # Regex pattern to match any characters between double quotes (non-greedy)\n    pattern = r'\"(.*?)\"'\n    \n    # Find all matches in the text\n    matches = re.findall(pattern, text1)\n    \n    return matches\n\n\n"], "responses": ["```python\nimport re\nfrom typing import List, Any\n\ndef extract_quotation(text1: str) -> List[Any]:\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \n    Args:\n        text1 (str): Input string potentially containing quoted substrings.\n    \n    Returns:\n        List[Any]: List of substrings found between double quotes.\n    \"\"\"\n    # Regex pattern to match any characters between double quotes (non-greedy)\n    pattern = r'\"(.*?)\"'\n    \n    # Find all matches in the text\n    matches = re.findall(pattern, text1)\n    \n    return matches\n```"], "prompt_tokens": [397], "completion_tokens": [389], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_725_extract_quotation"}
{"name": "mbpp_9_find_Rotations", "language": "Python3", "prompt": "def find_Rotations(str: str) -> int:\n    \"\"\"\n\tWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Rotations", "test": "def check(candidate):\n    assert candidate('aaaa') == 1\n    assert candidate('ab') == 2\n    assert candidate('abc') == 3\n\ndef test_check():\n    check(find_Rotations)\n\ntest_check()\n", "sample_io": ["assert find_Rotations('aaaa') == 1"], "source_codes": ["\ndef find_Rotations(s: str) -> int:\n    n = len(s)\n    for k in range(1, n):\n        rotated = s[k:] + s[:k]\n        if rotated == s:\n            return k\n    return n\n\n\n"], "responses": ["```python\ndef find_Rotations(s: str) -> int:\n    n = len(s)\n    for k in range(1, n):\n        rotated = s[k:] + s[:k]\n        if rotated == s:\n            return k\n    return n\n```"], "prompt_tokens": [593], "completion_tokens": [507], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_9_find_Rotations"}
{"name": "mbpp_792_count_list", "language": "Python3", "prompt": "from typing import List\n\ndef count_list(input_list: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a python function to count the number of lists in a given number of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_792_count_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_list", "test": "def check(candidate):\n    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n    assert candidate([[1, 2], [2, 3], [4, 5]]) == 3\n    assert candidate([[1, 0], [2, 0]]) == 2\n\ndef test_check():\n    check(count_list)\n\ntest_check()\n", "sample_io": ["assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4"], "source_codes": ["\nfrom typing import List\n\ndef count_list(input_list: List[List[int]]) -> int:\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    return len(input_list)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_list(input_list: List[List[int]]) -> int:\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    return len(input_list)\n```"], "prompt_tokens": [418], "completion_tokens": [327], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_792_count_list"}
{"name": "mbpp_477_is_lower", "language": "Python3", "prompt": "def is_lower(string: str) -> str:\n    \"\"\"\n\tWrite a python function to convert the given string to lower case.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_lower", "test": "def check(candidate):\n    assert candidate('InValid') == 'invalid'\n    assert candidate('TruE') == 'true'\n    assert candidate('SenTenCE') == 'sentence'\n\ndef test_check():\n    check(is_lower)\n\ntest_check()\n", "sample_io": ["assert is_lower('InValid') == 'invalid'"], "source_codes": ["\ndef is_lower(string: str) -> str:\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    str: The lowercase version of the input string.\n    \"\"\"\n    return string.lower()\n\n\n"], "responses": ["```python\ndef is_lower(string: str) -> str:\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    str: The lowercase version of the input string.\n    \"\"\"\n    return string.lower()\n```"], "prompt_tokens": [347], "completion_tokens": [296], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_477_is_lower"}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "Python3", "prompt": "def find_Average_Of_Cube(n: int) -> float:\n    \"\"\"\n\tWrite a python function to find the average of cubes of first n natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Average_Of_Cube", "test": "def check(candidate):\n    assert candidate(2) == 4.5\n    assert candidate(3) == 12\n    assert candidate(1) == 1\n\ndef test_check():\n    check(find_Average_Of_Cube)\n\ntest_check()\n", "sample_io": ["assert find_Average_Of_Cube(2) == 4.5"], "source_codes": ["\ndef find_Average_Of_Cube(n: int) -> float:\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    average = sum_of_cubes / n\n    return average\n\n# Test cases\nprint(find_Average_Of_Cube(3))  # Output: 12.0\nprint(find_Average_Of_Cube(5))  # Output: 45.0\n\n\n"], "responses": ["```python\ndef find_Average_Of_Cube(n: int) -> float:\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    average = sum_of_cubes / n\n    return average\n\n# Test cases\nprint(find_Average_Of_Cube(3))  # Output: 12.0\nprint(find_Average_Of_Cube(5))  # Output: 45.0\n```"], "prompt_tokens": [554], "completion_tokens": [541], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_422_find_Average_Of_Cube"}
{"name": "mbpp_637_noprofit_noloss", "language": "Python3", "prompt": "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given amount has no profit and no loss\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "noprofit_noloss", "test": "def check(candidate):\n    assert candidate(1500, 1200) == False\n    assert candidate(100, 100) == True\n    assert candidate(2000, 5000) == False\n\ndef test_check():\n    check(noprofit_noloss)\n\ntest_check()\n", "sample_io": ["assert noprofit_noloss(1500, 1200) == False"], "source_codes": ["\ndef noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Returns True if no profit and no loss, else False.\n    \"\"\"\n    return actual_cost == sale_amount\n\n\n"], "responses": ["```python\ndef noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Returns True if no profit and no loss, else False.\n    \"\"\"\n    return actual_cost == sale_amount\n```"], "prompt_tokens": [297], "completion_tokens": [220], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_637_noprofit_noloss"}
{"name": "mbpp_557_toggle_string", "language": "Python3", "prompt": "def toggle_string(string: str) -> str:\n    \"\"\"\n\tWrite a function to toggle the case of all characters in a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "toggle_string", "test": "def check(candidate):\n    assert candidate('Python') == 'pYTHON'\n    assert candidate('Pangram') == 'pANGRAM'\n    assert candidate('LIttLE') == 'liTTle'\n\ndef test_check():\n    check(toggle_string)\n\ntest_check()\n", "sample_io": ["assert toggle_string('Python') == 'pYTHON'"], "source_codes": ["\ndef toggle_string(string: str) -> str:\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \n    Args:\n    string (str): Input string to toggle case\n    \n    Returns:\n    str: String with toggled case for all characters\n    \"\"\"\n    return string.swapcase()\n\n\n"], "responses": ["```python\ndef toggle_string(string: str) -> str:\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \n    Args:\n    string (str): Input string to toggle case\n    \n    Returns:\n    str: String with toggled case for all characters\n    \"\"\"\n    return string.swapcase()\n```"], "prompt_tokens": [316], "completion_tokens": [266], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_557_toggle_string"}
{"name": "mbpp_786_right_insertion", "language": "Python3", "prompt": "from typing import List\n\ndef right_insertion(a: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "right_insertion", "test": "def check(candidate):\n    assert candidate([1, 2, 4, 5], 6) == 4\n    assert candidate([1, 2, 4, 5], 3) == 2\n    assert candidate([1, 2, 4, 5], 7) == 4\n\ndef test_check():\n    check(right_insertion)\n\ntest_check()\n", "sample_io": ["assert right_insertion([1, 2, 4, 5], 6) == 4"], "source_codes": ["\nfrom typing import List\n\ndef right_insertion(a: List[int], x: int) -> int:\n    low, high = 0, len(a)\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] <= x:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef right_insertion(a: List[int], x: int) -> int:\n    low, high = 0, len(a)\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] <= x:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n```"], "prompt_tokens": [639], "completion_tokens": [574], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_786_right_insertion"}
{"name": "mbpp_807_first_odd", "language": "Python3", "prompt": "from typing import List\n\ndef first_odd(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the first odd number in a given list of numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "first_odd", "test": "def check(candidate):\n    assert candidate([1, 3, 5]) == 1\n    assert candidate([2, 4, 1, 3]) == 1\n    assert candidate([8, 9, 1]) == 9\n\ndef test_check():\n    check(first_odd)\n\ntest_check()\n", "sample_io": ["assert first_odd([1, 3, 5]) == 1"], "source_codes": ["\nfrom typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    If no odd number is found, return None.\n    \"\"\"\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n\n"], "responses": ["```python\nfrom typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    If no odd number is found, return None.\n    \"\"\"\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n```"], "prompt_tokens": [330], "completion_tokens": [273], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_807_first_odd"}
{"name": "mbpp_631_replace_spaces", "language": "Python3", "prompt": "def replace_spaces(text: str) -> str:\n    \"\"\"\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_spaces", "test": "def check(candidate):\n    assert candidate('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n    assert candidate('The_Avengers') == 'The Avengers'\n    assert candidate('Fast and Furious') == 'Fast_and_Furious'\n\ndef test_check():\n    check(replace_spaces)\n\ntest_check()\n", "sample_io": ["assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"], "source_codes": ["\ndef replace_spaces(text: str) -> str:\n    \"\"\"\n    Replace whitespaces with underscores and underscores with whitespaces in a given string.\n    \"\"\"\n    result = []\n    for char in text:\n        if char == ' ':\n            result.append('_')\n        elif char == '_':\n            result.append(' ')\n        else:\n            result.append(char)\n    return ''.join(result)\n\n\n"], "responses": ["```python\ndef replace_spaces(text: str) -> str:\n    \"\"\"\n    Replace whitespaces with underscores and underscores with whitespaces in a given string.\n    \"\"\"\n    result = []\n    for char in text:\n        if char == ' ':\n            result.append('_')\n        elif char == '_':\n            result.append(' ')\n        else:\n            result.append(char)\n    return ''.join(result)\n```"], "prompt_tokens": [397], "completion_tokens": [351], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_631_replace_spaces"}
{"name": "mbpp_573_unique_product", "language": "Python3", "prompt": "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to calculate the product of the unique numbers in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "unique_product", "test": "def check(candidate):\n    assert candidate([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000\n    assert candidate([1, 2, 3, 1]) == 6\n    assert candidate([7, 8, 9, 0, 1, 1]) == 0\n\ndef test_check():\n    check(unique_product)\n\ntest_check()\n", "sample_io": ["assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000"], "source_codes": ["\nfrom typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n    \n    return product\n\nprint(unique_product([1, 2, 3, 4]))        # Output: 24\nprint(unique_product([2, 2, 2, 3]))        # Output: 6\nprint(unique_product([0, 1, 2, 3]))        # Output: 0\nprint(unique_product([]))                   # Output: 1\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n    \n    return product\n\nprint(unique_product([1, 2, 3, 4]))        # Output: 24\nprint(unique_product([2, 2, 2, 3]))        # Output: 6\nprint(unique_product([0, 1, 2, 3]))        # Output: 0\nprint(unique_product([]))                   # Output: 1\n```"], "prompt_tokens": [467], "completion_tokens": [478], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_573_unique_product"}
{"name": "mbpp_643_text_match_wordz_middle", "language": "Python3", "prompt": "def text_match_wordz_middle(text: str) -> bool:\n    \"\"\"\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_wordz_middle", "test": "def check(candidate):\n    assert candidate('pythonzabc.') == True\n    assert candidate('zxyabc.') == False\n    assert candidate('  lang  .') == False\n\ndef test_check():\n    check(text_match_wordz_middle)\n\ntest_check()\n", "sample_io": ["assert text_match_wordz_middle('pythonzabc.') == True"], "source_codes": ["\ndef text_match_wordz_middle(text: str) -> bool:\n    words = text.split()\n    for word in words:\n        if len(word) <= 2:\n            continue\n        middle = word[1:-1]\n        if 'z' in middle:\n            return True\n    return False\n\n\n"], "responses": ["```python\ndef text_match_wordz_middle(text: str) -> bool:\n    words = text.split()\n    for word in words:\n        if len(word) <= 2:\n            continue\n        middle = word[1:-1]\n        if 'z' in middle:\n            return True\n    return False\n```"], "prompt_tokens": [692], "completion_tokens": [617], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_643_text_match_wordz_middle"}
{"name": "mbpp_299_max_aggregate", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    \"\"\"\n\tWrite a function to calculate the maximum aggregate from the list of tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_aggregate", "test": "def check(candidate):\n    assert candidate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]) == ('Juan Whelan', 212)\n    assert candidate([('Juan Whelan', 50), ('Sabah Colley', 48), ('Peter Nichols', 37), ('Juan Whelan', 22), ('Sabah Colley', 14)]) == ('Juan Whelan', 72)\n    assert candidate([('Juan Whelan', 10), ('Sabah Colley', 20), ('Peter Nichols', 30), ('Juan Whelan', 40), ('Sabah Colley', 50)]) == ('Sabah Colley', 70)\n\ndef test_check():\n    check(max_aggregate)\n\ntest_check()\n", "sample_io": ["assert max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]) == ('Juan Whelan', 212)"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = {}\n    \n    for key, value in stdata:\n        if key in aggregates:\n            aggregates[key] += value\n        else:\n            aggregates[key] = value\n            \n    max_key = None\n    max_value = float('-inf')\n    for key, value in aggregates.items():\n        if value > max_value:\n            max_value = value\n            max_key = key\n            \n    return (max_key, max_value)\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = {}\n    \n    for key, value in stdata:\n        if key in aggregates:\n            aggregates[key] += value\n        else:\n            aggregates[key] = value\n            \n    max_key = None\n    max_value = float('-inf')\n    for key, value in aggregates.items():\n        if value > max_value:\n            max_value = value\n            max_key = key\n            \n    return (max_key, max_value)\n```"], "prompt_tokens": [655], "completion_tokens": [621], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_299_max_aggregate"}
{"name": "mbpp_474_replace_char", "language": "Python3", "prompt": "def replace_char(str1: str, ch: str, newch: str) -> str:\n    \"\"\"\n\tWrite a function to replace characters in a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_char", "test": "def check(candidate):\n    assert candidate('polygon', 'y', 'l') == 'pollgon'\n    assert candidate('character', 'c', 'a') == 'aharaater'\n    assert candidate('python', 'l', 'a') == 'python'\n\ndef test_check():\n    check(replace_char)\n\ntest_check()\n", "sample_io": ["assert replace_char('polygon', 'y', 'l') == 'pollgon'"], "source_codes": ["\ndef replace_char(str1: str, ch: str, newch: str) -> str:\n    \"\"\"\n    Write a function to replace characters in a string.\n    \n    Args:\n    str1 (str): The original string.\n    ch (str): The character to replace.\n    newch (str): The new character to replace with.\n    \n    Returns:\n    str: Modified string with replaced characters.\n    \"\"\"\n    return str1.replace(ch, newch)\n\n\n"], "responses": ["```python\ndef replace_char(str1: str, ch: str, newch: str) -> str:\n    \"\"\"\n    Write a function to replace characters in a string.\n    \n    Args:\n    str1 (str): The original string.\n    ch (str): The character to replace.\n    newch (str): The new character to replace with.\n    \n    Returns:\n    str: Modified string with replaced characters.\n    \"\"\"\n    return str1.replace(ch, newch)\n```"], "prompt_tokens": [569], "completion_tokens": [537], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_474_replace_char"}
{"name": "mbpp_433_check_greater", "language": "Python3", "prompt": "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the entered number is greater than the elements of the given array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_433_check_greater.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_greater", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], 4) == False\n    assert candidate([2, 3, 4, 5, 6], 8) == True\n    assert candidate([9, 7, 4, 8, 6, 1], 11) == True\n\ndef test_check():\n    check(check_greater)\n\ntest_check()\n", "sample_io": ["assert check_greater([1, 2, 3, 4, 5], 4) == False"], "source_codes": ["\nfrom typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all(number > element for element in arr)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all(number > element for element in arr)\n```"], "prompt_tokens": [583], "completion_tokens": [469], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_433_check_greater"}
{"name": "mbpp_427_change_date_format", "language": "Python3", "prompt": "def change_date_format(dt: str) -> str:\n    \"\"\"\n\tWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "change_date_format", "test": "def check(candidate):\n    assert candidate('2026-01-02') == '02-01-2026'\n    assert candidate('2020-11-13') == '13-11-2020'\n    assert candidate('2021-04-26') == '26-04-2021'\n\ndef test_check():\n    check(change_date_format)\n\ntest_check()\n", "sample_io": ["assert change_date_format('2026-01-02') == '02-01-2026'"], "source_codes": ["\ndef change_date_format(dt: str) -> str:\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    year, month, day = dt.split('-')\n    return f\"{day}-{month}-{year}\"\n\n\n"], "responses": ["```python\ndef change_date_format(dt: str) -> str:\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    year, month, day = dt.split('-')\n    return f\"{day}-{month}-{year}\"\n```"], "prompt_tokens": [303], "completion_tokens": [232], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_427_change_date_format"}
{"name": "mbpp_442_positive_count", "language": "Python3", "prompt": "from typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    \"\"\"\n\tWrite a function to find the ration of positive numbers in an array of integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "positive_count", "test": "def check(candidate):\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56\n\ndef test_check():\n    check(positive_count)\n\ntest_check()\n", "sample_io": ["assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54"], "source_codes": ["\nfrom typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    \"\"\"\n    Write a function to find the ratio of positive numbers in an array of integers.\n    \"\"\"\n    if not nums:\n        return 0.0\n    \n    positive_numbers = [num for num in nums if num > 0]\n    ratio = len(positive_numbers) / len(nums)\n    return ratio\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    \"\"\"\n    Write a function to find the ratio of positive numbers in an array of integers.\n    \"\"\"\n    if not nums:\n        return 0.0\n    \n    positive_numbers = [num for num in nums if num > 0]\n    ratio = len(positive_numbers) / len(nums)\n    return ratio\n```"], "prompt_tokens": [345], "completion_tokens": [295], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_442_positive_count"}
{"name": "mbpp_453_sumofFactors", "language": "Python3", "prompt": "def sumofFactors(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of even factors of a number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sumofFactors", "test": "def check(candidate):\n    assert candidate(18) == 26\n    assert candidate(30) == 48\n    assert candidate(6) == 8\n\ndef test_check():\n    check(sumofFactors)\n\ntest_check()\n", "sample_io": ["assert sumofFactors(18) == 26"], "source_codes": ["\ndef sumofFactors(n: int) -> int:\n    total = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            if i % 2 == 0:\n                total += i\n            div = n // i\n            if div != i and div % 2 == 0:\n                total += div\n        i += 1\n    return total\n\n\n"], "responses": ["```python\ndef sumofFactors(n: int) -> int:\n    total = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            if i % 2 == 0:\n                total += i\n            div = n // i\n            if div != i and div % 2 == 0:\n                total += div\n        i += 1\n    return total\n```"], "prompt_tokens": [489], "completion_tokens": [461], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_453_sumofFactors"}
{"name": "mbpp_478_remove_lowercase", "language": "Python3", "prompt": "def remove_lowercase(str1: str) -> str:\n    \"\"\"\n\tWrite a function to remove lowercase substrings from a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_lowercase", "test": "def check(candidate):\n    assert candidate('PYTHon') == 'PYTH'\n    assert candidate('FInD') == 'FID'\n    assert candidate('STRinG') == 'STRG'\n\ndef test_check():\n    check(remove_lowercase)\n\ntest_check()\n", "sample_io": ["assert remove_lowercase('PYTHon') == 'PYTH'"], "source_codes": ["\nimport re\n\ndef remove_lowercase(str1: str) -> str:\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)\n\n\n"], "responses": ["```python\nimport re\n\ndef remove_lowercase(str1: str) -> str:\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)\n```"], "prompt_tokens": [493], "completion_tokens": [411], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_478_remove_lowercase"}
{"name": "mbpp_18_remove_dirty_chars", "language": "Python3", "prompt": "def remove_dirty_chars(string: str, second_string: str) -> str:\n    \"\"\"\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_dirty_chars", "test": "def check(candidate):\n    assert candidate('probasscurve', 'pros') == 'bacuve'\n    assert candidate('digitalindia', 'talent') == 'digiidi'\n    assert candidate('exoticmiles', 'toxic') == 'emles'\n\ndef test_check():\n    check(remove_dirty_chars)\n\ntest_check()\n", "sample_io": ["assert remove_dirty_chars('probasscurve', 'pros') == 'bacuve'"], "source_codes": ["\ndef remove_dirty_chars(string: str, second_string: str) -> str:\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    chars_to_remove = set(second_string)\n    result = ''.join(char for char in string if char not in chars_to_remove)\n    return result\n\n\n"], "responses": ["```python\ndef remove_dirty_chars(string: str, second_string: str) -> str:\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    chars_to_remove = set(second_string)\n    result = ''.join(char for char in string if char not in chars_to_remove)\n    return result\n```"], "prompt_tokens": [421], "completion_tokens": [356], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_18_remove_dirty_chars"}
{"name": "mbpp_730_consecutive_duplicates", "language": "Python3", "prompt": "from typing import List, Any\n\ndef consecutive_duplicates(nums: List[Any]) -> List[Any]:\n    \"\"\"\n\tWrite a function to remove consecutive duplicates of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "consecutive_duplicates", "test": "def check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [10, 15, 19, 18, 17, 26, 17, 18, 10]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == ['a', 'b', 'c', 'd']\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a']) == ['a', 'b', 'c', 'd', 'a']\n\ndef test_check():\n    check(consecutive_duplicates)\n\ntest_check()\n", "sample_io": ["assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"], "source_codes": ["\nfrom typing import List, Any\n\ndef consecutive_duplicates(nums: List[Any]) -> List[Any]:\n    \"\"\"\n    Remove consecutive duplicates from the list.\n    \"\"\"\n    if not nums:\n        return []\n\n    result = []\n    for num in nums:\n        if not result or result[-1] != num:\n            result.append(num)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef consecutive_duplicates(nums: List[Any]) -> List[Any]:\n    \"\"\"\n    Remove consecutive duplicates from the list.\n    \"\"\"\n    if not nums:\n        return []\n\n    result = []\n    for num in nums:\n        if not result or result[-1] != num:\n            result.append(num)\n    return result\n```"], "prompt_tokens": [567], "completion_tokens": [508], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_730_consecutive_duplicates"}
{"name": "mbpp_446_count_Occurrence", "language": "Python3", "prompt": "from typing import Any, List\n\ndef count_Occurrence(tup: Any, lst: List[Any]) -> int:\n    \"\"\"\n\tWrite a python function to count the occurence of all elements of list in a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Occurrence", "test": "def check(candidate):\n    assert candidate(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3\n    assert candidate((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]) == 6\n    assert candidate((1, 2, 3, 4, 5, 6), [1, 2]) == 2\n\ndef test_check():\n    check(count_Occurrence)\n\ntest_check()\n", "sample_io": ["assert count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3"], "source_codes": ["\nfrom typing import Any, List, Dict\n\ndef count_Occurrence(tup: Any, lst: List[Any]) -> Dict[Any, int]:\n    \"\"\"\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    Returns a dictionary with elements from the list as keys and their counts in the tuple as values.\n    \"\"\"\n    count_dict = {}\n    for element in lst:\n        count_dict[element] = tup.count(element)\n    return count_dict\n\n\n"], "responses": ["```python\nfrom typing import Any, List, Dict\n\ndef count_Occurrence(tup: Any, lst: List[Any]) -> Dict[Any, int]:\n    \"\"\"\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    Returns a dictionary with elements from the list as keys and their counts in the tuple as values.\n    \"\"\"\n    count_dict = {}\n    for element in lst:\n        count_dict[element] = tup.count(element)\n    return count_dict\n```"], "prompt_tokens": [583], "completion_tokens": [528], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_446_count_Occurrence"}
{"name": "mbpp_772_remove_length", "language": "Python3", "prompt": "def remove_length(test_str: str, K: int) -> str:\n    \"\"\"\n\tWrite a function to remove all the words with k length in the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_length", "test": "def check(candidate):\n    assert candidate('The person is most value tet', 3) == 'person is most value'\n    assert candidate('If you told me about this ok', 4) == 'If you me about ok'\n    assert candidate('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'\n\ndef test_check():\n    check(remove_length)\n\ntest_check()\n", "sample_io": ["assert remove_length('The person is most value tet', 3) == 'person is most value'"], "source_codes": ["\ndef remove_length(test_str: str, K: int) -> str:\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return \" \".join(filtered_words)\n\n\n"], "responses": ["```python\ndef remove_length(test_str: str, K: int) -> str:\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return \" \".join(filtered_words)\n```"], "prompt_tokens": [504], "completion_tokens": [422], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_772_remove_length"}
{"name": "mbpp_752_jacobsthal_num", "language": "Python3", "prompt": "def jacobsthal_num(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "jacobsthal_num", "test": "def check(candidate):\n    assert candidate(5) == 11\n    assert candidate(2) == 1\n    assert candidate(4) == 5\n    assert candidate(13) == 2731\n\ndef test_check():\n    check(jacobsthal_num)\n\ntest_check()\n", "sample_io": ["assert jacobsthal_num(5) == 11"], "source_codes": ["\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1  # J0, J1\n    for _ in range(2, n + 1):\n        c = b + 2 * a\n        a, b = b, c\n    return b\n\n\n"], "responses": ["```python\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1  # J0, J1\n    for _ in range(2, n + 1):\n        c = b + 2 * a\n        a, b = b, c\n    return b\n```"], "prompt_tokens": [598], "completion_tokens": [436], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_752_jacobsthal_num"}
{"name": "mbpp_145_max_Abs_Diff", "language": "Python3", "prompt": "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the maximum difference between any two elements in a given array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_145_max_Abs_Diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_Abs_Diff", "test": "def check(candidate):\n    assert candidate([2, 1, 5, 3]) == 4\n    assert candidate([9, 3, 2, 5, 1]) == 8\n    assert candidate([3, 2, 1]) == 2\n\ndef test_check():\n    check(max_Abs_Diff)\n\ntest_check()\n", "sample_io": ["assert max_Abs_Diff([2, 1, 5, 3]) == 4"], "source_codes": ["\nfrom typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    if not arr:  # handle empty array edge case\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val - min_val\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    if not arr:  # handle empty array edge case\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val - min_val\n```"], "prompt_tokens": [345], "completion_tokens": [287], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_145_max_Abs_Diff"}
{"name": "mbpp_572_two_unique_nums", "language": "Python3", "prompt": "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "two_unique_nums", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5]\n    assert candidate([1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef test_check():\n    check(two_unique_nums)\n\ntest_check()\n", "sample_io": ["assert two_unique_nums([1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5]"], "source_codes": ["\nfrom typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove duplicates from the given list of integers, preserving the order.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n    Remove duplicates from the given list of integers, preserving the order.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n```"], "prompt_tokens": [441], "completion_tokens": [380], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_572_two_unique_nums"}
{"name": "mbpp_556_find_Odd_Pair", "language": "Python3", "prompt": "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of pairs whose xor value is odd.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Odd_Pair", "test": "def check(candidate):\n    assert candidate([5, 4, 7, 2, 1], 5) == 6\n    assert candidate([7, 2, 8, 1, 0, 5, 11], 7) == 12\n    assert candidate([1, 2, 3], 3) == 2\n\ndef test_check():\n    check(find_Odd_Pair)\n\ntest_check()\n", "sample_io": ["assert find_Odd_Pair([5, 4, 7, 2, 1], 5) == 6"], "source_codes": ["\nfrom typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    \"\"\"\n    Count the number of pairs whose XOR value is odd.\n    \"\"\"\n    even_count = sum(1 for x in A if x % 2 == 0)\n    odd_count = N - even_count\n    return even_count * odd_count\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    \"\"\"\n    Count the number of pairs whose XOR value is odd.\n    \"\"\"\n    even_count = sum(1 for x in A if x % 2 == 0)\n    odd_count = N - even_count\n    return even_count * odd_count\n```"], "prompt_tokens": [409], "completion_tokens": [340], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_556_find_Odd_Pair"}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "Python3", "prompt": "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sum_increasing_subseq", "test": "def check(candidate):\n    assert candidate([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11\n    assert candidate([1, 101, 2, 3, 100, 4, 5], 7, 2, 5) == 7\n    assert candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n\ndef test_check():\n    check(max_sum_increasing_subseq)\n\ntest_check()\n", "sample_io": ["assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11"], "source_codes": ["\nfrom typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if k <= index or index >= n or k >= n:\n        return -1\n\n    max_sum_ending = [0] * (index + 1)\n    for i in range(index + 1):\n        max_sum_ending[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                max_sum_ending[i] = max(max_sum_ending[i], max_sum_ending[j] + a[i])\n\n    max_total = -1\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = max_sum_ending[i] + a[k]\n            if current_sum > max_total:\n                max_total = current_sum\n\n    return max_total\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if k <= index or index >= n or k >= n:\n        return -1\n\n    max_sum_ending = [0] * (index + 1)\n    for i in range(index + 1):\n        max_sum_ending[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                max_sum_ending[i] = max(max_sum_ending[i], max_sum_ending[j] + a[i])\n\n    max_total = -1\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = max_sum_ending[i] + a[k]\n            if current_sum > max_total:\n                max_total = current_sum\n\n    return max_total\n```"], "prompt_tokens": [1274], "completion_tokens": [1258], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_306_max_sum_increasing_subseq"}
{"name": "mbpp_388_highest_Power_of_2", "language": "Python3", "prompt": "def highest_Power_of_2(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the highest power of 2 that is less than or equal to n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "highest_Power_of_2", "test": "def check(candidate):\n    assert candidate(10) == 8\n    assert candidate(19) == 16\n    assert candidate(32) == 32\n\ndef test_check():\n    check(highest_Power_of_2)\n\ntest_check()\n", "sample_io": ["assert highest_Power_of_2(10) == 8"], "source_codes": ["\ndef highest_Power_of_2(n: int) -> int:\n    \"\"\"\n    Finds the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n < 1:\n        return 0\n    \n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n\n\n"], "responses": ["```python\ndef highest_Power_of_2(n: int) -> int:\n    \"\"\"\n    Finds the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n < 1:\n        return 0\n    \n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n```"], "prompt_tokens": [475], "completion_tokens": [410], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_388_highest_Power_of_2"}
{"name": "mbpp_401_add_nested_tuples", "language": "Python3", "prompt": "from typing import List\n\ndef add_nested_tuples(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of list elements in the given two nested lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_nested_tuples", "test": "def check(candidate):\n    assert candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[7, 10], [7, 14], [3, 10], [8, 13]]\n    assert candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]) == [[9, 12], [9, 16], [5, 12], [10, 15]]\n    assert candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]) == [[11, 14], [11, 18], [7, 14], [12, 17]]\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n", "sample_io": ["assert add_nested_tuples([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[7, 10], [7, 14], [3, 10], [8, 13]]"], "source_codes": ["\nfrom typing import List\n\ndef add_nested_tuples(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Write a function to perform index wise addition of list elements in the given two nested lists.\n    \"\"\"\n\n    result = []\n\n    for inner_list1, inner_list2 in zip(test_tup1, test_tup2):\n        inner_sum = []\n        for elem1, elem2 in zip(inner_list1, inner_list2):\n            inner_sum.append(elem1 + elem2)\n        result.append(inner_sum)\n\n    return result\n\n# Example usage:\ntest_tup1 = [[1, 2, 3], [4, 5, 6]]\ntest_tup2 = [[7, 8, 9], [10, 11, 12]]\n\nprint(add_nested_tuples(test_tup1, test_tup2))\n# Output: [[8, 10, 12], [14, 16, 18]]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef add_nested_tuples(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Write a function to perform index wise addition of list elements in the given two nested lists.\n    \"\"\"\n\n    result = []\n\n    for inner_list1, inner_list2 in zip(test_tup1, test_tup2):\n        inner_sum = []\n        for elem1, elem2 in zip(inner_list1, inner_list2):\n            inner_sum.append(elem1 + elem2)\n        result.append(inner_sum)\n\n    return result\n\n# Example usage:\ntest_tup1 = [[1, 2, 3], [4, 5, 6]]\ntest_tup2 = [[7, 8, 9], [10, 11, 12]]\n\nprint(add_nested_tuples(test_tup1, test_tup2))\n# Output: [[8, 10, 12], [14, 16, 18]]\n```"], "prompt_tokens": [660], "completion_tokens": [700], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_401_add_nested_tuples"}
{"name": "mbpp_435_last_Digit", "language": "Python3", "prompt": "def last_Digit(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the last digit of a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_435_last_Digit.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "last_Digit", "test": "def check(candidate):\n    assert candidate(123) == 3\n    assert candidate(25) == 5\n    assert candidate(30) == 0\n\ndef test_check():\n    check(last_Digit)\n\ntest_check()\n", "sample_io": ["assert last_Digit(123) == 3"], "source_codes": ["\ndef last_Digit(n: int) -> int:\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return abs(n) % 10\n\n\n"], "responses": ["```python\ndef last_Digit(n: int) -> int:\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return abs(n) % 10\n```"], "prompt_tokens": [282], "completion_tokens": [204], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_435_last_Digit"}
{"name": "mbpp_611_max_of_nth", "language": "Python3", "prompt": "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    \"\"\"\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_of_nth", "test": "def check(candidate):\n    assert candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n    assert candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\n    assert candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11\n\ndef test_check():\n    check(max_of_nth)\n\ntest_check()\n", "sample_io": ["assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19"], "source_codes": ["\nfrom typing import List, Optional\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> Optional[int]:\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of the N'th column.\n    If the column does not exist in any row, returns None.\n    \"\"\"\n    nth_elements = [row[N] for row in test_list if len(row) > N]\n    \n    if not nth_elements:\n        return None\n    \n    return max(nth_elements)\n\n\n"], "responses": ["```python\nfrom typing import List, Optional\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> Optional[int]:\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of the N'th column.\n    If the column does not exist in any row, returns None.\n    \"\"\"\n    nth_elements = [row[N] for row in test_list if len(row) > N]\n    \n    if not nth_elements:\n        return None\n    \n    return max(nth_elements)\n```"], "prompt_tokens": [635], "completion_tokens": [579], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_611_max_of_nth"}
{"name": "mbpp_280_sequential_search", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    \"\"\"\n\tWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sequential_search", "test": "def check(candidate):\n    assert candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31) == (True, 3)\n    assert candidate([12, 32, 45, 62, 35, 47, 44, 61], 61) == (True, 7)\n    assert candidate([9, 10, 17, 19, 22, 39, 48, 56], 48) == (True, 6)\n\ndef test_check():\n    check(sequential_search)\n\ntest_check()\n", "sample_io": ["assert sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31) == (True, 3)"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return True, index\n    return False, -1\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return True, index\n    return False, -1\n```"], "prompt_tokens": [537], "completion_tokens": [384], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_280_sequential_search"}
{"name": "mbpp_576_is_Sub_Array", "language": "Python3", "prompt": "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Sub_Array", "test": "def check(candidate):\n    assert candidate([1, 4, 3, 5], [1, 2]) == False\n    assert candidate([1, 2, 1], [1, 2, 1]) == True\n    assert candidate([1, 0, 2, 2], [2, 2, 0]) == False\n\ndef test_check():\n    check(is_Sub_Array)\n\ntest_check()\n", "sample_io": ["assert is_Sub_Array([1, 4, 3, 5], [1, 2]) == False"], "source_codes": ["\nfrom typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    len_A = len(A)\n    len_B = len(B)\n\n    if len_B == 0:\n        return True\n\n    if len_B > len_A:\n        return False\n\n    for i in range(len_A - len_B + 1):\n        if A[i:i + len_B] == B:\n            return True\n\n    return False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    len_A = len(A)\n    len_B = len(B)\n\n    if len_B == 0:\n        return True\n\n    if len_B > len_A:\n        return False\n\n    for i in range(len_A - len_B + 1):\n        if A[i:i + len_B] == B:\n            return True\n\n    return False\n```"], "prompt_tokens": [633], "completion_tokens": [584], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_576_is_Sub_Array"}
{"name": "mbpp_131_reverse_vowels", "language": "Python3", "prompt": "def reverse_vowels(str1: str) -> str:\n    \"\"\"\n\tWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "reverse_vowels", "test": "def check(candidate):\n    assert candidate('Python') == 'Python'\n    assert candidate('USA') == 'ASU'\n    assert candidate('ab') == 'ab'\n\ndef test_check():\n    check(reverse_vowels)\n\ntest_check()\n", "sample_io": ["assert reverse_vowels('Python') == 'Python'"], "source_codes": ["\ndef reverse_vowels(str1: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    vowels_in_str = [char for char in str_list if char in vowels]\n    vowels_in_str.reverse()\n    j = 0\n    for i in range(len(str_list)):\n        if str_list[i] in vowels:\n            str_list[i] = vowels_in_str[j]\n            j += 1\n    return \"\".join(str_list)\n\n\n"], "responses": ["```python\ndef reverse_vowels(str1: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    vowels_in_str = [char for char in str_list if char in vowels]\n    vowels_in_str.reverse()\n    j = 0\n    for i in range(len(str_list)):\n        if str_list[i] in vowels:\n            str_list[i] = vowels_in_str[j]\n            j += 1\n    return \"\".join(str_list)\n```"], "prompt_tokens": [472], "completion_tokens": [439], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_131_reverse_vowels"}
{"name": "mbpp_432_median_trapezium", "language": "Python3", "prompt": "def median_trapezium(base1: int, base2: int, height: int) -> float:\n    \"\"\"\n\tWrite a function to find the median length of a trapezium.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "median_trapezium", "test": "def check(candidate):\n    assert candidate(15, 25, 35) == 20\n    assert candidate(10, 20, 30) == 15\n    assert candidate(6, 9, 4) == 7.5\n\ndef test_check():\n    check(median_trapezium)\n\ntest_check()\n", "sample_io": ["assert median_trapezium(15, 25, 35) == 20"], "source_codes": ["\ndef median_trapezium(base1: int, base2: int, height: int) -> float:\n    \"\"\"\n    Calculate the median length of a trapezium given the lengths of the two bases.\n\n    Parameters:\n    - base1 (int): length of the first base.\n    - base2 (int): length of the second base.\n    - height (int): height of the trapezium (irrelevant for median calculation).\n\n    Returns:\n    - float: median length of the trapezium.\n    \"\"\"\n    median = (base1 + base2) / 2\n    return median\n\n\n"], "responses": ["```python\ndef median_trapezium(base1: int, base2: int, height: int) -> float:\n    \"\"\"\n    Calculate the median length of a trapezium given the lengths of the two bases.\n\n    Parameters:\n    - base1 (int): length of the first base.\n    - base2 (int): length of the second base.\n    - height (int): height of the trapezium (irrelevant for median calculation).\n\n    Returns:\n    - float: median length of the trapezium.\n    \"\"\"\n    median = (base1 + base2) / 2\n    return median\n```"], "prompt_tokens": [632], "completion_tokens": [618], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_432_median_trapezium"}
{"name": "mbpp_161_remove_elements", "language": "Python3", "prompt": "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to remove all elements from a given list present in another list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_elements", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]\n\ndef test_check():\n    check(remove_elements)\n\ntest_check()\n", "sample_io": ["assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"], "source_codes": ["\nfrom typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \n    Args:\n    list1: List[int] - The original list.\n    list2: List[int] - The list containing elements to remove from list1.\n    \n    Returns:\n    List[int] - A list with elements from list1 with all elements in list2 removed.\n    \"\"\"\n    return [item for item in list1 if item not in list2]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \n    Args:\n    list1: List[int] - The original list.\n    list2: List[int] - The list containing elements to remove from list1.\n    \n    Returns:\n    List[int] - A list with elements from list1 with all elements in list2 removed.\n    \"\"\"\n    return [item for item in list1 if item not in list2]\n```"], "prompt_tokens": [494], "completion_tokens": [465], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_161_remove_elements"}
{"name": "mbpp_597_find_kth", "language": "Python3", "prompt": "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    \"\"\"\n\tWrite a function to find kth element from the given two sorted arrays.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_kth", "test": "def check(candidate):\n    assert candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n    assert candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256\n    assert candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8\n\ndef test_check():\n    check(find_kth)\n\ntest_check()\n", "sample_io": ["assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6"], "source_codes": ["\nfrom typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    \"\"\"\n    Find the kth element from the two sorted arrays.\n    \"\"\"\n    n, m = len(arr1), len(arr2)\n    \n    if n > m:\n        return find_kth(arr2, arr1, k)\n    \n    if n == 0:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    low = max(0, k - m)\n    high = min(k, n)\n    \n    while low <= high:\n        i = (low + high) // 2\n        j = k - i\n        \n        leftA = arr1[i-1] if i > 0 else float('-inf')\n        leftB = arr2[j-1] if j > 0 else float('-inf')\n        rightA = arr1[i] if i < n else float('inf')\n        rightB = arr2[j] if j < m else float('inf')\n        \n        if leftA <= rightB and leftB <= rightA:\n            return max(leftA, leftB)\n        elif leftA > rightB:\n            high = i - 1\n        else:\n            low = i + 1\n    \n    raise ValueError(\"k is out of bounds\")\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    \"\"\"\n    Find the kth element from the two sorted arrays.\n    \"\"\"\n    n, m = len(arr1), len(arr2)\n    \n    if n > m:\n        return find_kth(arr2, arr1, k)\n    \n    if n == 0:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    low = max(0, k - m)\n    high = min(k, n)\n    \n    while low <= high:\n        i = (low + high) // 2\n        j = k - i\n        \n        leftA = arr1[i-1] if i > 0 else float('-inf')\n        leftB = arr2[j-1] if j > 0 else float('-inf')\n        rightA = arr1[i] if i < n else float('inf')\n        rightB = arr2[j] if j < m else float('inf')\n        \n        if leftA <= rightB and leftB <= rightA:\n            return max(leftA, leftB)\n        elif leftA > rightB:\n            high = i - 1\n        else:\n            low = i + 1\n    \n    raise ValueError(\"k is out of bounds\")\n```"], "prompt_tokens": [999], "completion_tokens": [1140], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_597_find_kth"}
{"name": "mbpp_226_odd_values_string", "language": "Python3", "prompt": "def odd_values_string(str: str) -> str:\n    \"\"\"\n\tWrite a python function to remove the characters which have odd index values of a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_values_string", "test": "def check(candidate):\n    assert candidate('abcdef') == 'ace'\n    assert candidate('python') == 'pto'\n    assert candidate('data') == 'dt'\n    assert candidate('lambs') == 'lms'\n\ndef test_check():\n    check(odd_values_string)\n\ntest_check()\n", "sample_io": ["assert odd_values_string('abcdef') == 'ace'"], "source_codes": ["\ndef odd_values_string(str: str) -> str:\n    \"\"\"\n    Remove characters with odd index values from the given string.\n    \"\"\"\n    return str[::2]\n\n\n"], "responses": ["```python\ndef odd_values_string(str: str) -> str:\n    \"\"\"\n    Remove characters with odd index values from the given string.\n    \"\"\"\n    return str[::2]\n```"], "prompt_tokens": [369], "completion_tokens": [278], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_226_odd_values_string"}
{"name": "mbpp_278_count_first_elements", "language": "Python3", "prompt": "from typing import List, Union, Tuple\n\ndef count_first_elements(test_tup: List[Union[int, Tuple[int, int]]]) -> int:\n    \"\"\"\n\tWrite a function to find the number of elements that occurs before the list element in the given tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_278_count_first_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_first_elements", "test": "def check(candidate):\n    assert candidate([1, 5, 7, (4, 6), 10]) == 3\n    assert candidate([2, 9, (5, 7), 11]) == 2\n    assert candidate([11, 15, 5, 8, (2, 3), 8]) == 4\n\ndef test_check():\n    check(count_first_elements)\n\ntest_check()\n", "sample_io": ["assert count_first_elements([1, 5, 7, (4, 6), 10]) == 3"], "source_codes": ["\nfrom typing import List, Union, Tuple\n\ndef count_first_elements(test_tup: List[Union[int, Tuple[int, int]]]) -> int:\n    cnt = 0\n    for i, elem in enumerate(test_tup):\n        if isinstance(elem, tuple):\n            first_element = elem[0]\n            cnt += test_tup[:i].count(first_element)\n    return cnt\n\n\n"], "responses": ["```python\nfrom typing import List, Union, Tuple\n\ndef count_first_elements(test_tup: List[Union[int, Tuple[int, int]]]) -> int:\n    cnt = 0\n    for i, elem in enumerate(test_tup):\n        if isinstance(elem, tuple):\n            first_element = elem[0]\n            cnt += test_tup[:i].count(first_element)\n    return cnt\n```"], "prompt_tokens": [893], "completion_tokens": [804], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_278_count_first_elements"}
{"name": "mbpp_269_ascii_value", "language": "Python3", "prompt": "def ascii_value(k: str) -> int:\n    \"\"\"\n\tWrite a function to find the ascii value of a character.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_269_ascii_value.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "ascii_value", "test": "def check(candidate):\n    assert candidate('A') == 65\n    assert candidate('R') == 82\n    assert candidate('S') == 83\n\ndef test_check():\n    check(ascii_value)\n\ntest_check()\n", "sample_io": ["assert ascii_value('A') == 65"], "source_codes": ["\ndef ascii_value(k: str) -> int:\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)\n\n\n"], "responses": ["```python\ndef ascii_value(k: str) -> int:\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)\n```"], "prompt_tokens": [317], "completion_tokens": [238], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_269_ascii_value"}
{"name": "mbpp_739_find_Index", "language": "Python3", "prompt": "def find_Index(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Index", "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 14\n    assert candidate(4) == 45\n\ndef test_check():\n    check(find_Index)\n\ntest_check()\n", "sample_io": ["assert find_Index(2) == 4"], "source_codes": ["\nimport math\n\ndef find_Index(n: int) -> int:\n    val = 1 + 8 * 10**(n - 1)\n    k = (-1 + math.sqrt(val)) / 2\n    return math.ceil(k)\n\n\n"], "responses": ["```python\nimport math\n\ndef find_Index(n: int) -> int:\n    val = 1 + 8 * 10**(n - 1)\n    k = (-1 + math.sqrt(val)) / 2\n    return math.ceil(k)\n```"], "prompt_tokens": [1132], "completion_tokens": [1021], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_739_find_Index"}
{"name": "mbpp_19_test_duplicate", "language": "Python3", "prompt": "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to find whether a given array of integers contains any duplicate element.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "test_duplicate", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 4]) == True\n    assert candidate([1, 1, 2, 2, 3, 3, 4, 4, 5]) == True\n\ndef test_check():\n    check(test_duplicate)\n\ntest_check()\n", "sample_io": ["assert test_duplicate([1, 2, 3, 4, 5]) == False"], "source_codes": ["\nfrom typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n```"], "prompt_tokens": [480], "completion_tokens": [395], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_19_test_duplicate"}
{"name": "mbpp_62_smallest_num", "language": "Python3", "prompt": "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find smallest number in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "smallest_num", "test": "def check(candidate):\n    assert candidate([10, 20, 1, 45, 99]) == 1\n    assert candidate([1, 2, 3]) == 1\n    assert candidate([45, 46, 50, 60]) == 45\n\ndef test_check():\n    check(smallest_num)\n\ntest_check()\n", "sample_io": ["assert smallest_num([10, 20, 1, 45, 99]) == 1"], "source_codes": ["\nfrom typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    if not xs:\n        raise ValueError(\"The list is empty\")\n    smallest = xs[0]\n    for num in xs[1:]:\n        if num < smallest:\n            smallest = num\n    return smallest\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    if not xs:\n        raise ValueError(\"The list is empty\")\n    smallest = xs[0]\n    for num in xs[1:]:\n        if num < smallest:\n            smallest = num\n    return smallest\n```"], "prompt_tokens": [321], "completion_tokens": [275], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_62_smallest_num"}
{"name": "mbpp_746_sector_area", "language": "Python3", "prompt": "from typing import Optional\n\ndef sector_area(r: int, a: int) -> Optional[float]:\n    \"\"\"\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sector_area", "test": "def check(candidate):\n    assert candidate(4, 45) == 6.283185307179586\n    assert candidate(9, 45) == 31.808625617596654\n    assert candidate(9, 361) == None\n\ndef test_check():\n    check(sector_area)\n\ntest_check()\n", "sample_io": ["assert sector_area(4, 45) == 6.283185307179586"], "source_codes": ["\nfrom typing import Optional\nimport math\n\ndef sector_area(r: int, a: int) -> Optional[float]:\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. \n    Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    area = math.pi * r * r * (a / 360)\n    return area\n\n\n"], "responses": ["```python\nfrom typing import Optional\nimport math\n\ndef sector_area(r: int, a: int) -> Optional[float]:\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. \n    Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    area = math.pi * r * r * (a / 360)\n    return area\n```"], "prompt_tokens": [431], "completion_tokens": [351], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_746_sector_area"}
{"name": "mbpp_142_count_samepair", "language": "Python3", "prompt": "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    \"\"\"\n\tWrite a function to count number items that are identical in the same position of three given lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_samepair", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]) == 3\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]) == 4\n    assert candidate([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]) == 5\n\ndef test_check():\n    check(count_samepair)\n\ntest_check()\n", "sample_io": ["assert count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]) == 3"], "source_codes": ["\nfrom typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    \"\"\"\n    Count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    min_length = min(len(list1), len(list2), len(list3))\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\n# Example usage:\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 0, 4, 0]\n    l3 = [1, 2, 3, 0, 5]\n    print(count_samepair(l1, l2, l3))  # Output: 2 (positions 0 and 1)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    \"\"\"\n    Count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    min_length = min(len(list1), len(list2), len(list3))\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\n# Example usage:\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 0, 4, 0]\n    l3 = [1, 2, 3, 0, 5]\n    print(count_samepair(l1, l2, l3))  # Output: 2 (positions 0 and 1)\n```"], "prompt_tokens": [427], "completion_tokens": [466], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_142_count_samepair"}
{"name": "mbpp_400_extract_freq", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef extract_freq(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to extract the number of unique tuples in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_freq", "test": "def check(candidate):\n    assert candidate([(3, 4), (1, 2), (4, 3), (5, 6)]) == 3\n    assert candidate([(4, 15), (2, 3), (5, 4), (6, 7)]) == 4\n    assert candidate([(5, 16), (2, 3), (6, 5), (6, 9)]) == 4\n\ndef test_check():\n    check(extract_freq)\n\ntest_check()\n", "sample_io": ["assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]) == 3"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef extract_freq(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set(test_list)\n    return len(unique_tuples)\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef extract_freq(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set(test_list)\n    return len(unique_tuples)\n```"], "prompt_tokens": [361], "completion_tokens": [274], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_400_extract_freq"}
{"name": "mbpp_595_min_Swaps", "language": "Python3", "prompt": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_Swaps", "test": "def check(candidate):\n    assert candidate('1101', '1110') == 1\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n", "sample_io": ["assert min_Swaps('1101', '1110') == 1"], "source_codes": ["\nfrom typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    if len(str1) != len(str2):\n        return -1\n\n    if str1.count('0') != str2.count('0') or str1.count('1') != str2.count('1'):\n        return -1\n\n    count01 = 0\n    count10 = 0\n\n    for ch1, ch2 in zip(str1, str2):\n        if ch1 != ch2:\n            if ch1 == '0' and ch2 == '1':\n                count01 += 1\n            elif ch1 == '1' and ch2 == '0':\n                count10 += 1\n\n    return max(count01, count10)\n\n\n"], "responses": ["```python\nfrom typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    if len(str1) != len(str2):\n        return -1\n\n    if str1.count('0') != str2.count('0') or str1.count('1') != str2.count('1'):\n        return -1\n\n    count01 = 0\n    count10 = 0\n\n    for ch1, ch2 in zip(str1, str2):\n        if ch1 != ch2:\n            if ch1 == '0' and ch2 == '1':\n                count01 += 1\n            elif ch1 == '1' and ch2 == '0':\n                count10 += 1\n\n    return max(count01, count10)\n```"], "prompt_tokens": [945], "completion_tokens": [949], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_595_min_Swaps"}
{"name": "mbpp_135_hexagonal_num", "language": "Python3", "prompt": "def hexagonal_num(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth hexagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "hexagonal_num", "test": "def check(candidate):\n    assert candidate(10) == 190\n    assert candidate(5) == 45\n    assert candidate(7) == 91\n\ndef test_check():\n    check(hexagonal_num)\n\ntest_check()\n", "sample_io": ["assert hexagonal_num(10) == 190"], "source_codes": ["\ndef hexagonal_num(n: int) -> int:\n    \"\"\"\n    Calculate the nth hexagonal number.\n\n    Parameters:\n    n (int): The term of the hexagonal number to find.\n\n    Returns:\n    int: The nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n\n\n"], "responses": ["```python\ndef hexagonal_num(n: int) -> int:\n    \"\"\"\n    Calculate the nth hexagonal number.\n\n    Parameters:\n    n (int): The term of the hexagonal number to find.\n\n    Returns:\n    int: The nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n```"], "prompt_tokens": [256], "completion_tokens": [210], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_135_hexagonal_num"}
{"name": "mbpp_800_remove_all_spaces", "language": "Python3", "prompt": "def remove_all_spaces(text: str) -> str:\n    \"\"\"\n\tWrite a function to remove all whitespaces from a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_800_remove_all_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_all_spaces", "test": "def check(candidate):\n    assert candidate('python  program') == 'pythonprogram'\n    assert candidate('python   programming    language') == 'pythonprogramminglanguage'\n    assert candidate('python                     program') == 'pythonprogram'\n    assert candidate('   python                     program') == 'pythonprogram'\n\ndef test_check():\n    check(remove_all_spaces)\n\ntest_check()\n", "sample_io": ["assert remove_all_spaces('python  program') == 'pythonprogram'"], "source_codes": ["\ndef remove_all_spaces(text: str) -> str:\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return ''.join(char for char in text if not char.isspace())\n\n\n"], "responses": ["```python\ndef remove_all_spaces(text: str) -> str:\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return ''.join(char for char in text if not char.isspace())\n```"], "prompt_tokens": [367], "completion_tokens": [297], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_800_remove_all_spaces"}
{"name": "mbpp_127_multiply_int", "language": "Python3", "prompt": "def multiply_int(x: int, y: int) -> int:\n    \"\"\"\n\tWrite a function to multiply two integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "multiply_int", "test": "def check(candidate):\n    assert candidate(10, 20) == 200\n    assert candidate(5, 10) == 50\n    assert candidate(4, 8) == 32\n\ndef test_check():\n    check(multiply_int)\n\ntest_check()\n", "sample_io": ["assert multiply_int(10, 20) == 200"], "source_codes": ["\ndef multiply_int(x: int, y: int) -> int:\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y\n\n\n"], "responses": ["```python\ndef multiply_int(x: int, y: int) -> int:\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y\n```"], "prompt_tokens": [209], "completion_tokens": [131], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_127_multiply_int"}
{"name": "mbpp_764_number_ctr", "language": "Python3", "prompt": "def number_ctr(str: str) -> int:\n    \"\"\"\n\tWrite a python function to count number of digits in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "number_ctr", "test": "def check(candidate):\n    assert candidate('program2bedone') == 1\n    assert candidate('3wonders') == 1\n    assert candidate('123') == 3\n    assert candidate('3wond-1ers2') == 3\n\ndef test_check():\n    check(number_ctr)\n\ntest_check()\n", "sample_io": ["assert number_ctr('program2bedone') == 1"], "source_codes": ["\ndef number_ctr(s: str) -> int:\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count\n\nprint(number_ctr(\"abc123\"))    # Output: 3\nprint(number_ctr(\"no digits\")) # Output: 0\nprint(number_ctr(\"1a2b3c4\"))   # Output: 4\n\n\n"], "responses": ["```python\ndef number_ctr(s: str) -> int:\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count\n\nprint(number_ctr(\"abc123\"))    # Output: 3\nprint(number_ctr(\"no digits\")) # Output: 0\nprint(number_ctr(\"1a2b3c4\"))   # Output: 4\n```"], "prompt_tokens": [350], "completion_tokens": [336], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_764_number_ctr"}
{"name": "mbpp_767_get_pairs_count", "language": "Python3", "prompt": "from typing import List\n\ndef get_pairs_count(arr: List[int], sum: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_pairs_count", "test": "def check(candidate):\n    assert candidate([1, 1, 1, 1], 2) == 6\n    assert candidate([1, 5, 7, -1, 5], 6) == 3\n    assert candidate([1, -2, 3], 1) == 1\n    assert candidate([-1, -2, 3], -3) == 1\n\ndef test_check():\n    check(get_pairs_count)\n\ntest_check()\n", "sample_io": ["assert get_pairs_count([1, 1, 1, 1], 2) == 6"], "source_codes": ["\nfrom typing import List\n\ndef get_pairs_count(arr: List[int], sum: int) -> int:\n    freq = {}\n    count = 0\n\n    for x in arr:\n        target = sum - x\n        if target in freq:\n            count += freq[target]\n        freq[x] = freq.get(x, 0) + 1\n\n    return count\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef get_pairs_count(arr: List[int], sum: int) -> int:\n    freq = {}\n    count = 0\n\n    for x in arr:\n        target = sum - x\n        if target in freq:\n            count += freq[target]\n        freq[x] = freq.get(x, 0) + 1\n\n    return count\n```"], "prompt_tokens": [717], "completion_tokens": [620], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_767_get_pairs_count"}
{"name": "mbpp_99_decimal_to_binary", "language": "Python3", "prompt": "def decimal_to_binary(n: int) -> str:\n    \"\"\"\n\tWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "decimal_to_binary", "test": "def check(candidate):\n    assert candidate(8) == '1000'\n    assert candidate(18) == '10010'\n    assert candidate(7) == '111'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n", "sample_io": ["assert decimal_to_binary(8) == '1000'"], "source_codes": ["\ndef decimal_to_binary(n: int) -> str:\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent,\n    represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    \n    binary_str = \"\"\n    while n > 0:\n        bit = n % 2\n        binary_str = str(bit) + binary_str\n        n = n // 2\n    \n    return binary_str\n\n\n"], "responses": ["```python\ndef decimal_to_binary(n: int) -> str:\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent,\n    represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    \n    binary_str = \"\"\n    while n > 0:\n        bit = n % 2\n        binary_str = str(bit) + binary_str\n        n = n // 2\n    \n    return binary_str\n```"], "prompt_tokens": [503], "completion_tokens": [465], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_99_decimal_to_binary"}
{"name": "mbpp_119_search", "language": "Python3", "prompt": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "search", "test": "def check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == 3\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == 1\n\ndef test_check():\n    check(search)\n\ntest_check()\n", "sample_io": ["assert search([1, 1, 2, 2, 3]) == 3"], "source_codes": ["\nfrom typing import List\n\ndef search(arr: List[int]) -> int:\n    low, high = 0, len(arr) - 1\n    \n    while low < high:\n        mid = (low + high) // 2\n        \n        if mid % 2 == 1:\n            mid -= 1\n        \n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    \n    return arr[low]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef search(arr: List[int]) -> int:\n    low, high = 0, len(arr) - 1\n    \n    while low < high:\n        mid = (low + high) // 2\n        \n        if mid % 2 == 1:\n            mid -= 1\n        \n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    \n    return arr[low]\n```"], "prompt_tokens": [844], "completion_tokens": [811], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_119_search"}
{"name": "mbpp_92_is_undulating", "language": "Python3", "prompt": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_undulating", "test": "def check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n", "sample_io": ["assert is_undulating(1212121) == True"], "source_codes": ["\ndef is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 2:\n        return False\n    first = s[0]\n    second = s[1]\n    if first == second:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] != first:\n            return False\n        if i % 2 == 1 and s[i] != second:\n            return False\n    return True\n\n\n"], "responses": ["```python\ndef is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 2:\n        return False\n    first = s[0]\n    second = s[1]\n    if first == second:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] != first:\n            return False\n        if i % 2 == 1 and s[i] != second:\n            return False\n    return True\n```"], "prompt_tokens": [516], "completion_tokens": [502], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_92_is_undulating"}
{"name": "mbpp_105_count", "language": "Python3", "prompt": "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    \"\"\"\n\tWrite a python function to count true booleans in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count", "test": "def check(candidate):\n    assert candidate([True, False, True]) == 2\n    assert candidate([False, False]) == 0\n    assert candidate([True, True, True]) == 3\n\ndef test_check():\n    check(count)\n\ntest_check()\n", "sample_io": ["assert count([True, False, True]) == 2"], "source_codes": ["\nfrom typing import List\n\ndef count(lst: List[bool]) -> int:\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    return sum(lst)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count(lst: List[bool]) -> int:\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    return sum(lst)\n```"], "prompt_tokens": [325], "completion_tokens": [238], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_105_count"}
{"name": "mbpp_766_pair_wise", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n\tWrite a function to return a list of all pairs of consecutive items in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pair_wise", "test": "def check(candidate):\n    assert candidate([1, 1, 2, 3, 3, 4, 4, 5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    assert candidate([1, 5, 7, 9, 10]) == [(1, 5), (5, 7), (7, 9), (9, 10)]\n    assert candidate([5, 1, 9, 7, 10]) == [(5, 1), (1, 9), (9, 7), (7, 10)]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n\ndef test_check():\n    check(pair_wise)\n\ntest_check()\n", "sample_io": ["assert pair_wise([1, 1, 2, 3, 3, 4, 4, 5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    return [(l1[i], l1[i+1]) for i in range(len(l1) - 1)]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    return [(l1[i], l1[i+1]) for i in range(len(l1) - 1)]\n```"], "prompt_tokens": [543], "completion_tokens": [463], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_766_pair_wise"}
{"name": "mbpp_464_check_value", "language": "Python3", "prompt": "from typing import Dict\n\ndef check_value(dict: Dict[str, int], n: int) -> bool:\n    \"\"\"\n\tWrite a function to check if all values are same in a dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_464_check_value.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_value", "test": "def check(candidate):\n    assert candidate({ 'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12 }, 10) == False\n    assert candidate({ 'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12 }, 12) == True\n    assert candidate({ 'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12 }, 5) == False\n\ndef test_check():\n    check(check_value)\n\ntest_check()\n", "sample_io": ["assert check_value({ 'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12 }, 10) == False"], "source_codes": ["\nfrom typing import Dict\n\ndef check_value(d: Dict[str, int], n: int) -> bool:\n    return len(set(d.values())) <= 1\n\n\n"], "responses": ["```python\nfrom typing import Dict\n\ndef check_value(d: Dict[str, int], n: int) -> bool:\n    return len(set(d.values())) <= 1\n```"], "prompt_tokens": [440], "completion_tokens": [334], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_464_check_value"}
{"name": "mbpp_443_largest_neg", "language": "Python3", "prompt": "from typing import List\n\ndef largest_neg(list1: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the largest negative number from the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "largest_neg", "test": "def check(candidate):\n    assert candidate([1, 2, 3, -4, -6]) == -6\n    assert candidate([1, 2, 3, -8, -9]) == -9\n    assert candidate([1, 2, 3, 4, -1]) == -1\n\ndef test_check():\n    check(largest_neg)\n\ntest_check()\n", "sample_io": ["assert largest_neg([1, 2, 3, -4, -6]) == -6"], "source_codes": ["\nfrom typing import List, Optional\n\ndef largest_neg(list1: List[int]) -> Optional[int]:\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    Returns None if no negative number is found.\n    \"\"\"\n    largest_negative = None\n    for num in list1:\n        if num < 0:\n            if (largest_negative is None) or (num > largest_negative):\n                largest_negative = num\n    return largest_negative\n\n\n"], "responses": ["```python\nfrom typing import List, Optional\n\ndef largest_neg(list1: List[int]) -> Optional[int]:\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    Returns None if no negative number is found.\n    \"\"\"\n    largest_negative = None\n    for num in list1:\n        if num < 0:\n            if (largest_negative is None) or (num > largest_negative):\n                largest_negative = num\n    return largest_negative\n```"], "prompt_tokens": [523], "completion_tokens": [489], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_443_largest_neg"}
{"name": "mbpp_602_first_repeated_char", "language": "Python3", "prompt": "from typing import Optional\n\ndef first_repeated_char(str1: str) -> Optional[str]:\n    \"\"\"\n\tWrite a python function to find the first repeated character in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "first_repeated_char", "test": "def check(candidate):\n    assert candidate('abcabc') == 'a'\n    assert candidate('abc') == None\n    assert candidate('123123') == '1'\n\ndef test_check():\n    check(first_repeated_char)\n\ntest_check()\n", "sample_io": ["assert first_repeated_char('abcabc') == 'a'"], "source_codes": ["\nfrom typing import Optional\n\ndef first_repeated_char(str1: str) -> Optional[str]:\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n\n\n"], "responses": ["```python\nfrom typing import Optional\n\ndef first_repeated_char(str1: str) -> Optional[str]:\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n```"], "prompt_tokens": [385], "completion_tokens": [320], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_602_first_repeated_char"}
{"name": "mbpp_770_odd_num_sum", "language": "Python3", "prompt": "def odd_num_sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_num_sum", "test": "def check(candidate):\n    assert candidate(2) == 82\n    assert candidate(3) == 707\n    assert candidate(4) == 3108\n\ndef test_check():\n    check(odd_num_sum)\n\ntest_check()\n", "sample_io": ["assert odd_num_sum(2) == 82"], "source_codes": ["\ndef odd_num_sum(n: int) -> int:\n    \"\"\"\n    Find the sum of the fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for k in range(1, n + 1):\n        odd_number = 2 * k - 1\n        total += odd_number ** 4\n    return total\n\n\n"], "responses": ["```python\ndef odd_num_sum(n: int) -> int:\n    \"\"\"\n    Find the sum of the fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for k in range(1, n + 1):\n        odd_number = 2 * k - 1\n        total += odd_number ** 4\n    return total\n```"], "prompt_tokens": [460], "completion_tokens": [409], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_770_odd_num_sum"}
{"name": "mbpp_424_extract_rear", "language": "Python3", "prompt": "from typing import Tuple, List\n\ndef extract_rear(test_tuple: Tuple[str, str, str]) -> List[str]:\n    \"\"\"\n\tWrite a function to extract only the rear index element of each string in the given tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_rear", "test": "def check(candidate):\n    assert candidate(('Mers', 'for', 'Vers')) == ['s', 'r', 's']\n    assert candidate(('Avenge', 'for', 'People')) == ['e', 'r', 'e']\n    assert candidate(('Gotta', 'get', 'go')) == ['a', 't', 'o']\n\ndef test_check():\n    check(extract_rear)\n\ntest_check()\n", "sample_io": ["assert extract_rear(('Mers', 'for', 'Vers')) == ['s', 'r', 's']"], "source_codes": ["\nfrom typing import Tuple, List\n\ndef extract_rear(test_tuple: Tuple[str, str, str]) -> List[str]:\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    result = []\n    for string in test_tuple:\n        if string:  # check if string is not empty\n            rear_char = string[-1]\n            result.append(rear_char)\n        else:\n            # If the string is empty, append an empty string or handle as needed\n            result.append('')\n    return result\n\n\n"], "responses": ["```python\nfrom typing import Tuple, List\n\ndef extract_rear(test_tuple: Tuple[str, str, str]) -> List[str]:\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    result = []\n    for string in test_tuple:\n        if string:  # check if string is not empty\n            rear_char = string[-1]\n            result.append(rear_char)\n        else:\n            # If the string is empty, append an empty string or handle as needed\n            result.append('')\n    return result\n```"], "prompt_tokens": [493], "completion_tokens": [455], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_424_extract_rear"}
{"name": "mbpp_133_sum_negativenum", "language": "Python3", "prompt": "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_negativenum", "test": "def check(candidate):\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32\n    assert candidate([10, 15, -14, 13, -18, 12, -20]) == -52\n    assert candidate([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]) == -894\n\ndef test_check():\n    check(sum_negativenum)\n\ntest_check()\n", "sample_io": ["assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32"], "source_codes": ["\nfrom typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum(num for num in nums if num < 0)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum(num for num in nums if num < 0)\n```"], "prompt_tokens": [404], "completion_tokens": [296], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_133_sum_negativenum"}
{"name": "mbpp_760_unique_Element", "language": "Python3", "prompt": "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "unique_Element", "test": "def check(candidate):\n    assert candidate([1, 1, 1]) == True\n    assert candidate([1, 2, 1, 2]) == False\n    assert candidate([1, 2, 3, 4, 5]) == False\n\ndef test_check():\n    check(unique_Element)\n\ntest_check()\n", "sample_io": ["assert unique_Element([1, 1, 1]) == True"], "source_codes": ["\nfrom typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    \"\"\"\n    Check whether the list contains exactly one distinct element.\n    Returns True if all elements are the same, False otherwise.\n    \"\"\"\n    if not arr:\n        return False\n    distinct_elements = set(arr)\n    return len(distinct_elements) == 1\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    \"\"\"\n    Check whether the list contains exactly one distinct element.\n    Returns True if all elements are the same, False otherwise.\n    \"\"\"\n    if not arr:\n        return False\n    distinct_elements = set(arr)\n    return len(distinct_elements) == 1\n```"], "prompt_tokens": [453], "completion_tokens": [387], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_760_unique_Element"}
{"name": "mbpp_281_all_unique", "language": "Python3", "prompt": "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check if the elements of a given list are unique or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "all_unique", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == True\n    assert candidate([1, 2, 1, 2]) == False\n    assert candidate([1, 2, 3, 4, 5]) == True\n\ndef test_check():\n    check(all_unique)\n\ntest_check()\n", "sample_io": ["assert all_unique([1, 2, 3]) == True"], "source_codes": ["\nfrom typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    return len(test_list) == len(set(test_list))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    return len(test_list) == len(set(test_list))\n```"], "prompt_tokens": [311], "completion_tokens": [226], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_281_all_unique"}
{"name": "mbpp_406_find_Parity", "language": "Python3", "prompt": "def find_Parity(x: int) -> bool:\n    \"\"\"\n\tWrite a python function to find whether the parity of a given number is odd.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Parity", "test": "def check(candidate):\n    assert candidate(12) == False\n    assert candidate(7) == True\n    assert candidate(10) == False\n\ndef test_check():\n    check(find_Parity)\n\ntest_check()\n", "sample_io": ["assert find_Parity(12) == False"], "source_codes": ["\ndef find_Parity(x: int) -> bool:\n    \"\"\"\n    Returns True if the parity (number of set bits) of x is odd, else False.\n    \"\"\"\n    count = bin(x).count('1')\n    return count % 2 == 1\n\n# Test cases\nprint(find_Parity(5))  # False\nprint(find_Parity(7))  # True\n\n\n"], "responses": ["```python\ndef find_Parity(x: int) -> bool:\n    \"\"\"\n    Returns True if the parity (number of set bits) of x is odd, else False.\n    \"\"\"\n    count = bin(x).count('1')\n    return count % 2 == 1\n\n# Test cases\nprint(find_Parity(5))  # False\nprint(find_Parity(7))  # True\n```"], "prompt_tokens": [370], "completion_tokens": [330], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_406_find_Parity"}
{"name": "mbpp_562_Find_Max_Length", "language": "Python3", "prompt": "from typing import List\n\ndef Find_Max_Length(lst: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a python function to find the length of the longest sublists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Max_Length", "test": "def check(candidate):\n    assert candidate([[1], [1, 4], [5, 6, 7, 8]]) == 4\n    assert candidate([[0, 1], [2, 2], [3, 2, 1]]) == 3\n    assert candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5\n\ndef test_check():\n    check(Find_Max_Length)\n\ntest_check()\n", "sample_io": ["assert Find_Max_Length([[1], [1, 4], [5, 6, 7, 8]]) == 4"], "source_codes": ["\nfrom typing import List\n\ndef Find_Max_Length(lst: List[List[int]]) -> int:\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Find_Max_Length(lst: List[List[int]]) -> int:\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n```"], "prompt_tokens": [403], "completion_tokens": [326], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_562_Find_Max_Length"}
{"name": "mbpp_87_merge_dictionaries_three", "language": "Python3", "prompt": "from typing import Dict\n\ndef merge_dictionaries_three(dict1: Dict[str, str], dict2: Dict[str, str], dict3: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"\n\tWrite a function to merge three dictionaries into a single dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_87_merge_dictionaries_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "merge_dictionaries_three", "test": "def check(candidate):\n    assert candidate({ 'R': 'Red', 'B': 'Black', 'P': 'Pink' }, { 'G': 'Green', 'W': 'White' }, { 'O': 'Orange', 'W': 'White', 'B': 'Black' }) == { 'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange' }\n    assert candidate({ 'R': 'Red', 'B': 'Black', 'P': 'Pink' }, { 'G': 'Green', 'W': 'White' }, { 'L': 'lavender', 'B': 'Blue' }) == { 'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender' }\n    assert candidate({ 'R': 'Red', 'B': 'Black', 'P': 'Pink' }, { 'L': 'lavender', 'B': 'Blue' }, { 'G': 'Green', 'W': 'White' }) == { 'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White' }\n\ndef test_check():\n    check(merge_dictionaries_three)\n\ntest_check()\n", "sample_io": ["assert merge_dictionaries_three({ 'R': 'Red', 'B': 'Black', 'P': 'Pink' }, { 'G': 'Green', 'W': 'White' }, { 'O': 'Orange', 'W': 'White', 'B': 'Black' }) == { 'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange' }"], "source_codes": ["\nfrom typing import Dict\n\ndef merge_dictionaries_three(dict1: Dict[str, str], dict2: Dict[str, str], dict3: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    If the same key exists in multiple dictionaries, values from later dictionaries will overwrite earlier ones.\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n\n\n"], "responses": ["```python\nfrom typing import Dict\n\ndef merge_dictionaries_three(dict1: Dict[str, str], dict2: Dict[str, str], dict3: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    If the same key exists in multiple dictionaries, values from later dictionaries will overwrite earlier ones.\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n```"], "prompt_tokens": [428], "completion_tokens": [364], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_87_merge_dictionaries_three"}
{"name": "mbpp_11_remove_Occ", "language": "Python3", "prompt": "def remove_Occ(s: str, ch: str) -> str:\n    \"\"\"\n\tWrite a python function to remove first and last occurrence of a given character from the string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_Occ", "test": "def check(candidate):\n    assert candidate('hello', 'l') == 'heo'\n    assert candidate('abcda', 'a') == 'bcd'\n    assert candidate('PHP', 'P') == 'H'\n\ndef test_check():\n    check(remove_Occ)\n\ntest_check()\n", "sample_io": ["assert remove_Occ('hello', 'l') == 'heo'"], "source_codes": ["\ndef remove_Occ(s: str, ch: str) -> str:\n    first = s.find(ch)\n    last = s.rfind(ch)\n    \n    if first == -1:\n        return s\n    \n    if first == last:\n        return s[:first] + s[first+1:]\n    \n    s = s[:last] + s[last+1:]\n    s = s[:first] + s[first+1:]\n    \n    return s\n\n\n"], "responses": ["```python\ndef remove_Occ(s: str, ch: str) -> str:\n    first = s.find(ch)\n    last = s.rfind(ch)\n    \n    if first == -1:\n        return s\n    \n    if first == last:\n        return s[:first] + s[first+1:]\n    \n    s = s[:last] + s[last+1:]\n    s = s[:first] + s[first+1:]\n    \n    return s\n```"], "prompt_tokens": [606], "completion_tokens": [565], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_11_remove_Occ"}
{"name": "mbpp_751_check_min_heap", "language": "Python3", "prompt": "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_min_heap", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([2, 3, 4, 5, 10, 15]) == True\n    assert candidate([2, 10, 4, 5, 3, 15]) == False\n\ndef test_check():\n    check(check_min_heap)\n\ntest_check()\n", "sample_io": ["assert check_min_heap([1, 2, 3, 4, 5, 6]) == True"], "source_codes": ["\nfrom typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    last_non_leaf = n // 2 - 1\n    \n    for i in range(last_non_leaf + 1):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        if left < n and arr[i] > arr[left]:\n            return False\n        \n        if right < n and arr[i] > arr[right]:\n            return False\n\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    last_non_leaf = n // 2 - 1\n    \n    for i in range(last_non_leaf + 1):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        if left < n and arr[i] > arr[left]:\n            return False\n        \n        if right < n and arr[i] > arr[right]:\n            return False\n\n    return True\n```"], "prompt_tokens": [731], "completion_tokens": [660], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_751_check_min_heap"}
{"name": "mbpp_410_min_val", "language": "Python3", "prompt": "from typing import List, Union\n\ndef min_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the minimum value in a given heterogeneous list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_410_min_val.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_val", "test": "def check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 2\n    assert candidate(['Python', 15, 20, 25]) == 15\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 20\n\ndef test_check():\n    check(min_val)\n\ntest_check()\n", "sample_io": ["assert min_val(['Python', 3, 2, 4, 5, 'version']) == 2"], "source_codes": ["\nfrom typing import List, Union\n\ndef min_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n    Find the minimum integer value in a given heterogeneous list containing strings and integers.\n    Assumes all strings can be converted to integers.\n    \"\"\"\n    int_vals = []\n    for item in listval:\n        # Convert strings to integers\n        if isinstance(item, str):\n            try:\n                val = int(item)\n            except ValueError:\n                raise ValueError(f\"String item '{item}' cannot be converted to integer.\")\n        elif isinstance(item, int):\n            val = item\n        else:\n            raise TypeError(f\"Unsupported type {type(item)} in list.\")\n        int_vals.append(val)\n    \n    return min(int_vals)\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef min_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n    Find the minimum integer value in a given heterogeneous list containing strings and integers.\n    Assumes all strings can be converted to integers.\n    \"\"\"\n    int_vals = []\n    for item in listval:\n        # Convert strings to integers\n        if isinstance(item, str):\n            try:\n                val = int(item)\n            except ValueError:\n                raise ValueError(f\"String item '{item}' cannot be converted to integer.\")\n        elif isinstance(item, int):\n            val = item\n        else:\n            raise TypeError(f\"Unsupported type {type(item)} in list.\")\n        int_vals.append(val)\n    \n    return min(int_vals)\n```"], "prompt_tokens": [488], "completion_tokens": [497], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_410_min_val"}
{"name": "mbpp_578_interleave_lists", "language": "Python3", "prompt": "from typing import List\n\ndef interleave_lists(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "interleave_lists", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    assert candidate([10, 20], [15, 2], [5, 10]) == [10, 15, 5, 20, 2, 10]\n    assert candidate([11, 44], [10, 15], [20, 5]) == [11, 10, 20, 44, 15, 5]\n\ndef test_check():\n    check(interleave_lists)\n\ntest_check()\n", "sample_io": ["assert interleave_lists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"], "source_codes": ["\nfrom typing import List\n\ndef interleave_lists(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef interleave_lists(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n```"], "prompt_tokens": [590], "completion_tokens": [492], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_578_interleave_lists"}
{"name": "mbpp_90_len_log", "language": "Python3", "prompt": "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    \"\"\"\n\tWrite a python function to find the length of the longest word.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "len_log", "test": "def check(candidate):\n    assert candidate(['python', 'PHP', 'bigdata']) == 7\n    assert candidate(['a', 'ab', 'abc']) == 3\n    assert candidate(['small', 'big', 'tall']) == 5\n\ndef test_check():\n    check(len_log)\n\ntest_check()\n", "sample_io": ["assert len_log(['python', 'PHP', 'bigdata']) == 7"], "source_codes": ["\nfrom typing import List\n\ndef len_log(list1: List[str]) -> int:\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    if not list1:\n        return 0\n    return max(len(word) for word in list1)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef len_log(list1: List[str]) -> int:\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    if not list1:\n        return 0\n    return max(len(word) for word in list1)\n```"], "prompt_tokens": [406], "completion_tokens": [337], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_90_len_log"}
{"name": "mbpp_452_loss_amount", "language": "Python3", "prompt": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "loss_amount", "test": "def check(candidate):\n    assert candidate(1500, 1200) == 0\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n", "sample_io": ["assert loss_amount(1500, 1200) == 0"], "source_codes": ["\ndef loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\n"], "responses": ["```python\ndef loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n```"], "prompt_tokens": [380], "completion_tokens": [305], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_452_loss_amount"}
{"name": "mbpp_798__sum", "language": "Python3", "prompt": "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of an array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_798__sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "_sum", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([15, 12, 13, 10]) == 50\n    assert candidate([0, 1, 2]) == 3\n\ndef test_check():\n    check(_sum)\n\ntest_check()\n", "sample_io": ["assert _sum([1, 2, 3]) == 6"], "source_codes": ["\nfrom typing import List\n\ndef _sum(arr: List[int]) -> int:\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef _sum(arr: List[int]) -> int:\n    total = 0\n    for num in arr:\n        total += num\n    return total\n```"], "prompt_tokens": [343], "completion_tokens": [257], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_798__sum"}
{"name": "mbpp_393_max_length_list", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_length_list(input_list: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\"\n\tWrite a function to find the list with maximum length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_length_list", "test": "def check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])\n    assert candidate([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]) == (5, [1, 2, 3, 4, 5])\n    assert candidate([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]) == (4, [6, 7, 8, 9])\n\ndef test_check():\n    check(max_length_list)\n\ntest_check()\n", "sample_io": ["assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_length_list(input_list: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\"\n    Write a function to find the list with maximum length.\n    Args:\n        input_list (List[List[int]]): A list of lists of integers.\n    Returns:\n        Tuple[int, List[int]]: A tuple containing the length of the longest sublist and the sublist itself.\n    \"\"\"\n    # Handle the case where the input list is empty\n    if not input_list:\n        return 0, []\n    \n    # Initialize max_len and max_list with the first sublist\n    max_len = len(input_list[0])\n    max_list = input_list[0]\n\n    # Iterate through each sublist in the input list\n    for sublist in input_list[1:]:\n        # If this sublist is longer, update max_len and max_list\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    \n    return max_len, max_list\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_length_list(input_list: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\"\n    Write a function to find the list with maximum length.\n    Args:\n        input_list (List[List[int]]): A list of lists of integers.\n    Returns:\n        Tuple[int, List[int]]: A tuple containing the length of the longest sublist and the sublist itself.\n    \"\"\"\n    # Handle the case where the input list is empty\n    if not input_list:\n        return 0, []\n    \n    # Initialize max_len and max_list with the first sublist\n    max_len = len(input_list[0])\n    max_list = input_list[0]\n\n    # Iterate through each sublist in the input list\n    for sublist in input_list[1:]:\n        # If this sublist is longer, update max_len and max_list\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    \n    return max_len, max_list\n```"], "prompt_tokens": [444], "completion_tokens": [514], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_393_max_length_list"}
{"name": "mbpp_272_rear_extract", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple[int, str, int]]) -> List[int]:\n    \"\"\"\n\tWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rear_extract", "test": "def check(candidate):\n    assert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n    assert candidate([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\n    assert candidate([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n\ndef test_check():\n    check(rear_extract)\n\ntest_check()\n", "sample_io": ["assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple[int, str, int]]) -> List[int]:\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple[int, str, int]]) -> List[int]:\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements\n```"], "prompt_tokens": [492], "completion_tokens": [408], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_272_rear_extract"}
{"name": "mbpp_564_count_Pairs", "language": "Python3", "prompt": "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Pairs", "test": "def check(candidate):\n    assert candidate([1, 2, 1], 3) == 2\n    assert candidate([1, 1, 1, 1], 4) == 0\n    assert candidate([1, 2, 3, 4, 5], 5) == 10\n\ndef test_check():\n    check(count_Pairs)\n\ntest_check()\n", "sample_io": ["assert count_Pairs([1, 2, 1], 3) == 2"], "source_codes": ["\nfrom typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    total_pairs = n * (n - 1) // 2\n    freq = Counter(arr)\n    equal_pairs = sum(count * (count - 1) // 2 for count in freq.values())\n    return total_pairs - equal_pairs\n\n\n"], "responses": ["```python\nfrom typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    total_pairs = n * (n - 1) // 2\n    freq = Counter(arr)\n    equal_pairs = sum(count * (count - 1) // 2 for count in freq.values())\n    return total_pairs - equal_pairs\n```"], "prompt_tokens": [558], "completion_tokens": [479], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_564_count_Pairs"}
{"name": "mbpp_438_count_bidirectional", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to count bidirectional tuple pairs.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_bidirectional", "test": "def check(candidate):\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3\n    assert candidate([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]) == 2\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]) == 4\n\ndef test_check():\n    check(count_bidirectional)\n\ntest_check()\n", "sample_io": ["assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> int:\n    count_map = {}\n    for tup in test_list:\n        count_map[tup] = count_map.get(tup, 0) + 1\n    \n    visited = set()\n    bidirectional_count = 0\n    \n    for (a, b), count_ab in count_map.items():\n        if (a, b) in visited:\n            continue\n        if (b, a) in count_map and (b, a) not in visited:\n            if (a, b) != (b, a):\n                bidirectional_count += min(count_ab, count_map[(b, a)])\n                visited.add((a, b))\n                visited.add((b, a))\n            else:\n                n = count_ab\n                bidirectional_count += n * (n - 1) // 2\n                visited.add((a, b))\n        else:\n            visited.add((a, b))\n            \n    return bidirectional_count\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> int:\n    count_map = {}\n    for tup in test_list:\n        count_map[tup] = count_map.get(tup, 0) + 1\n    \n    visited = set()\n    bidirectional_count = 0\n    \n    for (a, b), count_ab in count_map.items():\n        if (a, b) in visited:\n            continue\n        if (b, a) in count_map and (b, a) not in visited:\n            if (a, b) != (b, a):\n                bidirectional_count += min(count_ab, count_map[(b, a)])\n                visited.add((a, b))\n                visited.add((b, a))\n            else:\n                n = count_ab\n                bidirectional_count += n * (n - 1) // 2\n                visited.add((a, b))\n        else:\n            visited.add((a, b))\n            \n    return bidirectional_count\n```"], "prompt_tokens": [955], "completion_tokens": [1033], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_438_count_bidirectional"}
{"name": "mbpp_640_remove_parenthesis", "language": "Python3", "prompt": "from typing import List\n\ndef remove_parenthesis(items: List[str]) -> str:\n    \"\"\"\n\tWrite a function to remove the parenthesis and what is inbetween them from a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_parenthesis", "test": "def check(candidate):\n    assert candidate(['python (chrome)']) == 'python'\n    assert candidate(['string(.abc)']) == 'string'\n    assert candidate(['alpha(num)']) == 'alpha'\n\ndef test_check():\n    check(remove_parenthesis)\n\ntest_check()\n", "sample_io": ["assert remove_parenthesis(['python (chrome)']) == 'python'"], "source_codes": ["\nfrom typing import List\n\ndef remove_parenthesis(items: List[str]) -> str:\n    s = ''.join(items)\n    result = []\n    skip = 0\n\n    for char in s:\n        if char == '(':\n            skip += 1\n        elif char == ')':\n            if skip > 0:\n                skip -= 1\n        elif skip == 0:\n            result.append(char)\n    return ''.join(result)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef remove_parenthesis(items: List[str]) -> str:\n    s = ''.join(items)\n    result = []\n    skip = 0\n\n    for char in s:\n        if char == '(':\n            skip += 1\n        elif char == ')':\n            if skip > 0:\n                skip -= 1\n        elif skip == 0:\n            result.append(char)\n    return ''.join(result)\n```"], "prompt_tokens": [482], "completion_tokens": [435], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_640_remove_parenthesis"}
{"name": "mbpp_72_dif_Square", "language": "Python3", "prompt": "def dif_Square(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "dif_Square", "test": "def check(candidate):\n    assert candidate(5) == True\n    assert candidate(10) == False\n    assert candidate(15) == True\n\ndef test_check():\n    check(dif_Square)\n\ntest_check()\n", "sample_io": ["assert dif_Square(5) == True"], "source_codes": ["\ndef dif_Square(n: int) -> bool:\n    \"\"\"\n    Check whether the given number n can be represented as the difference of two squares.\n    \"\"\"\n    return n % 4 != 2\n\n\n"], "responses": ["```python\ndef dif_Square(n: int) -> bool:\n    \"\"\"\n    Check whether the given number n can be represented as the difference of two squares.\n    \"\"\"\n    return n % 4 != 2\n```"], "prompt_tokens": [932], "completion_tokens": [841], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_72_dif_Square"}
{"name": "mbpp_448_cal_sum", "language": "Python3", "prompt": "def cal_sum(n: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the sum of perrin numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cal_sum", "test": "def check(candidate):\n    assert candidate(9) == 49\n    assert candidate(10) == 66\n    assert candidate(11) == 88\n\ndef test_check():\n    check(cal_sum)\n\ntest_check()\n", "sample_io": ["assert cal_sum(9) == 49"], "source_codes": ["\ndef cal_sum(n: int) -> int:\n    \"\"\"\n    Calculate the sum of Perrin numbers from P(0) to P(n).\n    \"\"\"\n    if n < 0:\n        return 0  # If n is negative, sum is 0\n\n    perrin = [3, 0, 2]\n\n    if n < 3:\n        return sum(perrin[:n+1])\n\n    for i in range(3, n+1):\n        perrin.append(perrin[i-2] + perrin[i-3])\n\n    return sum(perrin)\n\n\n"], "responses": ["```python\ndef cal_sum(n: int) -> int:\n    \"\"\"\n    Calculate the sum of Perrin numbers from P(0) to P(n).\n    \"\"\"\n    if n < 0:\n        return 0  # If n is negative, sum is 0\n\n    perrin = [3, 0, 2]\n\n    if n < 3:\n        return sum(perrin[:n+1])\n\n    for i in range(3, n+1):\n        perrin.append(perrin[i-2] + perrin[i-3])\n\n    return sum(perrin)\n```"], "prompt_tokens": [517], "completion_tokens": [529], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_448_cal_sum"}
{"name": "mbpp_96_divisor", "language": "Python3", "prompt": "def divisor(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the number of divisors of a given integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "divisor", "test": "def check(candidate):\n    assert candidate(15) == 4\n    assert candidate(12) == 6\n    assert candidate(9) == 3\n\ndef test_check():\n    check(divisor)\n\ntest_check()\n", "sample_io": ["assert divisor(15) == 4"], "source_codes": ["\ndef divisor(n: int) -> int:\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n        i += 1\n    return count\n\n\n"], "responses": ["```python\ndef divisor(n: int) -> int:\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n        i += 1\n    return count\n```"], "prompt_tokens": [464], "completion_tokens": [439], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_96_divisor"}
{"name": "mbpp_296_get_Inv_Count", "language": "Python3", "prompt": "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_Inv_Count", "test": "def check(candidate):\n    assert candidate([1, 20, 6, 4, 5]) == 5\n    assert candidate([1, 2, 1]) == 1\n    assert candidate([1, 2, 5, 6, 1]) == 3\n\ndef test_check():\n    check(get_Inv_Count)\n\ntest_check()\n", "sample_io": ["assert get_Inv_Count([1, 20, 6, 4, 5]) == 5"], "source_codes": ["\nfrom typing import List\n\ndef merge(arr: List[int], temp: List[int], left: int, mid: int, right: int) -> int:\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        else:\n            temp[k] = arr[j]\n            inv_count += (mid - i + 1)\n            j += 1\n            k += 1\n\n    while i <= mid:\n        temp[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= right:\n        temp[k] = arr[j]\n        j += 1\n        k += 1\n\n    for idx in range(left, right + 1):\n        arr[idx] = temp[idx]\n\n    return inv_count\n\ndef merge_sort(arr: List[int], temp: List[int], left: int, right: int) -> int:\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += merge_sort(arr, temp, left, mid)\n        inv_count += merge_sort(arr, temp, mid + 1, right)\n        inv_count += merge(arr, temp, left, mid, right)\n    return inv_count\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    temp = [0] * len(arr)\n    return merge_sort(arr, temp, 0, len(arr) - 1)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef merge(arr: List[int], temp: List[int], left: int, mid: int, right: int) -> int:\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        else:\n            temp[k] = arr[j]\n            inv_count += (mid - i + 1)\n            j += 1\n            k += 1\n\n    while i <= mid:\n        temp[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= right:\n        temp[k] = arr[j]\n        j += 1\n        k += 1\n\n    for idx in range(left, right + 1):\n        arr[idx] = temp[idx]\n\n    return inv_count\n\ndef merge_sort(arr: List[int], temp: List[int], left: int, right: int) -> int:\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += merge_sort(arr, temp, left, mid)\n        inv_count += merge_sort(arr, temp, mid + 1, right)\n        inv_count += merge(arr, temp, left, mid, right)\n    return inv_count\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    temp = [0] * len(arr)\n    return merge_sort(arr, temp, 0, len(arr) - 1)\n```"], "prompt_tokens": [808], "completion_tokens": [1030], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_296_get_Inv_Count"}
{"name": "mbpp_57_find_Max_Num", "language": "Python3", "prompt": "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the largest number that can be formed with the given list of digits.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Max_Num", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 321\n    assert candidate([4, 5, 6, 1]) == 6541\n    assert candidate([1, 2, 3, 9]) == 9321\n\ndef test_check():\n    check(find_Max_Num)\n\ntest_check()\n", "sample_io": ["assert find_Max_Num([1, 2, 3]) == 321"], "source_codes": ["\nfrom typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr_sorted = sorted(arr, reverse=True)\n    max_num_str = ''.join(str(digit) for digit in arr_sorted)\n    return int(max_num_str)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr_sorted = sorted(arr, reverse=True)\n    max_num_str = ''.join(str(digit) for digit in arr_sorted)\n    return int(max_num_str)\n```"], "prompt_tokens": [483], "completion_tokens": [418], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_57_find_Max_Num"}
{"name": "mbpp_614_cummulative_sum", "language": "Python3", "prompt": "from typing import List\n\ndef cummulative_sum(test_list: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a function to find the cumulative sum of all the values that are present in the given list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_614_cummulative_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cummulative_sum", "test": "def check(candidate):\n    assert candidate([[1, 3], [5, 6, 7], [2, 6]]) == 30\n    assert candidate([[2, 4], [6, 7, 8], [3, 7]]) == 37\n    assert candidate([[3, 5], [7, 8, 9], [4, 8]]) == 44\n\ndef test_check():\n    check(cummulative_sum)\n\ntest_check()\n", "sample_io": ["assert cummulative_sum([[1, 3], [5, 6, 7], [2, 6]]) == 30"], "source_codes": ["\nfrom typing import List\n\ndef cummulative_sum(test_list: List[List[int]]) -> int:\n    total_sum = 0\n    for sublist in test_list:\n        for num in sublist:\n            total_sum += num\n    return total_sum\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef cummulative_sum(test_list: List[List[int]]) -> int:\n    total_sum = 0\n    for sublist in test_list:\n        for num in sublist:\n            total_sum += num\n    return total_sum\n```"], "prompt_tokens": [486], "completion_tokens": [386], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_614_cummulative_sum"}
{"name": "mbpp_623_nth_nums", "language": "Python3", "prompt": "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a function to compute the n-th power of each number in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "nth_nums", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10, 20, 30], 3) == [1000, 8000, 27000]\n    assert candidate([12, 15], 5) == [248832, 759375]\n\ndef test_check():\n    check(nth_nums)\n\ntest_check()\n", "sample_io": ["assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"], "source_codes": ["\nfrom typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    return [num ** n for num in nums]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    return [num ** n for num in nums]\n```"], "prompt_tokens": [383], "completion_tokens": [295], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_623_nth_nums"}
{"name": "mbpp_799_left_rotate", "language": "Python3", "prompt": "def left_rotate(n: int, d: int) -> int:\n    \"\"\"\n\tWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "left_rotate", "test": "def check(candidate):\n    assert candidate(16, 2) == 64\n    assert candidate(10, 2) == 40\n    assert candidate(99, 3) == 792\n    assert candidate(99, 3) == 792\n    assert candidate(1, 3) == 8\n    assert candidate(5, 3) == 40\n    assert candidate(29, 3) == 232\n\ndef test_check():\n    check(left_rotate)\n\ntest_check()\n", "sample_io": ["assert left_rotate(16, 2) == 64"], "source_codes": ["\ndef left_rotate(n: int, d: int) -> int:\n    \"\"\"\n    Rotate the bits of a 32-bit integer n to the left by d bits.\n    \"\"\"\n    n = n & 0xFFFFFFFF\n    rotated = ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n    return rotated\n\n\n"], "responses": ["```python\ndef left_rotate(n: int, d: int) -> int:\n    \"\"\"\n    Rotate the bits of a 32-bit integer n to the left by d bits.\n    \"\"\"\n    n = n & 0xFFFFFFFF\n    rotated = ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n    return rotated\n```"], "prompt_tokens": [639], "completion_tokens": [565], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_799_left_rotate"}
{"name": "mbpp_247_lps", "language": "Python3", "prompt": "def lps(str: str) -> int:\n    \"\"\"\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lps", "test": "def check(candidate):\n    assert candidate('TENS FOR TENS') == 5\n    assert candidate('CARDIO FOR CARDS') == 7\n    assert candidate('PART OF THE JOURNEY IS PART') == 9\n\ndef test_check():\n    check(lps)\n\ntest_check()\n", "sample_io": ["assert lps('TENS FOR TENS') == 5"], "source_codes": ["\ndef lps(str: str) -> int:\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n        \n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            \n            if str[i] == str[j]:\n                if length == 2:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n                \n    return dp[0][n - 1]\n\n\n"], "responses": ["```python\ndef lps(str: str) -> int:\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n        \n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            \n            if str[i] == str[j]:\n                if length == 2:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n                \n    return dp[0][n - 1]\n```"], "prompt_tokens": [843], "completion_tokens": [887], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_247_lps"}
{"name": "mbpp_735_toggle_middle_bits", "language": "Python3", "prompt": "def toggle_middle_bits(n: int) -> int:\n    \"\"\"\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "toggle_middle_bits", "test": "def check(candidate):\n    assert candidate(9) == 15\n    assert candidate(10) == 12\n    assert candidate(11) == 13\n    assert candidate(65) == 127\n    assert candidate(77) == 115\n\ndef test_check():\n    check(toggle_middle_bits)\n\ntest_check()\n", "sample_io": ["assert toggle_middle_bits(9) == 15"], "source_codes": ["\ndef toggle_middle_bits(n: int) -> int:\n    \"\"\"\n    Toggle bits of the number n except the first (most significant) and last (least significant) bit.\n    \"\"\"\n    num_bits = n.bit_length()\n    \n    # If number has less than 3 bits, there's no middle bit to toggle\n    if num_bits <= 2:\n        return n\n    \n    # Create mask with 1's from bit 1 to bit num_bits-2\n    mask = ((1 << (num_bits - 2)) - 1) << 1\n    \n    # Toggle middle bits\n    result = n ^ mask\n    \n    return result\n\n\n"], "responses": ["```python\ndef toggle_middle_bits(n: int) -> int:\n    \"\"\"\n    Toggle bits of the number n except the first (most significant) and last (least significant) bit.\n    \"\"\"\n    num_bits = n.bit_length()\n    \n    # If number has less than 3 bits, there's no middle bit to toggle\n    if num_bits <= 2:\n        return n\n    \n    # Create mask with 1's from bit 1 to bit num_bits-2\n    mask = ((1 << (num_bits - 2)) - 1) << 1\n    \n    # Toggle middle bits\n    result = n ^ mask\n    \n    return result\n```"], "prompt_tokens": [898], "completion_tokens": [867], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_735_toggle_middle_bits"}
{"name": "mbpp_132_tup_string", "language": "Python3", "prompt": "from typing import List\n\ndef tup_string(tup1: List[str]) -> str:\n    \"\"\"\n\tWrite a function to convert a list to a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_132_tup_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tup_string", "test": "def check(candidate):\n    assert candidate(['e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's']) == 'exercises'\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n']) == 'python'\n    assert candidate(['p', 'r', 'o', 'g', 'r', 'a', 'm']) == 'program'\n\ndef test_check():\n    check(tup_string)\n\ntest_check()\n", "sample_io": ["assert tup_string(['e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's']) == 'exercises'"], "source_codes": ["\nfrom typing import List\n\ndef tup_string(tup1: List[str]) -> str:\n    \"\"\"\n    Write a function to convert a list to a string.\n    \"\"\"\n    return \"\".join(tup1)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef tup_string(tup1: List[str]) -> str:\n    \"\"\"\n    Write a function to convert a list to a string.\n    \"\"\"\n    return \"\".join(tup1)\n```"], "prompt_tokens": [275], "completion_tokens": [192], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_132_tup_string"}
{"name": "mbpp_460_Extract", "language": "Python3", "prompt": "from typing import List\n\ndef Extract(lst: List[List[int]]) -> List[int]:\n    \"\"\"\n\tWrite a python function to get the first element of each sublist.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Extract", "test": "def check(candidate):\n    assert candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert candidate([[1, 2, 3], [4, 5]]) == [1, 4]\n    assert candidate([[9, 8, 1], [1, 2]]) == [9, 1]\n\ndef test_check():\n    check(Extract)\n\ntest_check()\n", "sample_io": ["assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]"], "source_codes": ["\nfrom typing import List\n\ndef Extract(lst: List[List[int]]) -> List[int]:\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Extract(lst: List[List[int]]) -> List[int]:\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result\n```"], "prompt_tokens": [334], "completion_tokens": [268], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_460_Extract"}
{"name": "mbpp_606_radian_degree", "language": "Python3", "prompt": "def radian_degree(degree: int) -> float:\n    \"\"\"\n\tWrite a function to convert degrees to radians.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "radian_degree", "test": "def check(candidate):\n    assert candidate(90) == 1.5707963267948966\n    assert candidate(60) == 1.0471975511965976\n    assert candidate(120) == 2.0943951023931953\n\ndef test_check():\n    check(radian_degree)\n\ntest_check()\n", "sample_io": ["assert radian_degree(90) == 1.5707963267948966"], "source_codes": ["\nimport math\n\ndef radian_degree(degree: int) -> float:\n    \"\"\"\n    Convert degrees to radians.\n    \n    Parameters:\n    degree (int): Angle in degrees.\n    \n    Returns:\n    float: Angle in radians.\n    \"\"\"\n    return degree * (math.pi / 180)\n\n\nprint(radian_degree(180))  # Output should be approximately 3.14159 (pi)\nprint(radian_degree(90))   # Output should be approximately 1.5708 (pi/2)\nprint(radian_degree(0))    # Output should be 0\n\n\n"], "responses": ["```python\nimport math\n\ndef radian_degree(degree: int) -> float:\n    \"\"\"\n    Convert degrees to radians.\n    \n    Parameters:\n    degree (int): Angle in degrees.\n    \n    Returns:\n    float: Angle in radians.\n    \"\"\"\n    return degree * (math.pi / 180)\n\n\nprint(radian_degree(180))  # Output should be approximately 3.14159 (pi)\nprint(radian_degree(90))   # Output should be approximately 1.5708 (pi/2)\nprint(radian_degree(0))    # Output should be 0\n```"], "prompt_tokens": [335], "completion_tokens": [344], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_606_radian_degree"}
{"name": "mbpp_167_next_power_of_2", "language": "Python3", "prompt": "def next_power_of_2(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the smallest power of 2 greater than or equal to n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "next_power_of_2", "test": "def check(candidate):\n    assert candidate(0) == 1\n    assert candidate(5) == 8\n    assert candidate(17) == 32\n\ndef test_check():\n    check(next_power_of_2)\n\ntest_check()\n", "sample_io": ["assert next_power_of_2(0) == 1"], "source_codes": ["\ndef next_power_of_2(n: int) -> int:\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 0:\n        return 1\n    if (n & (n - 1)) == 0:\n        return n\n    return 1 << n.bit_length()\n\n\n"], "responses": ["```python\ndef next_power_of_2(n: int) -> int:\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 0:\n        return 1\n    if (n & (n - 1)) == 0:\n        return n\n    return 1 << n.bit_length()\n```"], "prompt_tokens": [688], "completion_tokens": [629], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_167_next_power_of_2"}
{"name": "mbpp_756_text_match_zero_one", "language": "Python3", "prompt": "def text_match_zero_one(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_zero_one", "test": "def check(candidate):\n    assert candidate('ac') == False\n    assert candidate('dc') == False\n    assert candidate('abbbba') == True\n    assert candidate('dsabbbba') == True\n    assert candidate('asbbbba') == False\n    assert candidate('abaaa') == True\n\ndef test_check():\n    check(text_match_zero_one)\n\ntest_check()\n", "sample_io": ["assert text_match_zero_one('ac') == False"], "source_codes": ["\nimport re\n\ndef text_match_zero_one(text: str) -> bool:\n    \"\"\"\n    Returns True if the string matches 'a' followed by one or more 'b's exactly.\n    \"\"\"\n    pattern = r'^ab+$'\n    return bool(re.match(pattern, text))\n\n\n# Example usage\nif __name__ == \"__main__\":\n    print(text_match_zero_one(\"ab\"))      # True\n    print(text_match_zero_one(\"a\"))       # False\n    print(text_match_zero_one(\"abb\"))     # True\n    print(text_match_zero_one(\"aab\"))     # False\n    print(text_match_zero_one(\"abbbbc\"))  # False\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_zero_one(text: str) -> bool:\n    \"\"\"\n    Returns True if the string matches 'a' followed by one or more 'b's exactly.\n    \"\"\"\n    pattern = r'^ab+$'\n    return bool(re.match(pattern, text))\n\n\n# Example usage\nif __name__ == \"__main__\":\n    print(text_match_zero_one(\"ab\"))      # True\n    print(text_match_zero_one(\"a\"))       # False\n    print(text_match_zero_one(\"abb\"))     # True\n    print(text_match_zero_one(\"aab\"))     # False\n    print(text_match_zero_one(\"abbbbc\"))  # False\n```"], "prompt_tokens": [487], "completion_tokens": [449], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_756_text_match_zero_one"}
{"name": "mbpp_633_pair_xor_Sum", "language": "Python3", "prompt": "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pair_xor_Sum", "test": "def check(candidate):\n    assert candidate([5, 9, 7, 6], 4) == 47\n    assert candidate([7, 3, 5], 3) == 12\n    assert candidate([7, 3], 2) == 4\n\ndef test_check():\n    check(pair_xor_Sum)\n\ntest_check()\n", "sample_io": ["assert pair_xor_Sum([5, 9, 7, 6], 4) == 47"], "source_codes": ["\nfrom typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_sum = 0\n    max_bits = 32\n    \n    for bit in range(max_bits):\n        count_ones = 0\n        for num in arr:\n            if num & (1 << bit):\n                count_ones += 1\n        count_zeros = n - count_ones\n        total_sum += count_ones * count_zeros * (1 << bit)\n    \n    return total_sum\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_sum = 0\n    max_bits = 32\n    \n    for bit in range(max_bits):\n        count_ones = 0\n        for num in arr:\n            if num & (1 << bit):\n                count_ones += 1\n        count_zeros = n - count_ones\n        total_sum += count_ones * count_zeros * (1 << bit)\n    \n    return total_sum\n```"], "prompt_tokens": [721], "completion_tokens": [677], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_633_pair_xor_Sum"}
{"name": "mbpp_458_rectangle_area", "language": "Python3", "prompt": "def rectangle_area(l: int, b: int) -> int:\n    \"\"\"\n\tWrite a function to find the area of a rectangle.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rectangle_area", "test": "def check(candidate):\n    assert candidate(10, 20) == 200\n    assert candidate(10, 5) == 50\n    assert candidate(4, 2) == 8\n\ndef test_check():\n    check(rectangle_area)\n\ntest_check()\n", "sample_io": ["assert rectangle_area(10, 20) == 200"], "source_codes": ["\ndef rectangle_area(l: int, b: int) -> int:\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area\n\n\n"], "responses": ["```python\ndef rectangle_area(l: int, b: int) -> int:\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area\n```"], "prompt_tokens": [217], "completion_tokens": [141], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_458_rectangle_area"}
{"name": "mbpp_738_geometric_sum", "language": "Python3", "prompt": "def geometric_sum(n: int) -> float:\n    \"\"\"\n\tWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "geometric_sum", "test": "def check(candidate):\n    assert candidate(7) == 1.9921875\n    assert candidate(4) == 1.9375\n    assert candidate(8) == 1.99609375\n\ndef test_check():\n    check(geometric_sum)\n\ntest_check()\n", "sample_io": ["assert geometric_sum(7) == 1.9921875"], "source_codes": ["\ndef geometric_sum(n: int) -> float:\n    \"\"\"\n    Calculate the geometric sum of n terms: 1 + 1/2 + 1/4 + ... + 1/(2^(n-1))\n\n    :param n: number of terms\n    :return: the sum of the series\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 1/(2**(n-1)) + geometric_sum(n-1)\n\n# Test cases\nprint(geometric_sum(0))  # Output: 0\nprint(geometric_sum(1))  # Output: 1.0\nprint(geometric_sum(2))  # Output: 1.5\nprint(geometric_sum(3))  # Output: 1.75\nprint(geometric_sum(4))  # Output: 1.875\n\n\n"], "responses": ["```python\ndef geometric_sum(n: int) -> float:\n    \"\"\"\n    Calculate the geometric sum of n terms: 1 + 1/2 + 1/4 + ... + 1/(2^(n-1))\n\n    :param n: number of terms\n    :return: the sum of the series\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 1/(2**(n-1)) + geometric_sum(n-1)\n\n# Test cases\nprint(geometric_sum(0))  # Output: 0\nprint(geometric_sum(1))  # Output: 1.0\nprint(geometric_sum(2))  # Output: 1.5\nprint(geometric_sum(3))  # Output: 1.75\nprint(geometric_sum(4))  # Output: 1.875\n```"], "prompt_tokens": [677], "completion_tokens": [700], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_738_geometric_sum"}
{"name": "mbpp_426_filter_oddnumbers", "language": "Python3", "prompt": "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to filter odd numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "filter_oddnumbers", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n    assert candidate([10, 20, 45, 67, 84, 93]) == [45, 67, 93]\n    assert candidate([5, 7, 9, 8, 6, 4, 3]) == [5, 7, 9, 3]\n\ndef test_check():\n    check(filter_oddnumbers)\n\ntest_check()\n", "sample_io": ["assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]"], "source_codes": ["\nfrom typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]\n```"], "prompt_tokens": [400], "completion_tokens": [328], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_426_filter_oddnumbers"}
{"name": "mbpp_437_remove_odd", "language": "Python3", "prompt": "def remove_odd(str1: str) -> str:\n    \"\"\"\n\tWrite a function to remove odd characters in a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_odd", "test": "def check(candidate):\n    assert candidate('python') == 'yhn'\n    assert candidate('program') == 'rga'\n    assert candidate('language') == 'agae'\n\ndef test_check():\n    check(remove_odd)\n\ntest_check()\n", "sample_io": ["assert remove_odd('python') == 'yhn'"], "source_codes": ["\ndef remove_odd(str1: str) -> str:\n    \"\"\"\n    Remove characters that have odd indices in a string.\n    \"\"\"\n    result = \"\".join([char for idx, char in enumerate(str1) if idx % 2 == 0])\n    return result\n\n\n"], "responses": ["```python\ndef remove_odd(str1: str) -> str:\n    \"\"\"\n    Remove characters that have odd indices in a string.\n    \"\"\"\n    result = \"\".join([char for idx, char in enumerate(str1) if idx % 2 == 0])\n    return result\n```"], "prompt_tokens": [351], "completion_tokens": [295], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_437_remove_odd"}
{"name": "mbpp_227_min_of_three", "language": "Python3", "prompt": "def min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n\tWrite a function to find minimum of three numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_of_three", "test": "def check(candidate):\n    assert candidate(10, 20, 0) == 0\n    assert candidate(19, 15, 18) == 15\n    assert candidate(-10, -20, -30) == -30\n\ndef test_check():\n    check(min_of_three)\n\ntest_check()\n", "sample_io": ["assert min_of_three(10, 20, 0) == 0"], "source_codes": ["\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    # Step 1: Find minimum between a and b\n    min_ab = a if a < b else b\n    # Step 2: Find minimum between min_ab and c\n    min_abc = min_ab if min_ab < c else c\n    return min_abc\n\n\n"], "responses": ["```python\ndef min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    # Step 1: Find minimum between a and b\n    min_ab = a if a < b else b\n    # Step 2: Find minimum between min_ab and c\n    min_abc = min_ab if min_ab < c else c\n    return min_abc\n```"], "prompt_tokens": [386], "completion_tokens": [355], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_227_min_of_three"}
{"name": "mbpp_172_count_occurance", "language": "Python3", "prompt": "def count_occurance(s: str) -> int:\n    \"\"\"\n\tWrite a function to count the number of occurence of the string 'std' in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_occurance", "test": "def check(candidate):\n    assert candidate('letstdlenstdporstd') == 3\n    assert candidate('truststdsolensporsd') == 1\n    assert candidate('makestdsostdworthit') == 2\n    assert candidate('stds') == 1\n    assert candidate('') == 0\n\ndef test_check():\n    check(count_occurance)\n\ntest_check()\n", "sample_io": ["assert count_occurance('letstdlenstdporstd') == 3"], "source_codes": ["\ndef count_occurance(s: str) -> int:\n    \"\"\"\n    Write a function to count the number of occurrence of the string 'std' in a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == \"std\":\n            count += 1\n    return count\n\n\n"], "responses": ["```python\ndef count_occurance(s: str) -> int:\n    \"\"\"\n    Write a function to count the number of occurrence of the string 'std' in a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == \"std\":\n            count += 1\n    return count\n```"], "prompt_tokens": [336], "completion_tokens": [280], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_172_count_occurance"}
{"name": "mbpp_434_text_match_one", "language": "Python3", "prompt": "def text_match_one(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an a followed by one or more b's.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_one", "test": "def check(candidate):\n    assert candidate('ac') == False\n    assert candidate('dc') == False\n    assert candidate('abba') == True\n\ndef test_check():\n    check(text_match_one)\n\ntest_check()\n", "sample_io": ["assert text_match_one('ac') == False"], "source_codes": ["\nimport re\n\ndef text_match_one(text: str) -> bool:\n    pattern = r'^ab+$'\n    return bool(re.match(pattern, text))\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_one(text: str) -> bool:\n    pattern = r'^ab+$'\n    return bool(re.match(pattern, text))\n```"], "prompt_tokens": [526], "completion_tokens": [430], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_434_text_match_one"}
{"name": "mbpp_291_count_no_of_ways", "language": "Python3", "prompt": "def count_no_of_ways(n: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_no_of_ways", "test": "def check(candidate):\n    assert candidate(2, 4) == 16\n    assert candidate(3, 2) == 6\n    assert candidate(4, 4) == 228\n\ndef test_check():\n    check(count_no_of_ways)\n\ntest_check()\n", "sample_io": ["assert count_no_of_ways(2, 4) == 16"], "source_codes": ["\ndef count_no_of_ways(n: int, k: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    same = [0] * (n + 1)\n    diff = [0] * (n + 1)\n    \n    same[1] = 0\n    diff[1] = k\n    \n    same[2] = diff[1]\n    diff[2] = (same[1] + diff[1]) * (k - 1)\n    \n    for i in range(3, n + 1):\n        same[i] = diff[i - 1]\n        diff[i] = (same[i - 1] + diff[i - 1]) * (k - 1)\n    \n    return same[n] + diff[n]\n\n\n"], "responses": ["```python\ndef count_no_of_ways(n: int, k: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    same = [0] * (n + 1)\n    diff = [0] * (n + 1)\n    \n    same[1] = 0\n    diff[1] = k\n    \n    same[2] = diff[1]\n    diff[2] = (same[1] + diff[1]) * (k - 1)\n    \n    for i in range(3, n + 1):\n        same[i] = diff[i - 1]\n        diff[i] = (same[i - 1] + diff[i - 1]) * (k - 1)\n    \n    return same[n] + diff[n]\n```"], "prompt_tokens": [1415], "completion_tokens": [1418], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_291_count_no_of_ways"}
{"name": "mbpp_471_find_remainder", "language": "Python3", "prompt": "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the product of the array multiplication modulo n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_remainder", "test": "def check(candidate):\n    assert candidate([100, 10, 5, 25, 35, 14], 11) == 9\n    assert candidate([1, 1, 1], 1) == 0\n    assert candidate([1, 2, 1], 2) == 0\n\ndef test_check():\n    check(find_remainder)\n\ntest_check()\n", "sample_io": ["assert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9"], "source_codes": ["\nfrom typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n```"], "prompt_tokens": [346], "completion_tokens": [275], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_471_find_remainder"}
{"name": "mbpp_808_check_K", "language": "Python3", "prompt": "from typing import List\n\ndef check_K(test_tup: List[int], K: int) -> bool:\n    \"\"\"\n\tWrite a function to check if the given tuples contain the k or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_K", "test": "def check(candidate):\n    assert candidate([10, 4, 5, 6, 8], 6) == True\n    assert candidate([1, 2, 3, 4, 5, 6], 7) == False\n    assert candidate([7, 8, 9, 44, 11, 12], 11) == True\n\ndef test_check():\n    check(check_K)\n\ntest_check()\n", "sample_io": ["assert check_K([10, 4, 5, 6, 8], 6) == True"], "source_codes": ["\nfrom typing import List\n\ndef check_K(test_tup: List[int], K: int) -> bool:\n    \"\"\"\n    Write a function to check if the given list contains the element K or not.\n    \n    Parameters:\n    test_tup (List[int]): The list of integers to check.\n    K (int): The integer to find in the list.\n    \n    Returns:\n    bool: True if K is in test_tup, False otherwise.\n    \"\"\"\n    return K in test_tup\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_K(test_tup: List[int], K: int) -> bool:\n    \"\"\"\n    Write a function to check if the given list contains the element K or not.\n    \n    Parameters:\n    test_tup (List[int]): The list of integers to check.\n    K (int): The integer to find in the list.\n    \n    Returns:\n    bool: True if K is in test_tup, False otherwise.\n    \"\"\"\n    return K in test_tup\n```"], "prompt_tokens": [448], "completion_tokens": [409], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_808_check_K"}
{"name": "mbpp_68_is_Monotonic", "language": "Python3", "prompt": "from typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Monotonic", "test": "def check(candidate):\n    assert candidate([6, 5, 4, 4]) == True\n    assert candidate([1, 2, 2, 3]) == True\n    assert candidate([1, 3, 2]) == False\n\ndef test_check():\n    check(is_Monotonic)\n\ntest_check()\n", "sample_io": ["assert is_Monotonic([6, 5, 4, 4]) == True"], "source_codes": ["\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    if not A:\n        return True  # An empty list is trivially monotonic\n\n    increasing = True\n    decreasing = True\n\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            increasing = False\n        if A[i] < A[i + 1]:\n            decreasing = False\n\n        # Early stop if both are false\n        if not increasing and not decreasing:\n            return False\n\n    return increasing or decreasing\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    if not A:\n        return True  # An empty list is trivially monotonic\n\n    increasing = True\n    decreasing = True\n\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            increasing = False\n        if A[i] < A[i + 1]:\n            decreasing = False\n\n        # Early stop if both are false\n        if not increasing and not decreasing:\n            return False\n\n    return increasing or decreasing\n```"], "prompt_tokens": [592], "completion_tokens": [597], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_68_is_Monotonic"}
{"name": "mbpp_430_parabola_directrix", "language": "Python3", "prompt": "def parabola_directrix(a: int, b: int, c: int) -> int:\n    \"\"\"\n\tWrite a function to find the directrix of a parabola.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "parabola_directrix", "test": "def check(candidate):\n    assert candidate(5, 3, 2) == -198\n    assert candidate(9, 8, 4) == -2336\n    assert candidate(2, 4, 6) == -130\n\ndef test_check():\n    check(parabola_directrix)\n\ntest_check()\n", "sample_io": ["assert parabola_directrix(5, 3, 2) == -198"], "source_codes": ["\ndef parabola_directrix(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Find the directrix of a parabola given by y = ax^2 + bx + c.\n    \n    Returns the y-coordinate of the directrix line.\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' cannot be zero for a parabola\")\n    \n    h = -b / (2 * a)\n    k = c - (b**2) / (4 * a)\n    p = 1 / (4 * abs(a))\n    \n    if a > 0:\n        directrix = k - p\n    else:\n        directrix = k + p\n    \n    return directrix\n\n\n"], "responses": ["```python\ndef parabola_directrix(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Find the directrix of a parabola given by y = ax^2 + bx + c.\n    \n    Returns the y-coordinate of the directrix line.\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' cannot be zero for a parabola\")\n    \n    h = -b / (2 * a)\n    k = c - (b**2) / (4 * a)\n    p = 1 / (4 * abs(a))\n    \n    if a > 0:\n        directrix = k - p\n    else:\n        directrix = k + p\n    \n    return directrix\n```"], "prompt_tokens": [875], "completion_tokens": [893], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_430_parabola_directrix"}
{"name": "mbpp_618_div_list", "language": "Python3", "prompt": "from typing import List\n\ndef div_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    \"\"\"\n\tWrite a function to divide two lists element wise.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "div_list", "test": "def check(candidate):\n    assert candidate([4, 5, 6], [1, 2, 3]) == [4.0, 2.5, 2.0]\n    assert candidate([3, 2], [1, 4]) == [3.0, 0.5]\n    assert candidate([90, 120], [50, 70]) == [1.8, 1.7142857142857142]\n\ndef test_check():\n    check(div_list)\n\ntest_check()\n", "sample_io": ["assert div_list([4, 5, 6], [1, 2, 3]) == [4.0, 2.5, 2.0]"], "source_codes": ["\nfrom typing import List\n\ndef div_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    \"\"\"\n    Divide elements of nums1 by corresponding elements in nums2 element-wise.\n    \n    Args:\n        nums1: List of numerator integers.\n        nums2: List of denominator integers.\n    \n    Returns:\n        A list of floats where each element is nums1[i] / nums2[i].\n        \n    Raises:\n        ValueError: If lists are of unequal length.\n        ZeroDivisionError: If any element in nums2 is zero.\n    \"\"\"\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Lists must be of the same length.\")\n\n    result = []\n    for a, b in zip(nums1, nums2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero encountered at element {}\".format(b))\n        result.append(a / b)\n    \n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef div_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    \"\"\"\n    Divide elements of nums1 by corresponding elements in nums2 element-wise.\n    \n    Args:\n        nums1: List of numerator integers.\n        nums2: List of denominator integers.\n    \n    Returns:\n        A list of floats where each element is nums1[i] / nums2[i].\n        \n    Raises:\n        ValueError: If lists are of unequal length.\n        ZeroDivisionError: If any element in nums2 is zero.\n    \"\"\"\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Lists must be of the same length.\")\n\n    result = []\n    for a, b in zip(nums1, nums2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero encountered at element {}\".format(b))\n        result.append(a / b)\n    \n    return result\n```"], "prompt_tokens": [523], "completion_tokens": [578], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_618_div_list"}
{"name": "mbpp_421_concatenate_tuple", "language": "Python3", "prompt": "from typing import Tuple\n\ndef concatenate_tuple(test_tup: Tuple[str, str, int, str]) -> str:\n    \"\"\"\n\tWrite a function to concatenate each element of tuple by the delimiter.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "concatenate_tuple", "test": "def check(candidate):\n    assert candidate(('ID', 'is', 4, 'UTS')) == 'ID-is-4-UTS'\n    assert candidate(('QWE', 'is', 4, 'RTY')) == 'QWE-is-4-RTY'\n    assert candidate(('ZEN', 'is', 4, 'OP')) == 'ZEN-is-4-OP'\n\ndef test_check():\n    check(concatenate_tuple)\n\ntest_check()\n", "sample_io": ["assert concatenate_tuple(('ID', 'is', 4, 'UTS')) == 'ID-is-4-UTS'"], "source_codes": ["\nfrom typing import Tuple\n\ndef concatenate_tuple(test_tup: Tuple[str, str, int, str], delimiter: str = '-') -> str:\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Args:\n    test_tup (Tuple[str, str, int, str]): The input tuple.\n    delimiter (str): Delimiter to use between elements. Default is '-'.\n\n    Returns:\n    str: Concatenated string.\n    \"\"\"\n    str_elements = map(str, test_tup)\n    return delimiter.join(str_elements)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef concatenate_tuple(test_tup: Tuple[str, str, int, str], delimiter: str = '-') -> str:\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Args:\n    test_tup (Tuple[str, str, int, str]): The input tuple.\n    delimiter (str): Delimiter to use between elements. Default is '-'.\n\n    Returns:\n    str: Concatenated string.\n    \"\"\"\n    str_elements = map(str, test_tup)\n    return delimiter.join(str_elements)\n```"], "prompt_tokens": [464], "completion_tokens": [436], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_421_concatenate_tuple"}
{"name": "mbpp_750_add_tuple", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef add_tuple(test_list: List[int], test_tup: Tuple[int, int]) -> List[int]:\n    \"\"\"\n\tWrite a function to add the given tuple to the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_tuple", "test": "def check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n    assert candidate([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\n    assert candidate([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]\n\ndef test_check():\n    check(add_tuple)\n\ntest_check()\n", "sample_io": ["assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef add_tuple(test_list: List[int], test_tup: Tuple[int, int]) -> List[int]:\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef add_tuple(test_list: List[int], test_tup: Tuple[int, int]) -> List[int]:\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list\n```"], "prompt_tokens": [403], "completion_tokens": [312], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_750_add_tuple"}
{"name": "mbpp_304_find_Element", "language": "Python3", "prompt": "from typing import List\n\ndef find_Element(arr: List[int], ranges: List[List[int]], rotations: int, index: int) -> int:\n    \"\"\"\n\tWrite a python function to find element at a given index after number of rotations.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Element", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1) == 3\n    assert candidate([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2) == 3\n    assert candidate([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1) == 1\n\ndef test_check():\n    check(find_Element)\n\ntest_check()\n", "sample_io": ["assert find_Element([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1) == 3"], "source_codes": ["\nfrom typing import List\n\ndef rotate_subarray(arr, start, end, rotations):\n    length = end - start + 1\n    rotations %= length\n    sub = arr[start:end+1]\n    rotated_sub = sub[-rotations:] + sub[:-rotations]\n    return arr[:start] + rotated_sub + arr[end+1:]\n\ndef find_Element(arr: List[int], ranges: List[List[int]], rotations: int, index: int) -> int:\n    for start, end in ranges:\n        arr = rotate_subarray(arr, start, end, rotations)\n    return arr[index]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef rotate_subarray(arr, start, end, rotations):\n    length = end - start + 1\n    rotations %= length\n    sub = arr[start:end+1]\n    rotated_sub = sub[-rotations:] + sub[:-rotations]\n    return arr[:start] + rotated_sub + arr[end+1:]\n\ndef find_Element(arr: List[int], ranges: List[List[int]], rotations: int, index: int) -> int:\n    for start, end in ranges:\n        arr = rotate_subarray(arr, start, end, rotations)\n    return arr[index]\n```"], "prompt_tokens": [906], "completion_tokens": [870], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_304_find_Element"}
{"name": "mbpp_740_tuple_to_dict", "language": "Python3", "prompt": "from typing import Tuple, Dict\n\ndef tuple_to_dict(test_tup: Tuple[int, int, int, int, int, int]) -> Dict[int, int]:\n    \"\"\"\n\tWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tuple_to_dict", "test": "def check(candidate):\n    assert candidate((1, 5, 7, 10, 13, 5)) == { 1: 5, 7: 10, 13: 5 }\n    assert candidate((1, 2, 3, 4, 5, 6)) == { 1: 2, 3: 4, 5: 6 }\n    assert candidate((7, 8, 9, 10, 11, 12)) == { 7: 8, 9: 10, 11: 12 }\n\ndef test_check():\n    check(tuple_to_dict)\n\ntest_check()\n", "sample_io": ["assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == { 1: 5, 7: 10, 13: 5 }"], "source_codes": ["\nfrom typing import Tuple, Dict\n\ndef tuple_to_dict(test_tup: Tuple[int, int, int, int, int, int]) -> Dict[int, int]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n\n\n"], "responses": ["```python\nfrom typing import Tuple, Dict\n\ndef tuple_to_dict(test_tup: Tuple[int, int, int, int, int, int]) -> Dict[int, int]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n```"], "prompt_tokens": [638], "completion_tokens": [490], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_740_tuple_to_dict"}
{"name": "mbpp_627_find_First_Missing", "language": "Python3", "prompt": "from typing import List\n\ndef find_First_Missing(array: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_First_Missing", "test": "def check(candidate):\n    assert candidate([0, 1, 2, 3]) == 4\n    assert candidate([0, 1, 2, 6, 9]) == 3\n    assert candidate([2, 3, 5, 8, 9]) == 0\n\ndef test_check():\n    check(find_First_Missing)\n\ntest_check()\n", "sample_io": ["assert find_First_Missing([0, 1, 2, 3]) == 4"], "source_codes": ["\nfrom typing import List\n\ndef find_First_Missing(array: List[int]) -> int:\n    \"\"\"\n    Find the smallest missing natural number from a sorted list of natural numbers.\n    \"\"\"\n    expected = 1\n    for num in array:\n        if num != expected:\n            return expected\n        expected += 1\n    \n    return expected\n\n# Test cases\nprint(find_First_Missing([1, 2, 3, 5, 6]))  # Output: 4\nprint(find_First_Missing([2, 3, 4, 5]))     # Output: 1\nprint(find_First_Missing([1, 2, 3, 4, 5]))  # Output: 6\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_First_Missing(array: List[int]) -> int:\n    \"\"\"\n    Find the smallest missing natural number from a sorted list of natural numbers.\n    \"\"\"\n    expected = 1\n    for num in array:\n        if num != expected:\n            return expected\n        expected += 1\n    \n    return expected\n\n# Test cases\nprint(find_First_Missing([1, 2, 3, 5, 6]))  # Output: 4\nprint(find_First_Missing([2, 3, 4, 5]))     # Output: 1\nprint(find_First_Missing([1, 2, 3, 4, 5]))  # Output: 6\n```"], "prompt_tokens": [616], "completion_tokens": [628], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_627_find_First_Missing"}
{"name": "mbpp_294_max_val", "language": "Python3", "prompt": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_val", "test": "def check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n", "sample_io": ["assert max_val(['Python', 3, 2, 4, 5, 'version']) == 5"], "source_codes": ["\nfrom typing import List, Union, Optional\n\ndef max_val(listval: List[Union[str, int]]) -> Optional[int]:\n    \"\"\"\n    Find the maximum integer value in a heterogeneous list containing strings and integers.\n    Strings that can be converted to integers are considered.\n    Non-convertible strings are ignored.\n    \n    Returns:\n        The maximum integer value if present, otherwise None.\n    \"\"\"\n    int_values = []\n    for item in listval:\n        if isinstance(item, int):\n            int_values.append(item)\n        elif isinstance(item, str):\n            try:\n                num = int(item)\n                int_values.append(num)\n            except ValueError:\n                pass\n    \n    if not int_values:\n        return None\n    \n    return max(int_values)\n\n\n"], "responses": ["```python\nfrom typing import List, Union, Optional\n\ndef max_val(listval: List[Union[str, int]]) -> Optional[int]:\n    \"\"\"\n    Find the maximum integer value in a heterogeneous list containing strings and integers.\n    Strings that can be converted to integers are considered.\n    Non-convertible strings are ignored.\n    \n    Returns:\n        The maximum integer value if present, otherwise None.\n    \"\"\"\n    int_values = []\n    for item in listval:\n        if isinstance(item, int):\n            int_values.append(item)\n        elif isinstance(item, str):\n            try:\n                num = int(item)\n                int_values.append(num)\n            except ValueError:\n                pass\n    \n    if not int_values:\n        return None\n    \n    return max(int_values)\n```"], "prompt_tokens": [818], "completion_tokens": [827], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_294_max_val"}
{"name": "mbpp_165_count_char_position", "language": "Python3", "prompt": "def count_char_position(str1: str) -> int:\n    \"\"\"\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_char_position", "test": "def check(candidate):\n    assert candidate('xbcefg') == 2\n    assert candidate('ABcED') == 3\n    assert candidate('AbgdeF') == 5\n\ndef test_check():\n    check(count_char_position)\n\ntest_check()\n", "sample_io": ["assert count_char_position('xbcefg') == 2"], "source_codes": ["\ndef count_char_position(str1: str) -> int:\n    \"\"\"\n    Count the number of characters in the string that occur at the same position in \n    the string as they appear in the English alphabet (case insensitive).\n    \n    Positions are 1-indexed.\n    \"\"\"\n    count = 0\n    str1 = str1.lower()\n    for idx, char in enumerate(str1, start=1):\n        if 'a' <= char <= 'z':\n            alpha_pos = ord(char) - ord('a') + 1\n            if idx == alpha_pos:\n                count += 1\n    return count\n\n\n"], "responses": ["```python\ndef count_char_position(str1: str) -> int:\n    \"\"\"\n    Count the number of characters in the string that occur at the same position in \n    the string as they appear in the English alphabet (case insensitive).\n    \n    Positions are 1-indexed.\n    \"\"\"\n    count = 0\n    str1 = str1.lower()\n    for idx, char in enumerate(str1, start=1):\n        if 'a' <= char <= 'z':\n            alpha_pos = ord(char) - ord('a') + 1\n            if idx == alpha_pos:\n                count += 1\n    return count\n```"], "prompt_tokens": [688], "completion_tokens": [665], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_165_count_char_position"}
{"name": "mbpp_589_perfect_squares", "language": "Python3", "prompt": "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find perfect squares between two given numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "perfect_squares", "test": "def check(candidate):\n    assert candidate(1, 30) == [1, 4, 9, 16, 25]\n    assert candidate(50, 100) == [64, 81, 100]\n    assert candidate(100, 200) == [100, 121, 144, 169, 196]\n\ndef test_check():\n    check(perfect_squares)\n\ntest_check()\n", "sample_io": ["assert perfect_squares(1, 30) == [1, 4, 9, 16, 25]"], "source_codes": ["\nfrom typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    \"\"\"\n    Find perfect squares between two given numbers a and b (inclusive).\n    \"\"\"\n    if a > b:\n        return []\n    \n    start = max(a, 0)\n    \n    lower = math.ceil(math.sqrt(start))\n    upper = math.floor(math.sqrt(b))\n    \n    return [i * i for i in range(lower, upper + 1)]\n\n\n"], "responses": ["```python\nfrom typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    \"\"\"\n    Find perfect squares between two given numbers a and b (inclusive).\n    \"\"\"\n    if a > b:\n        return []\n    \n    start = max(a, 0)\n    \n    lower = math.ceil(math.sqrt(start))\n    upper = math.floor(math.sqrt(b))\n    \n    return [i * i for i in range(lower, upper + 1)]\n```"], "prompt_tokens": [633], "completion_tokens": [598], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_589_perfect_squares"}
{"name": "mbpp_744_check_none", "language": "Python3", "prompt": "from typing import Any\n\ndef check_none(test_tup: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if the given tuple has any none value or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_744_check_none.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_none", "test": "def check(candidate):\n    assert candidate((10, 4, 5, 6, None)) == True\n    assert candidate((7, 8, 9, 11, 14)) == False\n    assert candidate((1, 2, 3, 4, None)) == True\n\ndef test_check():\n    check(check_none)\n\ntest_check()\n", "sample_io": ["assert check_none((10, 4, 5, 6, None)) == True"], "source_codes": ["\nfrom typing import Any\n\ndef check_none(test_tup: Any) -> bool:\n    \"\"\"\n    Write a function to check if the given tuple has any None value or not.\n    \n    Parameters:\n        test_tup (tuple): Input tuple to check for None values.\n    \n    Returns:\n        bool: True if None is present in the tuple, False otherwise.\n    \"\"\"\n    return any(element is None for element in test_tup)\n\n\n"], "responses": ["```python\nfrom typing import Any\n\ndef check_none(test_tup: Any) -> bool:\n    \"\"\"\n    Write a function to check if the given tuple has any None value or not.\n    \n    Parameters:\n        test_tup (tuple): Input tuple to check for None values.\n    \n    Returns:\n        bool: True if None is present in the tuple, False otherwise.\n    \"\"\"\n    return any(element is None for element in test_tup)\n```"], "prompt_tokens": [493], "completion_tokens": [449], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_744_check_none"}
{"name": "mbpp_726_multiply_elements", "language": "Python3", "prompt": "from typing import List, Any\n\ndef multiply_elements(test_tup: List[int]) -> List[Any]:\n    \"\"\"\n\tWrite a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_726_multiply_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "multiply_elements", "test": "def check(candidate):\n    assert candidate([1, 5, 7, 8, 10]) == [5, 35, 56, 80]\n    assert candidate([2, 4, 5, 6, 7]) == [8, 20, 30, 42]\n    assert candidate([12, 13, 14, 9, 15]) == [156, 182, 126, 135]\n    assert candidate([12]) == []\n\ndef test_check():\n    check(multiply_elements)\n\ntest_check()\n", "sample_io": ["assert multiply_elements([1, 5, 7, 8, 10]) == [5, 35, 56, 80]"], "source_codes": ["\nfrom typing import List, Any\n\ndef multiply_elements(test_tup: List[int]) -> List[Any]:\n    N = len(test_tup) - 1\n    result = []\n    \n    for i in range(N):\n        product = test_tup[i] * test_tup[i+1]\n        result.append(product)\n        \n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef multiply_elements(test_tup: List[int]) -> List[Any]:\n    N = len(test_tup) - 1\n    result = []\n    \n    for i in range(N):\n        product = test_tup[i] * test_tup[i+1]\n        result.append(product)\n        \n    return result\n```"], "prompt_tokens": [555], "completion_tokens": [417], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_726_multiply_elements"}
{"name": "mbpp_736_left_insertion", "language": "Python3", "prompt": "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "left_insertion", "test": "def check(candidate):\n    assert candidate([1, 2, 4, 5], 6) == 4\n    assert candidate([1, 2, 4, 5], 3) == 2\n    assert candidate([1, 2, 4, 5], 7) == 4\n\ndef test_check():\n    check(left_insertion)\n\ntest_check()\n", "sample_io": ["assert left_insertion([1, 2, 4, 5], 6) == 4"], "source_codes": ["\nfrom typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = 0, len(a)\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = 0, len(a)\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n```"], "prompt_tokens": [783], "completion_tokens": [666], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_736_left_insertion"}
{"name": "mbpp_63_max_difference", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum difference between available pairs in the given tuple list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_difference", "test": "def check(candidate):\n    assert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n    assert candidate([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\n    assert candidate([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n\ndef test_check():\n    check(max_difference)\n\ntest_check()\n", "sample_io": ["assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n```"], "prompt_tokens": [480], "completion_tokens": [398], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_63_max_difference"}
{"name": "mbpp_264_dog_age", "language": "Python3", "prompt": "def dog_age(h_age: int) -> int:\n    \"\"\"\n\tWrite a function to calculate a dog's age in dog's years.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_264_dog_age.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "dog_age", "test": "def check(candidate):\n    assert candidate(12) == 61\n    assert candidate(15) == 73\n    assert candidate(24) == 109\n\ndef test_check():\n    check(dog_age)\n\ntest_check()\n", "sample_io": ["assert dog_age(12) == 61"], "source_codes": ["\ndef dog_age(h_age: int) -> int:\n    \"\"\"\n    Calculate a dog's age in dog years.\n\n    Args:\n    h_age (int): The dog's age in human years.\n\n    Returns:\n    int: The dog's age in dog years.\n    \"\"\"\n    if h_age <= 0:\n        return 0\n    elif h_age == 1:\n        return 15\n    elif h_age == 2:\n        return 24\n    else:\n        return 24 + (h_age - 2) * 5\n\n\n"], "responses": ["```python\ndef dog_age(h_age: int) -> int:\n    \"\"\"\n    Calculate a dog's age in dog years.\n\n    Args:\n    h_age (int): The dog's age in human years.\n\n    Returns:\n    int: The dog's age in dog years.\n    \"\"\"\n    if h_age <= 0:\n        return 0\n    elif h_age == 1:\n        return 15\n    elif h_age == 2:\n        return 24\n    else:\n        return 24 + (h_age - 2) * 5\n```"], "prompt_tokens": [450], "completion_tokens": [447], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_264_dog_age"}
{"name": "mbpp_273_substract_elements", "language": "Python3", "prompt": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> Tuple[int, int, int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "substract_elements", "test": "def check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n", "sample_io": ["assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"], "source_codes": ["\nfrom typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> Tuple[int, int, int]:\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result = tuple(a - b for a, b in zip(test_tup1, test_tup2))\n    return result\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> Tuple[int, int, int]:\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result = tuple(a - b for a, b in zip(test_tup1, test_tup2))\n    return result\n```"], "prompt_tokens": [626], "completion_tokens": [521], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_273_substract_elements"}
{"name": "mbpp_83_get_Char", "language": "Python3", "prompt": "def get_Char(strr: str) -> str:\n    \"\"\"\n\tWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_Char", "test": "def check(candidate):\n    assert candidate('abc') == 'f'\n    assert candidate('gfg') == 't'\n    assert candidate('ab') == 'c'\n\ndef test_check():\n    check(get_Char)\n\ntest_check()\n", "sample_io": ["assert get_Char('abc') == 'f'"], "source_codes": ["\ndef get_Char(strr: str) -> str:\n    total_sum = sum(ord(ch) for ch in strr)\n    res = total_sum % 26\n    return chr(res + ord('A'))\n\n\n"], "responses": ["```python\ndef get_Char(strr: str) -> str:\n    total_sum = sum(ord(ch) for ch in strr)\n    res = total_sum % 26\n    return chr(res + ord('A'))\n```"], "prompt_tokens": [536], "completion_tokens": [437], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_83_get_Char"}
{"name": "mbpp_91_find_substring", "language": "Python3", "prompt": "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    \"\"\"\n\tWrite a function to check if a string is present as a substring in a given list of string values.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_substring", "test": "def check(candidate):\n    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ack') == True\n    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'abc') == False\n    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ange') == True\n\ndef test_check():\n    check(find_substring)\n\ntest_check()\n", "sample_io": ["assert find_substring(['red', 'black', 'white', 'green', 'orange'], 'ack') == True"], "source_codes": ["\nfrom typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n```"], "prompt_tokens": [515], "completion_tokens": [431], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_91_find_substring"}
{"name": "mbpp_100_next_smallest_palindrome", "language": "Python3", "prompt": "def next_smallest_palindrome(num: int) -> int:\n    \"\"\"\n\tWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "next_smallest_palindrome", "test": "def check(candidate):\n    assert candidate(99) == 101\n    assert candidate(1221) == 1331\n    assert candidate(120) == 121\n\ndef test_check():\n    check(next_smallest_palindrome)\n\ntest_check()\n", "sample_io": ["assert next_smallest_palindrome(99) == 101"], "source_codes": ["\ndef next_smallest_palindrome(num: int) -> int:\n    s = str(num)\n    length = len(s)\n    \n    if all(ch == '9' for ch in s):\n        return num + 2\n    \n    half = length // 2\n    odd = length % 2\n    \n    left = s[:half + odd]\n    if odd:\n        palindrome = left + left[:-1][::-1]\n    else:\n        palindrome = left + left[::-1]\n    \n    if int(palindrome) > num:\n        return int(palindrome)\n    \n    left_num = int(left) + 1\n    left = str(left_num)\n    \n    if len(left) > len(s[:half + odd]):\n        if odd:\n            palindrome = left + left[:-1][::-1]\n        else:\n            palindrome = left + left[::-1]\n    else:\n        if odd:\n            palindrome = left + left[:-1][::-1]\n        else:\n            palindrome = left + left[::-1]\n    \n    return int(palindrome)\n\n\n"], "responses": ["```python\ndef next_smallest_palindrome(num: int) -> int:\n    s = str(num)\n    length = len(s)\n    \n    if all(ch == '9' for ch in s):\n        return num + 2\n    \n    half = length // 2\n    odd = length % 2\n    \n    left = s[:half + odd]\n    if odd:\n        palindrome = left + left[:-1][::-1]\n    else:\n        palindrome = left + left[::-1]\n    \n    if int(palindrome) > num:\n        return int(palindrome)\n    \n    left_num = int(left) + 1\n    left = str(left_num)\n    \n    if len(left) > len(s[:half + odd]):\n        if odd:\n            palindrome = left + left[:-1][::-1]\n        else:\n            palindrome = left + left[::-1]\n    else:\n        if odd:\n            palindrome = left + left[:-1][::-1]\n        else:\n            palindrome = left + left[::-1]\n    \n    return int(palindrome)\n```"], "prompt_tokens": [773], "completion_tokens": [859], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_100_next_smallest_palindrome"}
{"name": "mbpp_282_sub_list", "language": "Python3", "prompt": "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to subtract two lists element-wise.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sub_list", "test": "def check(candidate):\n    assert candidate([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]\n    assert candidate([1, 2], [3, 4]) == [-2, -2]\n    assert candidate([90, 120], [50, 70]) == [40, 50]\n\ndef test_check():\n    check(sub_list)\n\ntest_check()\n", "sample_io": ["assert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]"], "source_codes": ["\nfrom typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    \"\"\"\n    Subtract two lists element-wise.\n    Assumes both lists have the same length.\n    \"\"\"\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    result = [a - b for a, b in zip(nums1, nums2)]\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    \"\"\"\n    Subtract two lists element-wise.\n    Assumes both lists have the same length.\n    \"\"\"\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    result = [a - b for a, b in zip(nums1, nums2)]\n    return result\n```"], "prompt_tokens": [380], "completion_tokens": [335], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_282_sub_list"}
{"name": "mbpp_790_even_position", "language": "Python3", "prompt": "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "even_position", "test": "def check(candidate):\n    assert candidate([3, 2, 1]) == False\n    assert candidate([1, 2, 3]) == False\n    assert candidate([2, 1, 4]) == True\n\ndef test_check():\n    check(even_position)\n\ntest_check()\n", "sample_io": ["assert even_position([3, 2, 1]) == False"], "source_codes": ["\nfrom typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    \"\"\"\n    Check whether every even index contains even numbers in a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    \"\"\"\n    Check whether every even index contains even numbers in a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n```"], "prompt_tokens": [495], "completion_tokens": [428], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_790_even_position"}
{"name": "mbpp_411_snake_to_camel", "language": "Python3", "prompt": "def snake_to_camel(word: str) -> str:\n    \"\"\"\n\tWrite a function to convert the given snake case string to camel case string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "snake_to_camel", "test": "def check(candidate):\n    assert candidate('android_tv') == 'AndroidTv'\n    assert candidate('google_pixel') == 'GooglePixel'\n    assert candidate('apple_watch') == 'AppleWatch'\n\ndef test_check():\n    check(snake_to_camel)\n\ntest_check()\n", "sample_io": ["assert snake_to_camel('android_tv') == 'AndroidTv'"], "source_codes": ["\ndef snake_to_camel(word: str) -> str:\n    \"\"\"\n    Convert a snake_case string to camelCase string.\n    \"\"\"\n    parts = word.split('_')\n    return parts[0] + ''.join(part.capitalize() for part in parts[1:])\n\n\n"], "responses": ["```python\ndef snake_to_camel(word: str) -> str:\n    \"\"\"\n    Convert a snake_case string to camelCase string.\n    \"\"\"\n    parts = word.split('_')\n    return parts[0] + ''.join(part.capitalize() for part in parts[1:])\n```"], "prompt_tokens": [404], "completion_tokens": [335], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_411_snake_to_camel"}
{"name": "mbpp_754_extract_index_list", "language": "Python3", "prompt": "from typing import List, Any\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[Any]:\n    \"\"\"\n\tWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_index_list", "test": "def check(candidate):\n    assert candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7]\n    assert candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]) == [1, 6]\n    assert candidate([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 5]\n    assert candidate([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == []\n\ndef test_check():\n    check(extract_index_list)\n\ntest_check()\n", "sample_io": ["assert extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7]"], "source_codes": ["\nfrom typing import List, Any\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[Any]:\n    min_length = min(len(l1), len(l2), len(l3))\n    common_elements = []\n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[Any]:\n    min_length = min(len(l1), len(l2), len(l3))\n    common_elements = []\n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n```"], "prompt_tokens": [696], "completion_tokens": [559], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_754_extract_index_list"}
{"name": "mbpp_56_checks", "language": "Python3", "prompt": "def checks(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check if a given number is one less than twice its reverse.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "checks", "test": "def check(candidate):\n    assert candidate(70) == False\n    assert candidate(23) == False\n    assert candidate(73) == True\n\ndef test_check():\n    check(checks)\n\ntest_check()\n", "sample_io": ["assert checks(70) == False"], "source_codes": ["\ndef checks(n: int) -> bool:\n    s = str(n)\n    rev = int(s[::-1])\n    return n + 1 == 2 * rev\n\n\n"], "responses": ["```python\ndef checks(n: int) -> bool:\n    s = str(n)\n    rev = int(s[::-1])\n    return n + 1 == 2 * rev\n```"], "prompt_tokens": [652], "completion_tokens": [566], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_56_checks"}
{"name": "mbpp_724_power_base_sum", "language": "Python3", "prompt": "def power_base_sum(base: int, power: int) -> int:\n    \"\"\"\n\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "power_base_sum", "test": "def check(candidate):\n    assert candidate(2, 100) == 115\n    assert candidate(8, 10) == 37\n    assert candidate(8, 15) == 62\n    assert candidate(3, 3) == 9\n\ndef test_check():\n    check(power_base_sum)\n\ntest_check()\n", "sample_io": ["assert power_base_sum(2, 100) == 115"], "source_codes": ["\ndef power_base_sum(base: int, power: int) -> int:\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum \n    of all digits of the base to the specified power.\n    \"\"\"\n    # Step 1: Calculate base to the power of power\n    result = base ** power\n    \n    # Step 2: Convert the result to string to iterate over each digit\n    digits_str = str(result)\n    \n    # Step 3: Sum the digits by converting each character back to int\n    digits_sum = sum(int(digit) for digit in digits_str)\n    \n    return digits_sum\n\n\n"], "responses": ["```python\ndef power_base_sum(base: int, power: int) -> int:\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum \n    of all digits of the base to the specified power.\n    \"\"\"\n    # Step 1: Calculate base to the power of power\n    result = base ** power\n    \n    # Step 2: Convert the result to string to iterate over each digit\n    digits_str = str(result)\n    \n    # Step 3: Sum the digits by converting each character back to int\n    digits_sum = sum(int(digit) for digit in digits_str)\n    \n    return digits_sum\n```"], "prompt_tokens": [432], "completion_tokens": [416], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_724_power_base_sum"}
{"name": "mbpp_268_find_star_num", "language": "Python3", "prompt": "def find_star_num(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the n'th star number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_star_num", "test": "def check(candidate):\n    assert candidate(3) == 37\n    assert candidate(4) == 73\n    assert candidate(5) == 121\n\ndef test_check():\n    check(find_star_num)\n\ntest_check()\n", "sample_io": ["assert find_star_num(3) == 37"], "source_codes": ["\ndef find_star_num(n: int) -> int:\n    \"\"\"\n    Find the n-th star number.\n    Star number formula: S_n = 6n(n-1) + 1\n    \"\"\"\n    return 6 * n * (n - 1) + 1\n\n\n"], "responses": ["```python\ndef find_star_num(n: int) -> int:\n    \"\"\"\n    Find the n-th star number.\n    Star number formula: S_n = 6n(n-1) + 1\n    \"\"\"\n    return 6 * n * (n - 1) + 1\n```"], "prompt_tokens": [416], "completion_tokens": [362], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_268_find_star_num"}
{"name": "mbpp_251_insert_element", "language": "Python3", "prompt": "from typing import List\n\ndef insert_element(list: List[str], element: str) -> List[str]:\n    \"\"\"\n\tWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "insert_element", "test": "def check(candidate):\n    assert candidate(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']\n    assert candidate(['python', 'java'], 'program') == ['program', 'python', 'program', 'java']\n    assert candidate(['happy', 'sad'], 'laugh') == ['laugh', 'happy', 'laugh', 'sad']\n\ndef test_check():\n    check(insert_element)\n\ntest_check()\n", "sample_io": ["assert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']"], "source_codes": ["\nfrom typing import List\n\ndef insert_element(lst: List[str], element: str) -> List[str]:\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef insert_element(lst: List[str], element: str) -> List[str]:\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n```"], "prompt_tokens": [478], "completion_tokens": [358], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_251_insert_element"}
{"name": "mbpp_428_shell_sort", "language": "Python3", "prompt": "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort the given array by using shell sort.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "shell_sort", "test": "def check(candidate):\n    assert candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    assert candidate([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\n    assert candidate([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n\ndef test_check():\n    check(shell_sort)\n\ntest_check()\n", "sample_io": ["assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"], "source_codes": ["\nfrom typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n```"], "prompt_tokens": [689], "completion_tokens": [673], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_428_shell_sort"}
{"name": "mbpp_476_big_sum", "language": "Python3", "prompt": "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of the largest and smallest value in a given array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "big_sum", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 4\n    assert candidate([-1, 2, 3, 4]) == 3\n    assert candidate([2, 3, 6]) == 8\n\ndef test_check():\n    check(big_sum)\n\ntest_check()\n", "sample_io": ["assert big_sum([1, 2, 3]) == 4"], "source_codes": ["\nfrom typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if not nums:\n        return 0\n    \n    smallest = min(nums)\n    largest = max(nums)\n    return smallest + largest\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if not nums:\n        return 0\n    \n    smallest = min(nums)\n    largest = max(nums)\n    return smallest + largest\n```"], "prompt_tokens": [331], "completion_tokens": [262], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_476_big_sum"}
{"name": "mbpp_465_drop_empty", "language": "Python3", "prompt": "from typing import Dict, Optional\n\ndef drop_empty(dict1: Dict[str, Optional[str]]) -> Dict[str, str]:\n    \"\"\"\n\tWrite a function to drop empty items from a given dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "drop_empty", "test": "def check(candidate):\n    assert candidate({ 'c1': 'Red', 'c2': 'Green', 'c3': None }) == { 'c1': 'Red', 'c2': 'Green' }\n    assert candidate({ 'c1': 'Red', 'c2': None, 'c3': None }) == { 'c1': 'Red' }\n    assert candidate({ 'c1': None, 'c2': 'Green', 'c3': None }) == { 'c2': 'Green' }\n\ndef test_check():\n    check(drop_empty)\n\ntest_check()\n", "sample_io": ["assert drop_empty({ 'c1': 'Red', 'c2': 'Green', 'c3': None }) == { 'c1': 'Red', 'c2': 'Green' }"], "source_codes": ["\nfrom typing import Dict, Optional\n\ndef drop_empty(dict1: Dict[str, Optional[str]]) -> Dict[str, str]:\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    Empty items are those with value None or empty string (\"\").\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v != \"\"}\n\n\n"], "responses": ["```python\nfrom typing import Dict, Optional\n\ndef drop_empty(dict1: Dict[str, Optional[str]]) -> Dict[str, str]:\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    Empty items are those with value None or empty string (\"\").\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v != \"\"}\n```"], "prompt_tokens": [392], "completion_tokens": [330], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_465_drop_empty"}
{"name": "mbpp_454_text_match_wordz", "language": "Python3", "prompt": "def text_match_wordz(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a word containing 'z'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_wordz", "test": "def check(candidate):\n    assert candidate('pythonz.') == True\n    assert candidate('xyz.') == True\n    assert candidate('  lang  .') == False\n\ndef test_check():\n    check(text_match_wordz)\n\ntest_check()\n", "sample_io": ["assert text_match_wordz('pythonz.') == True"], "source_codes": ["\ndef text_match_wordz(text: str) -> bool:\n    \"\"\"\n    Write a function that matches a word containing 'z'.\n    Returns True if any word in the text contains the letter 'z' (case insensitive), else False.\n    \"\"\"\n    words = text.split()\n    for word in words:\n        if 'z' in word.lower():\n            return True\n    return False\n\n\n"], "responses": ["```python\ndef text_match_wordz(text: str) -> bool:\n    \"\"\"\n    Write a function that matches a word containing 'z'.\n    Returns True if any word in the text contains the letter 'z' (case insensitive), else False.\n    \"\"\"\n    words = text.split()\n    for word in words:\n        if 'z' in word.lower():\n            return True\n    return False\n```"], "prompt_tokens": [518], "completion_tokens": [484], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_454_text_match_wordz"}
{"name": "mbpp_605_prime_num", "language": "Python3", "prompt": "def prime_num(num: int) -> bool:\n    \"\"\"\n\tWrite a function to check if the given integer is a prime number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "prime_num", "test": "def check(candidate):\n    assert candidate(13) == True\n    assert candidate(7) == True\n    assert candidate(-1010) == False\n\ndef test_check():\n    check(prime_num)\n\ntest_check()\n", "sample_io": ["assert prime_num(13) == True"], "source_codes": ["\ndef prime_num(num: int) -> bool:\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num <= 1:\n        return False\n\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True\n\n\n# Testing the function\nprint(prime_num(2))    # True\nprint(prime_num(15))   # False\nprint(prime_num(17))   # True\nprint(prime_num(1))    # False\nprint(prime_num(0))    # False\nprint(prime_num(-3))   # False\n\n\n"], "responses": ["```python\ndef prime_num(num: int) -> bool:\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num <= 1:\n        return False\n\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True\n\n\n# Testing the function\nprint(prime_num(2))    # True\nprint(prime_num(15))   # False\nprint(prime_num(17))   # True\nprint(prime_num(1))    # False\nprint(prime_num(0))    # False\nprint(prime_num(-3))   # False\n```"], "prompt_tokens": [538], "completion_tokens": [571], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_605_prime_num"}
{"name": "mbpp_108_merge_sorted_list", "language": "Python3", "prompt": "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to merge three lists into a single sorted list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "merge_sorted_list", "test": "def check(candidate):\n    assert candidate([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]) == [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41]) == [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n\ndef test_check():\n    check(merge_sorted_list)\n\ntest_check()\n", "sample_io": ["assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"], "source_codes": ["\nfrom typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    i, j, k = 0, 0, 0\n    merged = []\n    while i < len(num1) or j < len(num2) or k < len(num3):\n        val1 = num1[i] if i < len(num1) else float('inf')\n        val2 = num2[j] if j < len(num2) else float('inf')\n        val3 = num3[k] if k < len(num3) else float('inf')\n\n        if val1 <= val2 and val1 <= val3:\n            merged.append(val1)\n            i += 1\n        elif val2 <= val1 and val2 <= val3:\n            merged.append(val2)\n            j += 1\n        else:\n            merged.append(val3)\n            k += 1\n\n    return merged\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    i, j, k = 0, 0, 0\n    merged = []\n    while i < len(num1) or j < len(num2) or k < len(num3):\n        val1 = num1[i] if i < len(num1) else float('inf')\n        val2 = num2[j] if j < len(num2) else float('inf')\n        val3 = num3[k] if k < len(num3) else float('inf')\n\n        if val1 <= val2 and val1 <= val3:\n            merged.append(val1)\n            i += 1\n        elif val2 <= val1 and val2 <= val3:\n            merged.append(val2)\n            j += 1\n        else:\n            merged.append(val3)\n            k += 1\n\n    return merged\n```"], "prompt_tokens": [669], "completion_tokens": [718], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_108_merge_sorted_list"}
{"name": "mbpp_639_sample_nam", "language": "Python3", "prompt": "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    \"\"\"\n\tWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sample_nam", "test": "def check(candidate):\n    assert candidate(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16\n    assert candidate(['php', 'res', 'Python', 'abcd', 'Java', 'aaa']) == 10\n    assert candidate(['abcd', 'Python', 'abba', 'aba']) == 6\n\ndef test_check():\n    check(sample_nam)\n\ntest_check()\n", "sample_io": ["assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16"], "source_codes": ["\nfrom typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    filtered_names = [name for name in sample_names if not name[0].islower()]\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    filtered_names = [name for name in sample_names if not name[0].islower()]\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length\n```"], "prompt_tokens": [488], "completion_tokens": [420], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_639_sample_nam"}
{"name": "mbpp_409_min_product_tuple", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the minimum product from the pairs of tuples within a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_product_tuple", "test": "def check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8\n    assert candidate([(10, 20), (15, 2), (5, 10)]) == 30\n    assert candidate([(11, 44), (10, 15), (20, 5), (12, 9)]) == 100\n\ndef test_check():\n    check(min_product_tuple)\n\ntest_check()\n", "sample_io": ["assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = None\n\n    for a, b in list1:\n        product = a * b\n        if min_product is None or product < min_product:\n            min_product = product\n\n    return min_product\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = None\n\n    for a, b in list1:\n        product = a * b\n        if min_product is None or product < min_product:\n            min_product = product\n\n    return min_product\n```"], "prompt_tokens": [489], "completion_tokens": [430], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_409_min_product_tuple"}
{"name": "mbpp_791_remove_nested", "language": "Python3", "prompt": "from typing import Any, Tuple\n\ndef remove_nested(test_tup: Any) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to remove tuples from the given tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_791_remove_nested.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_nested", "test": "def check(candidate):\n    assert candidate((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n    assert candidate((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\n    assert candidate((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\n    assert candidate((3, 7, 9, (6, 8), (5, 12), 12)) == (3, 7, 9, 12)\n\ndef test_check():\n    check(remove_nested)\n\ntest_check()\n", "sample_io": ["assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)"], "source_codes": ["\nfrom typing import Any, Tuple\n\ndef remove_nested(test_tup: Any) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    filtered = tuple(item for item in test_tup if not isinstance(item, tuple))\n    return filtered\n\n\n"], "responses": ["```python\nfrom typing import Any, Tuple\n\ndef remove_nested(test_tup: Any) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    filtered = tuple(item for item in test_tup if not isinstance(item, tuple))\n    return filtered\n```"], "prompt_tokens": [466], "completion_tokens": [389], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_791_remove_nested"}
{"name": "mbpp_591_swap_List", "language": "Python3", "prompt": "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to interchange the first and last elements in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "swap_List", "test": "def check(candidate):\n    assert candidate([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n    assert candidate([1, 2, 3]) == [3, 2, 1]\n    assert candidate([4, 5, 6]) == [6, 5, 4]\n\ndef test_check():\n    check(swap_List)\n\ntest_check()\n", "sample_io": ["assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]"], "source_codes": ["\nfrom typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n```"], "prompt_tokens": [393], "completion_tokens": [330], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_591_swap_List"}
{"name": "mbpp_419_round_and_sum", "language": "Python3", "prompt": "from typing import List, Union\n\ndef round_and_sum(list1: List[Union[float, int]]) -> int:\n    \"\"\"\n\tWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_419_round_and_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "round_and_sum", "test": "def check(candidate):\n    assert candidate([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]) == 243\n    assert candidate([5, 2, 9, 24.3, 29]) == 345\n    assert candidate([25.0, 56.7, 89.2]) == 513\n\ndef test_check():\n    check(round_and_sum)\n\ntest_check()\n", "sample_io": ["assert round_and_sum([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]) == 243"], "source_codes": ["\nfrom typing import List, Union\n\ndef round_and_sum(list1: List[Union[float, int]]) -> int:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(list1)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef round_and_sum(list1: List[Union[float, int]]) -> int:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(list1)\n    return result\n```"], "prompt_tokens": [421], "completion_tokens": [315], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_419_round_and_sum"}
{"name": "mbpp_84_sequence", "language": "Python3", "prompt": "def sequence(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth number in the newman conway sequence.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_84_sequence.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sequence", "test": "def check(candidate):\n    assert candidate(10) == 6\n    assert candidate(2) == 1\n    assert candidate(3) == 2\n\ndef test_check():\n    check(sequence)\n\ntest_check()\n", "sample_io": ["assert sequence(10) == 6"], "source_codes": ["\ndef sequence(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    a = [0] * (n + 1)\n    a[1], a[2] = 1, 1\n    for i in range(3, n + 1):\n        a[i] = a[a[i - 1]] + a[i - a[i - 1]]\n    return a[n]\n\n\n"], "responses": ["```python\ndef sequence(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    a = [0] * (n + 1)\n    a[1], a[2] = 1, 1\n    for i in range(3, n + 1):\n        a[i] = a[a[i - 1]] + a[i - a[i - 1]]\n    return a[n]\n```"], "prompt_tokens": [649], "completion_tokens": [647], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_84_sequence"}
{"name": "mbpp_260_newman_prime", "language": "Python3", "prompt": "def newman_prime(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "newman_prime", "test": "def check(candidate):\n    assert candidate(3) == 7\n    assert candidate(4) == 17\n    assert candidate(5) == 41\n\ndef test_check():\n    check(newman_prime)\n\ntest_check()\n", "sample_io": ["assert newman_prime(3) == 7"], "source_codes": ["\ndef is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_prime(n: int) -> int:\n    \"\"\"\n    Find the nth Newman\u2013Shanks\u2013Williams prime number.\n    \"\"\"\n    S0, S1 = 1, 1\n    count = 0\n    \n    if is_prime(S0):\n        count += 1\n        if count == n:\n            return S0\n    \n    if is_prime(S1):\n        count += 1\n        if count == n:\n            return S1\n    \n    while True:\n        Sn = 2 * S1 + S0\n        if is_prime(Sn):\n            count += 1\n            if count == n:\n                return Sn\n        S0, S1 = S1, Sn\n\n\n"], "responses": ["```python\ndef is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_prime(n: int) -> int:\n    \"\"\"\n    Find the nth Newman\u2013Shanks\u2013Williams prime number.\n    \"\"\"\n    S0, S1 = 1, 1\n    count = 0\n    \n    if is_prime(S0):\n        count += 1\n        if count == n:\n            return S0\n    \n    if is_prime(S1):\n        count += 1\n        if count == n:\n            return S1\n    \n    while True:\n        Sn = 2 * S1 + S0\n        if is_prime(Sn):\n            count += 1\n            if count == n:\n                return Sn\n        S0, S1 = S1, Sn\n```"], "prompt_tokens": [856], "completion_tokens": [989], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_260_newman_prime"}
{"name": "mbpp_418_Find_Max", "language": "Python3", "prompt": "from typing import List, Any\n\ndef Find_Max(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n\tWrite a python function to find the element of a list having maximum length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Max", "test": "def check(candidate):\n    assert candidate([['A'], ['A', 'B'], ['A', 'B', 'C']]) == ['A', 'B', 'C']\n    assert candidate([[1], [1, 2], [1, 2, 3]]) == [1, 2, 3]\n    assert candidate([[1, 1], [1, 2, 3], [1, 5, 6, 1]]) == [1, 5, 6, 1]\n\ndef test_check():\n    check(Find_Max)\n\ntest_check()\n", "sample_io": ["assert Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']]) == ['A', 'B', 'C']"], "source_codes": ["\nfrom typing import List, Any\n\ndef Find_Max(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    if not lst:\n        return []\n    \n    max_length = 0\n    max_element = []\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    return max_element\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef Find_Max(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    if not lst:\n        return []\n    \n    max_length = 0\n    max_element = []\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    return max_element\n```"], "prompt_tokens": [534], "completion_tokens": [491], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_418_Find_Max"}
{"name": "mbpp_565_split", "language": "Python3", "prompt": "from typing import List\n\ndef split(word: str) -> List[str]:\n    \"\"\"\n\tWrite a python function to split a string into characters.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "split", "test": "def check(candidate):\n    assert candidate('python') == ['p', 'y', 't', 'h', 'o', 'n']\n    assert candidate('Name') == ['N', 'a', 'm', 'e']\n    assert candidate('program') == ['p', 'r', 'o', 'g', 'r', 'a', 'm']\n\ndef test_check():\n    check(split)\n\ntest_check()\n", "sample_io": ["assert split('python') == ['p', 'y', 't', 'h', 'o', 'n']"], "source_codes": ["\nfrom typing import List\n\ndef split(word: str) -> List[str]:\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef split(word: str) -> List[str]:\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)\n```"], "prompt_tokens": [286], "completion_tokens": [202], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_565_split"}
{"name": "mbpp_778_pack_consecutive_duplicates", "language": "Python3", "prompt": "from typing import List, Any\n\ndef pack_consecutive_duplicates(list1: List[Any]) -> List[List[Any]]:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pack_consecutive_duplicates", "test": "def check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n", "sample_io": ["assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"], "source_codes": ["\nfrom typing import List, Any\n\ndef pack_consecutive_duplicates(list1: List[Any]) -> List[List[Any]]:\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    if not list1:\n        return []\n\n    result = []\n    current_sublist = [list1[0]]\n\n    for elem in list1[1:]:\n        if elem == current_sublist[-1]:\n            current_sublist.append(elem)\n        else:\n            result.append(current_sublist)\n            current_sublist = [elem]\n\n    result.append(current_sublist)\n\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef pack_consecutive_duplicates(list1: List[Any]) -> List[List[Any]]:\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    if not list1:\n        return []\n\n    result = []\n    current_sublist = [list1[0]]\n\n    for elem in list1[1:]:\n        if elem == current_sublist[-1]:\n            current_sublist.append(elem)\n        else:\n            result.append(current_sublist)\n            current_sublist = [elem]\n\n    result.append(current_sublist)\n\n    return result\n```"], "prompt_tokens": [568], "completion_tokens": [546], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_778_pack_consecutive_duplicates"}
{"name": "mbpp_753_min_k", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    \"\"\"\n\tWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_k", "test": "def check(candidate):\n    assert candidate([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n    assert candidate([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n    assert candidate([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]\n\ndef test_check():\n    check(min_k)\n\ntest_check()\n", "sample_io": ["assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    \"\"\"\n    Find minimum K records from a list of tuples by integer value in the second position.\n\n    Args:\n    test_list: List of tuples with (str, int)\n    K: Number of minimum records to return\n\n    Returns:\n    List of tuples with minimum K integer values.\n    \"\"\"\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[:K]\n\n# Test cases\nif __name__ == \"__main__\":\n    test_list1 = [('a', 3), ('b', 1), ('c', 2)]\n    print(min_k(test_list1, 2))  # [('b', 1), ('c', 2)]\n\n    test_list2 = [('x', 10), ('y', 20), ('z', 5), ('w', 15)]\n    print(min_k(test_list2, 3))  # [('z', 5), ('x', 10), ('w', 15)]\n\n    test_list3 = []\n    print(min_k(test_list3, 3))  # []\n\n    test_list4 = [('p', 7), ('q', 7), ('r', 8), ('s', 6)]\n    print(min_k(test_list4, 2))  # [('s', 6), ('p', 7)] or [('s', 6), ('q', 7)]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    \"\"\"\n    Find minimum K records from a list of tuples by integer value in the second position.\n\n    Args:\n    test_list: List of tuples with (str, int)\n    K: Number of minimum records to return\n\n    Returns:\n    List of tuples with minimum K integer values.\n    \"\"\"\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[:K]\n\n# Test cases\nif __name__ == \"__main__\":\n    test_list1 = [('a', 3), ('b', 1), ('c', 2)]\n    print(min_k(test_list1, 2))  # [('b', 1), ('c', 2)]\n\n    test_list2 = [('x', 10), ('y', 20), ('z', 5), ('w', 15)]\n    print(min_k(test_list2, 3))  # [('z', 5), ('x', 10), ('w', 15)]\n\n    test_list3 = []\n    print(min_k(test_list3, 3))  # []\n\n    test_list4 = [('p', 7), ('q', 7), ('r', 8), ('s', 6)]\n    print(min_k(test_list4, 2))  # [('s', 6), ('p', 7)] or [('s', 6), ('q', 7)]\n```"], "prompt_tokens": [705], "completion_tokens": [809], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_753_min_k"}
{"name": "mbpp_113_check_integer", "language": "Python3", "prompt": "def check_integer(text: str) -> bool:\n    \"\"\"\n\tWrite a function to check if a string represents an integer or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_integer", "test": "def check(candidate):\n    assert candidate('python') == False\n    assert candidate('1') == True\n    assert candidate('12345') == True\n\ndef test_check():\n    check(check_integer)\n\ntest_check()\n", "sample_io": ["assert check_integer('python') == False"], "source_codes": ["\ndef check_integer(text: str) -> bool:\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    if not text:\n        return False\n    \n    # Check for optional sign at the beginning\n    if text[0] in ('+', '-'):\n        if len(text) == 1:\n            return False\n        text = text[1:]\n    \n    return text.isdigit()\n\n\n"], "responses": ["```python\ndef check_integer(text: str) -> bool:\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    if not text:\n        return False\n    \n    # Check for optional sign at the beginning\n    if text[0] in ('+', '-'):\n        if len(text) == 1:\n            return False\n        text = text[1:]\n    \n    return text.isdigit()\n```"], "prompt_tokens": [446], "completion_tokens": [416], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_113_check_integer"}
{"name": "mbpp_743_rotate_right", "language": "Python3", "prompt": "from typing import List\n\ndef rotate_right(list: List[int], m: int) -> List[int]:\n    \"\"\"\n\tWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rotate_right", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n\ndef test_check():\n    check(rotate_right)\n\ntest_check()\n", "sample_io": ["assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"], "source_codes": ["\nfrom typing import List\n\ndef rotate_right(lst: List[int], m: int) -> List[int]:\n    if not lst:\n        return lst  # Return empty list as is\n    n = len(lst)\n    m = m % n  # Handle rotations greater than length\n    return lst[-m:] + lst[:-m]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef rotate_right(lst: List[int], m: int) -> List[int]:\n    if not lst:\n        return lst  # Return empty list as is\n    n = len(lst)\n    m = m % n  # Handle rotations greater than length\n    return lst[-m:] + lst[:-m]\n```"], "prompt_tokens": [679], "completion_tokens": [570], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_743_rotate_right"}
{"name": "mbpp_598_armstrong_number", "language": "Python3", "prompt": "def armstrong_number(number: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is armstrong or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "armstrong_number", "test": "def check(candidate):\n    assert candidate(153) == True\n    assert candidate(259) == False\n    assert candidate(4458) == False\n\ndef test_check():\n    check(armstrong_number)\n\ntest_check()\n", "sample_io": ["assert armstrong_number(153) == True"], "source_codes": ["\ndef armstrong_number(number: int) -> bool:\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n    \n    An Armstrong number is an n-digit number that is equal to the sum of its digits each raised to the nth power.\n    \"\"\"\n    digits = str(number)\n    n = len(digits)\n    total = sum(int(digit) ** n for digit in digits)\n    return total == number\n\n# Example usage:\nprint(armstrong_number(153))  # True\nprint(armstrong_number(123))  # False\n\n\n"], "responses": ["```python\ndef armstrong_number(number: int) -> bool:\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n    \n    An Armstrong number is an n-digit number that is equal to the sum of its digits each raised to the nth power.\n    \"\"\"\n    digits = str(number)\n    n = len(digits)\n    total = sum(int(digit) ** n for digit in digits)\n    return total == number\n\n# Example usage:\nprint(armstrong_number(153))  # True\nprint(armstrong_number(123))  # False\n```"], "prompt_tokens": [401], "completion_tokens": [397], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_598_armstrong_number"}
{"name": "mbpp_398_sum_of_digits", "language": "Python3", "prompt": "from typing import List, Any\n\ndef sum_of_digits(nums: List[Any]) -> int:\n    \"\"\"\n\tWrite a function to compute the sum of digits of each number of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_of_digits", "test": "def check(candidate):\n    assert candidate([10, 2, 56]) == 14\n    assert candidate([[10, 20, 4, 5, 'b', 70, 'a']]) == 19\n    assert candidate([10, 20, -4, 5, -70]) == 19\n\ndef test_check():\n    check(sum_of_digits)\n\ntest_check()\n", "sample_io": ["assert sum_of_digits([10, 2, 56]) == 14"], "source_codes": ["\nfrom typing import List, Any\n\ndef sum_of_digits(nums: List[Any]) -> int:\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        for digit in str(abs(int(num))):\n            total_sum += int(digit)\n    return total_sum\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef sum_of_digits(nums: List[Any]) -> int:\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        for digit in str(abs(int(num))):\n            total_sum += int(digit)\n    return total_sum\n```"], "prompt_tokens": [355], "completion_tokens": [292], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_398_sum_of_digits"}
{"name": "mbpp_229_re_arrange_array", "language": "Python3", "prompt": "from typing import List\n\ndef re_arrange_array(arr: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "re_arrange_array", "test": "def check(candidate):\n    assert candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n    assert candidate([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\n    assert candidate([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]\n\ndef test_check():\n    check(re_arrange_array)\n\ntest_check()\n", "sample_io": ["assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]"], "source_codes": ["\nfrom typing import List\n\ndef re_arrange_array(arr: List[int], n: int) -> List[int]:\n    first_n = arr[:n]\n    negatives = [x for x in first_n if x < 0]\n    non_negatives = [x for x in first_n if x >= 0]\n    arr[:n] = negatives + non_negatives\n    return arr\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef re_arrange_array(arr: List[int], n: int) -> List[int]:\n    first_n = arr[:n]\n    negatives = [x for x in first_n if x < 0]\n    non_negatives = [x for x in first_n if x >= 0]\n    arr[:n] = negatives + non_negatives\n    return arr\n```"], "prompt_tokens": [698], "completion_tokens": [568], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_229_re_arrange_array"}
{"name": "mbpp_638_wind_chill", "language": "Python3", "prompt": "def wind_chill(v: int, t: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "wind_chill", "test": "def check(candidate):\n    assert candidate(120, 35) == 40\n    assert candidate(40, 20) == 19\n    assert candidate(10, 8) == 6\n\ndef test_check():\n    check(wind_chill)\n\ntest_check()\n", "sample_io": ["assert wind_chill(120, 35) == 40"], "source_codes": ["\nimport math\n\ndef wind_chill(v: int, t: int) -> int:\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer (ceiling),\n    given the wind velocity in km/h and temperature in Celsius.\n\n    Parameters:\n    v (int): wind speed in km/h\n    t (int): temperature in Celsius\n\n    Returns:\n    int: wind chill index rounded up to the next integer\n    \"\"\"\n    if v > 4.8 and t <= 10:\n        w = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n        return math.ceil(w)\n    else:\n        return int(t)\n\n\n"], "responses": ["```python\nimport math\n\ndef wind_chill(v: int, t: int) -> int:\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer (ceiling),\n    given the wind velocity in km/h and temperature in Celsius.\n\n    Parameters:\n    v (int): wind speed in km/h\n    t (int): temperature in Celsius\n\n    Returns:\n    int: wind chill index rounded up to the next integer\n    \"\"\"\n    if v > 4.8 and t <= 10:\n        w = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n        return math.ceil(w)\n    else:\n        return int(t)\n```"], "prompt_tokens": [621], "completion_tokens": [631], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_638_wind_chill"}
{"name": "mbpp_608_bell_Number", "language": "Python3", "prompt": "def bell_Number(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find nth bell number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "bell_Number", "test": "def check(candidate):\n    assert candidate(2) == 2\n    assert candidate(3) == 5\n    assert candidate(4) == 15\n\ndef test_check():\n    check(bell_Number)\n\ntest_check()\n", "sample_io": ["assert bell_Number(2) == 2"], "source_codes": ["\ndef bell_Number(n: int) -> int:\n    \"\"\"\n    Compute the nth Bell number using Bell triangle method.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n+1):\n        # First element of the current row\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i][j-1] + bell[i-1][j-1]\n    \n    return bell[n][0]\n\n# Test the function with the first 10 Bell numbers\nfor i in range(10):\n    print(f\"Bell number B({i}) = {bell_Number(i)}\")\n\n\n"], "responses": ["```python\ndef bell_Number(n: int) -> int:\n    \"\"\"\n    Compute the nth Bell number using Bell triangle method.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n+1):\n        # First element of the current row\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i][j-1] + bell[i-1][j-1]\n    \n    return bell[n][0]\n\n# Test the function with the first 10 Bell numbers\nfor i in range(10):\n    print(f\"Bell number B({i}) = {bell_Number(i)}\")\n```"], "prompt_tokens": [870], "completion_tokens": [949], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_608_bell_Number"}
{"name": "mbpp_295_sum_div", "language": "Python3", "prompt": "def sum_div(number: int) -> int:\n    \"\"\"\n\tWrite a function to return the sum of all divisors of a number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_div", "test": "def check(candidate):\n    assert candidate(8) == 7\n    assert candidate(12) == 16\n    assert candidate(7) == 1\n\ndef test_check():\n    check(sum_div)\n\ntest_check()\n", "sample_io": ["assert sum_div(8) == 7"], "source_codes": ["\ndef sum_div(number: int) -> int:\n    total = 0\n    i = 1\n    while i * i <= number:\n        if number % i == 0:\n            total += i\n            if i != number // i:\n                total += number // i\n        i += 1\n    return total\n\n\n"], "responses": ["```python\ndef sum_div(number: int) -> int:\n    total = 0\n    i = 1\n    while i * i <= number:\n        if number % i == 0:\n            total += i\n            if i != number // i:\n                total += number // i\n        i += 1\n    return total\n```"], "prompt_tokens": [514], "completion_tokens": [466], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_295_sum_div"}
{"name": "mbpp_630_get_coordinates", "language": "Python3", "prompt": "from typing import Tuple, List\n\ndef get_coordinates(test_tup: Tuple[int, int]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_coordinates", "test": "def check(candidate):\n    assert candidate((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    assert candidate((4, 5)) == [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n    assert candidate((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n\ndef test_check():\n    check(get_coordinates)\n\ntest_check()\n", "sample_io": ["assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"], "source_codes": ["\nfrom typing import Tuple, List\n\ndef get_coordinates(test_tup: Tuple[int, int]) -> List[List[int]]:\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n    Args:\n    test_tup (Tuple[int, int]): The original coordinate (x, y).\n\n    Returns:\n    List[List[int]]: A list with coordinates of all adjacent positions.\n    \"\"\"\n    x, y = test_tup\n    adjacent_coords = []\n\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if dx == 0 and dy == 0:\n                continue  # Skip the original coordinate\n            adjacent_coords.append([x + dx, y + dy])\n\n    return adjacent_coords\n\n# Example usage:\nprint(get_coordinates((3, 4)))\n\n\n"], "responses": ["```python\nfrom typing import Tuple, List\n\ndef get_coordinates(test_tup: Tuple[int, int]) -> List[List[int]]:\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n    Args:\n    test_tup (Tuple[int, int]): The original coordinate (x, y).\n\n    Returns:\n    List[List[int]]: A list with coordinates of all adjacent positions.\n    \"\"\"\n    x, y = test_tup\n    adjacent_coords = []\n\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if dx == 0 and dy == 0:\n                continue  # Skip the original coordinate\n            adjacent_coords.append([x + dx, y + dy])\n\n    return adjacent_coords\n\n# Example usage:\nprint(get_coordinates((3, 4)))\n```"], "prompt_tokens": [602], "completion_tokens": [632], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_630_get_coordinates"}
{"name": "mbpp_579_find_dissimilar", "language": "Python3", "prompt": "from typing import Tuple\n\ndef find_dissimilar(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to find the dissimilar elements in the given two tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_dissimilar", "test": "def check(candidate):\n    assert candidate((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n    assert candidate((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\n    assert candidate((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)\n\ndef test_check():\n    check(find_dissimilar)\n\ntest_check()\n", "sample_io": ["assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"], "source_codes": ["\nfrom typing import Tuple\n\ndef find_dissimilar(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, ...]:\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \n    Returns a tuple containing elements that are in one tuple but not in the other.\n    \"\"\"\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    diff = set1.symmetric_difference(set2)\n    return tuple(diff)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef find_dissimilar(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, ...]:\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \n    Returns a tuple containing elements that are in one tuple but not in the other.\n    \"\"\"\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    diff = set1.symmetric_difference(set2)\n    return tuple(diff)\n```"], "prompt_tokens": [640], "completion_tokens": [564], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_579_find_dissimilar"}
{"name": "mbpp_125_find_length", "language": "Python3", "prompt": "def find_length(string: str) -> int:\n    \"\"\"\n\tWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_length", "test": "def check(candidate):\n    assert candidate('11000010001') == 6\n    assert candidate('10111') == 1\n    assert candidate('11011101100101') == 2\n\ndef test_check():\n    check(find_length)\n\ntest_check()\n", "sample_io": ["assert find_length('11000010001') == 6"], "source_codes": ["\ndef find_length(string: str) -> int:\n    arr = [1 if ch == '0' else -1 for ch in string]\n\n    max_diff = float('-inf')\n    current_sum = 0\n\n    for val in arr:\n        current_sum += val\n        if current_sum > max_diff:\n            max_diff = current_sum\n        \n        if current_sum < 0:\n            current_sum = 0\n\n    return max_diff if max_diff > 0 else 0\n\n\n"], "responses": ["```python\ndef find_length(string: str) -> int:\n    arr = [1 if ch == '0' else -1 for ch in string]\n\n    max_diff = float('-inf')\n    current_sum = 0\n\n    for val in arr:\n        current_sum += val\n        if current_sum > max_diff:\n            max_diff = current_sum\n        \n        if current_sum < 0:\n            current_sum = 0\n\n    return max_diff if max_diff > 0 else 0\n```"], "prompt_tokens": [877], "completion_tokens": [828], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_125_find_length"}
{"name": "mbpp_262_split_two_parts", "language": "Python3", "prompt": "from typing import List, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Any:\n    \"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "split_two_parts", "test": "def check(candidate):\n    assert candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1])\n    assert candidate(['a', 'b', 'c', 'd'], 2) == (['a', 'b'], ['c', 'd'])\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'], 4) == (['p', 'y', 't', 'h'], ['o', 'n'])\n\ndef test_check():\n    check(split_two_parts)\n\ntest_check()\n", "sample_io": ["assert split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1])"], "source_codes": ["\nfrom typing import List, Any, Tuple\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts \n    where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n\n\n"], "responses": ["```python\nfrom typing import List, Any, Tuple\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts \n    where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n```"], "prompt_tokens": [711], "completion_tokens": [618], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_262_split_two_parts"}
{"name": "mbpp_771_check_expression", "language": "Python3", "prompt": "def check_expression(exp: str) -> bool:\n    \"\"\"\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_expression", "test": "def check(candidate):\n    assert candidate('{()}[{}]') == True\n    assert candidate('{()}[{]') == False\n    assert candidate('{()}[{}][]({})') == True\n\ndef test_check():\n    check(check_expression)\n\ntest_check()\n", "sample_io": ["assert check_expression('{()}[{}]') == True"], "source_codes": ["\ndef check_expression(exp: str) -> bool:\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n\n    for char in exp:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map:\n            if not stack or stack[-1] != bracket_map[char]:\n                return False\n            stack.pop()\n\n    return len(stack) == 0\n\n\n"], "responses": ["```python\ndef check_expression(exp: str) -> bool:\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n\n    for char in exp:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map:\n            if not stack or stack[-1] != bracket_map[char]:\n                return False\n            stack.pop()\n\n    return len(stack) == 0\n```"], "prompt_tokens": [570], "completion_tokens": [505], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_771_check_expression"}
{"name": "mbpp_801_test_three_equal", "language": "Python3", "prompt": "def test_three_equal(x: int, y: int, z: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of equal numbers from three given integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "test_three_equal", "test": "def check(candidate):\n    assert candidate(1, 1, 1) == 3\n    assert candidate(-1, -2, -3) == 0\n    assert candidate(1, 2, 2) == 2\n\ndef test_check():\n    check(test_three_equal)\n\ntest_check()\n", "sample_io": ["assert test_three_equal(1, 1, 1) == 3"], "source_codes": ["\ndef test_three_equal(x: int, y: int, z: int) -> int:\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    Returns:\n        int: number of equal numbers (3 if all equal, 2 if two equal, 0 if none equal)\n    \"\"\"\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n\n\n"], "responses": ["```python\ndef test_three_equal(x: int, y: int, z: int) -> int:\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    Returns:\n        int: number of equal numbers (3 if all equal, 2 if two equal, 0 if none equal)\n    \"\"\"\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n```"], "prompt_tokens": [435], "completion_tokens": [406], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_801_test_three_equal"}
{"name": "mbpp_389_find_lucas", "language": "Python3", "prompt": "def find_lucas(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the n'th lucas number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_lucas", "test": "def check(candidate):\n    assert candidate(9) == 76\n    assert candidate(4) == 7\n    assert candidate(3) == 4\n\ndef test_check():\n    check(find_lucas)\n\ntest_check()\n", "sample_io": ["assert find_lucas(9) == 76"], "source_codes": ["\ndef find_lucas(n: int) -> int:\n    \"\"\"\n    Find the n'th Lucas number.\n    Lucas numbers are defined as:\n    L(0) = 2\n    L(1) = 1\n    L(n) = L(n-1) + L(n-2) for n > 1\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases\nprint(find_lucas(0))  # Output: 2\nprint(find_lucas(1))  # Output: 1\nprint(find_lucas(5))  # Output: 11\nprint(find_lucas(7))  # Output: 29\n\n\n"], "responses": ["```python\ndef find_lucas(n: int) -> int:\n    \"\"\"\n    Find the n'th Lucas number.\n    Lucas numbers are defined as:\n    L(0) = 2\n    L(1) = 1\n    L(n) = L(n-1) + L(n-2) for n > 1\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases\nprint(find_lucas(0))  # Output: 2\nprint(find_lucas(1))  # Output: 1\nprint(find_lucas(5))  # Output: 11\nprint(find_lucas(7))  # Output: 29\n```"], "prompt_tokens": [547], "completion_tokens": [626], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_389_find_lucas"}
{"name": "mbpp_102_snake_to_camel", "language": "Python3", "prompt": "def snake_to_camel(word: str) -> str:\n    \"\"\"\n\tWrite a function to convert a snake case string to camel case string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "snake_to_camel", "test": "def check(candidate):\n    assert candidate('python_program') == 'PythonProgram'\n    assert candidate('python_language') == 'PythonLanguage'\n    assert candidate('programming_language') == 'ProgrammingLanguage'\n\ndef test_check():\n    check(snake_to_camel)\n\ntest_check()\n", "sample_io": ["assert snake_to_camel('python_program') == 'PythonProgram'"], "source_codes": ["\ndef snake_to_camel(word: str) -> str:\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    parts = word.split('_')\n    return parts[0] + ''.join(part.capitalize() for part in parts[1:])\n\n\n"], "responses": ["```python\ndef snake_to_camel(word: str) -> str:\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    parts = word.split('_')\n    return parts[0] + ''.join(part.capitalize() for part in parts[1:])\n```"], "prompt_tokens": [302], "completion_tokens": [236], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_102_snake_to_camel"}
{"name": "mbpp_604_reverse_words", "language": "Python3", "prompt": "def reverse_words(s: str) -> str:\n    \"\"\"\n\tWrite a function to reverse words seperated by spaces in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "reverse_words", "test": "def check(candidate):\n    assert candidate('python program') == 'program python'\n    assert candidate('java language') == 'language java'\n    assert candidate('indian man') == 'man indian'\n\ndef test_check():\n    check(reverse_words)\n\ntest_check()\n", "sample_io": ["assert reverse_words('python program') == 'program python'"], "source_codes": ["\ndef reverse_words(s: str) -> str:\n    \"\"\"\n    Write a function to reverse words separated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string\n\n\n"], "responses": ["```python\ndef reverse_words(s: str) -> str:\n    \"\"\"\n    Write a function to reverse words separated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string\n```"], "prompt_tokens": [494], "completion_tokens": [436], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_604_reverse_words"}
{"name": "mbpp_624_is_upper", "language": "Python3", "prompt": "def is_upper(string: str) -> str:\n    \"\"\"\n\tWrite a python function to convert a given string to uppercase.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_upper", "test": "def check(candidate):\n    assert candidate('person') == 'PERSON'\n    assert candidate('final') == 'FINAL'\n    assert candidate('Valid') == 'VALID'\n\ndef test_check():\n    check(is_upper)\n\ntest_check()\n", "sample_io": ["assert is_upper('person') == 'PERSON'"], "source_codes": ["\ndef is_upper(string: str) -> str:\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()\n\n\n"], "responses": ["```python\ndef is_upper(string: str) -> str:\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()\n```"], "prompt_tokens": [216], "completion_tokens": [137], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_624_is_upper"}
{"name": "mbpp_558_digit_distance_nums", "language": "Python3", "prompt": "def digit_distance_nums(n1: int, n2: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of the per-digit difference between two integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "digit_distance_nums", "test": "def check(candidate):\n    assert candidate(1, 2) == 1\n    assert candidate(23, 56) == 6\n    assert candidate(123, 256) == 7\n\ndef test_check():\n    check(digit_distance_nums)\n\ntest_check()\n", "sample_io": ["assert digit_distance_nums(1, 2) == 1"], "source_codes": ["\ndef digit_distance_nums(n1: int, n2: int) -> int:\n    s1 = str(n1)\n    s2 = str(n2)\n    \n    max_len = max(len(s1), len(s2))\n    s1 = s1.zfill(max_len)\n    s2 = s2.zfill(max_len)\n    \n    total_diff = 0\n    for d1, d2 in zip(s1, s2):\n        total_diff += abs(int(d1) - int(d2))\n    \n    return total_diff\n\n\n"], "responses": ["```python\ndef digit_distance_nums(n1: int, n2: int) -> int:\n    s1 = str(n1)\n    s2 = str(n2)\n    \n    max_len = max(len(s1), len(s2))\n    s1 = s1.zfill(max_len)\n    s2 = s2.zfill(max_len)\n    \n    total_diff = 0\n    for d1, d2 in zip(s1, s2):\n        total_diff += abs(int(d1) - int(d2))\n    \n    return total_diff\n```"], "prompt_tokens": [761], "completion_tokens": [738], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_558_digit_distance_nums"}
{"name": "mbpp_143_find_lists", "language": "Python3", "prompt": "from typing import List, Any\n\ndef find_lists(Input: List[Any]) -> int:\n    \"\"\"\n\tWrite a function to find number of lists present in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_143_find_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_lists", "test": "def check(candidate):\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8]]) == 2\n    assert candidate([[1, 2], [3, 4], [5, 6]]) == 3\n    assert candidate([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1\n\ndef test_check():\n    check(find_lists)\n\ntest_check()\n", "sample_io": ["assert find_lists([[1, 2, 3, 4], [5, 6, 7, 8]]) == 2"], "source_codes": ["\nfrom typing import List, Any\n\ndef find_lists(Input: List[Any]) -> int:\n    \"\"\"\n    Write a function to find number of lists present in the given list.\n    \"\"\"\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef find_lists(Input: List[Any]) -> int:\n    \"\"\"\n    Write a function to find number of lists present in the given list.\n    \"\"\"\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count\n```"], "prompt_tokens": [371], "completion_tokens": [305], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_143_find_lists"}
{"name": "mbpp_615_average_tuple", "language": "Python3", "prompt": "from typing import List\n\ndef average_tuple(nums: List[List[int]]) -> List[float]:\n    \"\"\"\n\tWrite a function which takes a lists of lists and returns the average value for each sublist as a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "average_tuple", "test": "def check(candidate):\n    assert candidate([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]) == [30.5, 34.25, 27.0, 23.25]\n    assert candidate([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]]) == [25.5, -18.0, 3.75]\n    assert candidate([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]]) == [305.0, 342.5, 270.0, 232.5]\n\ndef test_check():\n    check(average_tuple)\n\ntest_check()\n", "sample_io": ["assert average_tuple([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]) == [30.5, 34.25, 27.0, 23.25]"], "source_codes": ["\nfrom typing import List\n\ndef average_tuple(nums: List[List[int]]) -> List[float]:\n    \"\"\"\n    Write a function which takes a list of lists and returns the average value for each sublist as a list.\n    \"\"\"\n    averages = []\n    for sublist in nums:\n        if sublist:  # Check if the sublist is not empty to avoid division by zero.\n            avg = sum(sublist) / len(sublist)\n        else:\n            avg = 0.0  # Or handle empty sublists differently if needed.\n        averages.append(avg)\n    return averages\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef average_tuple(nums: List[List[int]]) -> List[float]:\n    \"\"\"\n    Write a function which takes a list of lists and returns the average value for each sublist as a list.\n    \"\"\"\n    averages = []\n    for sublist in nums:\n        if sublist:  # Check if the sublist is not empty to avoid division by zero.\n            avg = sum(sublist) / len(sublist)\n        else:\n            avg = 0.0  # Or handle empty sublists differently if needed.\n        averages.append(avg)\n    return averages\n```"], "prompt_tokens": [465], "completion_tokens": [435], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_615_average_tuple"}
{"name": "mbpp_166_find_even_pair", "language": "Python3", "prompt": "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    \"\"\"\n\tWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_even_pair", "test": "def check(candidate):\n    assert candidate([5, 4, 7, 2, 1]) == 4\n    assert candidate([7, 2, 8, 1, 0, 5, 11]) == 9\n    assert candidate([1, 2, 3]) == 1\n\ndef test_check():\n    check(find_even_pair)\n\ntest_check()\n", "sample_io": ["assert find_even_pair([5, 4, 7, 2, 1]) == 4"], "source_codes": ["\nfrom typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    even_count = 0\n    odd_count = 0\n    \n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    even_pairs = even_count * (even_count - 1) // 2\n    odd_pairs = odd_count * (odd_count - 1) // 2\n    \n    return even_pairs + odd_pairs\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    even_count = 0\n    odd_count = 0\n    \n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    even_pairs = even_count * (even_count - 1) // 2\n    odd_pairs = odd_count * (odd_count - 1) // 2\n    \n    return even_pairs + odd_pairs\n```"], "prompt_tokens": [727], "completion_tokens": [692], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_166_find_even_pair"}
{"name": "mbpp_58_opposite_Signs", "language": "Python3", "prompt": "def opposite_Signs(x: int, y: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "opposite_Signs", "test": "def check(candidate):\n    assert candidate(1, -2) == True\n    assert candidate(3, 2) == False\n    assert candidate(-10, -10) == False\n    assert candidate(-2, 2) == True\n\ndef test_check():\n    check(opposite_Signs)\n\ntest_check()\n", "sample_io": ["assert opposite_Signs(1, -2) == True"], "source_codes": ["\ndef opposite_Signs(x: int, y: int) -> bool:\n    \"\"\"\n    Check whether two integers have opposite signs.\n\n    Args:\n    x (int): First integer.\n    y (int): Second integer.\n\n    Returns:\n    bool: True if x and y have opposite signs, False otherwise.\n    \"\"\"\n    return x * y < 0\n\n\n"], "responses": ["```python\ndef opposite_Signs(x: int, y: int) -> bool:\n    \"\"\"\n    Check whether two integers have opposite signs.\n\n    Args:\n    x (int): First integer.\n    y (int): Second integer.\n\n    Returns:\n    bool: True if x and y have opposite signs, False otherwise.\n    \"\"\"\n    return x * y < 0\n```"], "prompt_tokens": [429], "completion_tokens": [371], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_58_opposite_Signs"}
{"name": "mbpp_569_sort_sublists", "language": "Python3", "prompt": "from typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_sublists", "test": "def check(candidate):\n    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]) == [['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n    assert candidate([['a', 'b'], ['d', 'c'], ['g', 'h'], ['f', 'e']]) == [['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n", "sample_io": ["assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"], "source_codes": ["\nfrom typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    \"\"\"\n    return [sorted(sublist) for sublist in list1]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    \"\"\"\n    return [sorted(sublist) for sublist in list1]\n```"], "prompt_tokens": [427], "completion_tokens": [337], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_569_sort_sublists"}
{"name": "mbpp_255_combinations_colors", "language": "Python3", "prompt": "from typing import List\n\ndef combinations_colors(l: List[str], n: int) -> List[List[str]]:\n    \"\"\"\n\tWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "combinations_colors", "test": "def check(candidate):\n    assert candidate(['Red', 'Green', 'Blue'], 1) == [['Red'], ['Green'], ['Blue']]\n    assert candidate(['Red', 'Green', 'Blue'], 2) == [['Red', 'Red'], ['Red', 'Green'], ['Red', 'Blue'], ['Green', 'Green'], ['Green', 'Blue'], ['Blue', 'Blue']]\n    assert candidate(['Red', 'Green', 'Blue'], 3) == [['Red', 'Red', 'Red'], ['Red', 'Red', 'Green'], ['Red', 'Red', 'Blue'], ['Red', 'Green', 'Green'], ['Red', 'Green', 'Blue'], ['Red', 'Blue', 'Blue'], ['Green', 'Green', 'Green'], ['Green', 'Green', 'Blue'], ['Green', 'Blue', 'Blue'], ['Blue', 'Blue', 'Blue']]\n\ndef test_check():\n    check(combinations_colors)\n\ntest_check()\n", "sample_io": ["assert combinations_colors(['Red', 'Green', 'Blue'], 1) == [['Red'], ['Green'], ['Blue']]"], "source_codes": ["\nfrom typing import List\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List[str], n: int) -> List[List[str]]:\n    \"\"\"\n    Generate all combinations with repetition of elements in list l with length n.\n    \"\"\"\n    return [list(comb) for comb in combinations_with_replacement(l, n)]\n\n\n"], "responses": ["```python\nfrom typing import List\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List[str], n: int) -> List[List[str]]:\n    \"\"\"\n    Generate all combinations with repetition of elements in list l with length n.\n    \"\"\"\n    return [list(comb) for comb in combinations_with_replacement(l, n)]\n```"], "prompt_tokens": [660], "completion_tokens": [541], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_255_combinations_colors"}
{"name": "mbpp_619_move_num", "language": "Python3", "prompt": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "move_num", "test": "def check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n", "sample_io": ["assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"], "source_codes": ["\ndef move_num(test_str: str) -> str:\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    non_digits = []\n    digits = []\n    \n    for char in test_str:\n        if char.isdigit():\n            digits.append(char)\n        else:\n            non_digits.append(char)\n    \n    return ''.join(non_digits + digits)\n\n\n"], "responses": ["```python\ndef move_num(test_str: str) -> str:\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    non_digits = []\n    digits = []\n    \n    for char in test_str:\n        if char.isdigit():\n            digits.append(char)\n        else:\n            non_digits.append(char)\n    \n    return ''.join(non_digits + digits)\n```"], "prompt_tokens": [452], "completion_tokens": [409], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_619_move_num"}
{"name": "mbpp_249_intersection_array", "language": "Python3", "prompt": "from typing import List\n\ndef intersection_array(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find the intersection of two arrays.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "intersection_array", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]) == [1, 2, 8, 9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]) == [3, 5, 7, 9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]) == [10]\n\ndef test_check():\n    check(intersection_array)\n\ntest_check()\n", "sample_io": ["assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]) == [1, 2, 8, 9]"], "source_codes": ["\nfrom typing import List\n\ndef intersection_array(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set_nums1 = set(array_nums1)\n    intersection_set = set()\n\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection_set.add(num)\n\n    return list(intersection_set)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef intersection_array(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set_nums1 = set(array_nums1)\n    intersection_set = set()\n\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection_set.add(num)\n\n    return list(intersection_set)\n```"], "prompt_tokens": [402], "completion_tokens": [348], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_249_intersection_array"}
{"name": "mbpp_250_count_X", "language": "Python3", "prompt": "from typing import List\n\ndef count_X(tup: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_X", "test": "def check(candidate):\n    assert candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4) == 0\n    assert candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10) == 3\n    assert candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8) == 4\n\ndef test_check():\n    check(count_X)\n\ntest_check()\n", "sample_io": ["assert count_X([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4) == 0"], "source_codes": ["\nfrom typing import Tuple\n\ndef count_X(tup: Tuple[int, ...], x: int) -> int:\n    return tup.count(x)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef count_X(tup: Tuple[int, ...], x: int) -> int:\n    return tup.count(x)\n```"], "prompt_tokens": [461], "completion_tokens": [329], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_250_count_X"}
{"name": "mbpp_622_get_median", "language": "Python3", "prompt": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_median", "test": "def check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n", "sample_io": ["assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0"], "source_codes": ["\nfrom typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    for count in range(n + 1):\n        if i == n:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        elif j == n:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        elif arr1[i] <= arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    for count in range(n + 1):\n        if i == n:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        elif j == n:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        elif arr1[i] <= arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n```"], "prompt_tokens": [953], "completion_tokens": [988], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_622_get_median"}
{"name": "mbpp_80_tetrahedral_number", "language": "Python3", "prompt": "def tetrahedral_number(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth tetrahedral number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tetrahedral_number", "test": "def check(candidate):\n    assert candidate(5) == 35\n    assert candidate(6) == 56\n    assert candidate(7) == 84\n\ndef test_check():\n    check(tetrahedral_number)\n\ntest_check()\n", "sample_io": ["assert tetrahedral_number(5) == 35"], "source_codes": ["\ndef tetrahedral_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \n    Args:\n    n (int): The index (n) of the tetrahedral number to compute.\n\n    Returns:\n    int: The nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n\n"], "responses": ["```python\ndef tetrahedral_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \n    Args:\n    n (int): The index (n) of the tetrahedral number to compute.\n\n    Returns:\n    int: The nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n```"], "prompt_tokens": [349], "completion_tokens": [315], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_80_tetrahedral_number"}
{"name": "mbpp_780_find_combinations", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n\tWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_combinations", "test": "def check(candidate):\n    assert candidate([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    assert candidate([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\n    assert candidate([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n\ndef test_check():\n    check(find_combinations)\n\ntest_check()\n", "sample_io": ["assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"], "source_codes": ["\nfrom typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    n = len(test_list)\n    \n    for r in range(1, n + 1):\n        for comb in combinations(test_list, r):\n            sum_first = sum(t[0] for t in comb)\n            sum_second = sum(t[1] for t in comb)\n            result.append((sum_first, sum_second))\n    \n    return result\n\n\n# Example usage:\ntest_list = [(2, 3), (1, 4), (3, 2)]\nprint(find_combinations(test_list))\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    n = len(test_list)\n    \n    for r in range(1, n + 1):\n        for comb in combinations(test_list, r):\n            sum_first = sum(t[0] for t in comb)\n            sum_second = sum(t[1] for t in comb)\n            result.append((sum_first, sum_second))\n    \n    return result\n\n\n# Example usage:\ntest_list = [(2, 3), (1, 4), (3, 2)]\nprint(find_combinations(test_list))\n```"], "prompt_tokens": [907], "completion_tokens": [850], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_780_find_combinations"}
{"name": "mbpp_733_find_first_occurrence", "language": "Python3", "prompt": "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_first_occurrence", "test": "def check(candidate):\n    assert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    assert candidate([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\n    assert candidate([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4\n\ndef test_check():\n    check(find_first_occurrence)\n\ntest_check()\n", "sample_io": ["assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1"], "source_codes": ["\nfrom typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    low, high = 0, len(A) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    low, high = 0, len(A) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return result\n```"], "prompt_tokens": [642], "completion_tokens": [604], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_733_find_first_occurrence"}
{"name": "mbpp_6_differ_At_One_Bit_Pos", "language": "Python3", "prompt": "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "differ_At_One_Bit_Pos", "test": "def check(candidate):\n    assert candidate(13, 9) == True\n    assert candidate(15, 8) == False\n    assert candidate(2, 4) == False\n    assert candidate(2, 3) == True\n    assert candidate(5, 1) == True\n    assert candidate(1, 5) == True\n\ndef test_check():\n    check(differ_At_One_Bit_Pos)\n\ntest_check()\n", "sample_io": ["assert differ_At_One_Bit_Pos(13, 9) == True"], "source_codes": ["\ndef differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    \"\"\"\n    Check whether two integers differ at exactly one bit position.\n    \n    Args:\n    a (int): First integer.\n    b (int): Second integer.\n    \n    Returns:\n    bool: True if the numbers differ at exactly one bit position, False otherwise.\n    \"\"\"\n    xor = a ^ b\n    return xor != 0 and (xor & (xor - 1)) == 0\n\n\n"], "responses": ["```python\ndef differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    \"\"\"\n    Check whether two integers differ at exactly one bit position.\n    \n    Args:\n    a (int): First integer.\n    b (int): Second integer.\n    \n    Returns:\n    bool: True if the numbers differ at exactly one bit position, False otherwise.\n    \"\"\"\n    xor = a ^ b\n    return xor != 0 and (xor & (xor - 1)) == 0\n```"], "prompt_tokens": [488], "completion_tokens": [449], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_6_differ_At_One_Bit_Pos"}
{"name": "mbpp_762_check_monthnumber_number", "language": "Python3", "prompt": "def check_monthnumber_number(monthnum3: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_762_check_monthnumber_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_monthnumber_number", "test": "def check(candidate):\n    assert candidate(6) == True\n    assert candidate(2) == False\n    assert candidate(12) == False\n\ndef test_check():\n    check(check_monthnumber_number)\n\ntest_check()\n", "sample_io": ["assert check_monthnumber_number(6) == True"], "source_codes": ["\ndef check_monthnumber_number(monthnum3: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as numbers from 1 to 12.\n    \"\"\"\n    months_with_30_days = {4, 6, 9, 11}\n    return monthnum3 in months_with_30_days\n\n\n"], "responses": ["```python\ndef check_monthnumber_number(monthnum3: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as numbers from 1 to 12.\n    \"\"\"\n    months_with_30_days = {4, 6, 9, 11}\n    return monthnum3 in months_with_30_days\n```"], "prompt_tokens": [432], "completion_tokens": [357], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_762_check_monthnumber_number"}
{"name": "mbpp_625_swap_List", "language": "Python3", "prompt": "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to interchange the first and last element in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "swap_List", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == [3, 2, 1]\n    assert candidate([1, 2, 3, 4, 4]) == [4, 2, 3, 4, 1]\n    assert candidate([4, 5, 6]) == [6, 5, 4]\n\ndef test_check():\n    check(swap_List)\n\ntest_check()\n", "sample_io": ["assert swap_List([1, 2, 3]) == [3, 2, 1]"], "source_codes": ["\nfrom typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) < 2:\n        return newList\n\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) < 2:\n        return newList\n\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n```"], "prompt_tokens": [485], "completion_tokens": [425], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_625_swap_List"}
{"name": "mbpp_407_rearrange_bigger", "language": "Python3", "prompt": "from typing import Any\n\ndef rearrange_bigger(n: int) -> Any:\n    \"\"\"\n\tWrite a function to create the next bigger number by rearranging the digits of a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rearrange_bigger", "test": "def check(candidate):\n    assert candidate(12) == 21\n    assert candidate(10) == False\n    assert candidate(102) == 120\n\ndef test_check():\n    check(rearrange_bigger)\n\ntest_check()\n", "sample_io": ["assert rearrange_bigger(12) == 21"], "source_codes": ["\ndef rearrange_bigger(n: int) -> int:\n    digits = list(str(n))\n    \n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    \n    if i < 0:\n        return -1\n    \n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    digits[i], digits[j] = digits[j], digits[i]\n    \n    digits[i+1:] = reversed(digits[i+1:])\n    \n    return int(\"\".join(digits))\n\n\n"], "responses": ["```python\ndef rearrange_bigger(n: int) -> int:\n    digits = list(str(n))\n    \n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    \n    if i < 0:\n        return -1\n    \n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    digits[i], digits[j] = digits[j], digits[i]\n    \n    digits[i+1:] = reversed(digits[i+1:])\n    \n    return int(\"\".join(digits))\n```"], "prompt_tokens": [915], "completion_tokens": [903], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_407_rearrange_bigger"}
{"name": "mbpp_392_get_max_sum", "language": "Python3", "prompt": "def get_max_sum(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_max_sum", "test": "def check(candidate):\n    assert candidate(60) == 106\n    assert candidate(10) == 12\n    assert candidate(2) == 2\n\ndef test_check():\n    check(get_max_sum)\n\ntest_check()\n", "sample_io": ["assert get_max_sum(60) == 106"], "source_codes": ["\ndef get_max_sum(n: int, memo=None) -> int:\n    if memo is None:\n        memo = {}\n\n    if n <= 1:\n        return n\n\n    if n in memo:\n        return memo[n]\n\n    sum_parts = (\n        get_max_sum(n // 2, memo) +\n        get_max_sum(n // 3, memo) +\n        get_max_sum(n // 4, memo) +\n        get_max_sum(n // 5, memo)\n    )\n\n    memo[n] = max(n, sum_parts)\n    return memo[n]\n\n\n"], "responses": ["```python\ndef get_max_sum(n: int, memo=None) -> int:\n    if memo is None:\n        memo = {}\n\n    if n <= 1:\n        return n\n\n    if n in memo:\n        return memo[n]\n\n    sum_parts = (\n        get_max_sum(n // 2, memo) +\n        get_max_sum(n // 3, memo) +\n        get_max_sum(n // 4, memo) +\n        get_max_sum(n // 5, memo)\n    )\n\n    memo[n] = max(n, sum_parts)\n    return memo[n]\n```"], "prompt_tokens": [701], "completion_tokens": [636], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_392_get_max_sum"}
{"name": "mbpp_784_mul_even_odd", "language": "Python3", "prompt": "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "mul_even_odd", "test": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\n    assert candidate([1, 5, 7, 9, 10]) == 10\n\ndef test_check():\n    check(mul_even_odd)\n\ntest_check()\n", "sample_io": ["assert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4"], "source_codes": ["\nfrom typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    first_even = None\n    first_odd = None\n\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 == 1:\n            first_odd = num\n\n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is None or first_odd is None:\n        return 0\n\n    return first_even * first_odd\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    first_even = None\n    first_odd = None\n\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 == 1:\n            first_odd = num\n\n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is None or first_odd is None:\n        return 0\n\n    return first_even * first_odd\n```"], "prompt_tokens": [493], "completion_tokens": [498], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_784_mul_even_odd"}
{"name": "mbpp_109_odd_Equivalent", "language": "Python3", "prompt": "def odd_Equivalent(s: str, n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_109_odd_Equivalent.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_Equivalent", "test": "def check(candidate):\n    assert candidate('011001', 6) == 3\n    assert candidate('11011', 5) == 4\n    assert candidate('1010', 4) == 2\n\ndef test_check():\n    check(odd_Equivalent)\n\ntest_check()\n", "sample_io": ["assert odd_Equivalent('011001', 6) == 3"], "source_codes": ["\ndef odd_Equivalent(s: str, n: int) -> int:\n    L = len(s)\n    n = n % L  # Normalize rotations\n\n    count = 0\n    for i in range(n + 1):  # including 0 rotations (original string)\n        rotated = s[i:] + s[:i]\n        if rotated[-1] == '1':\n            count += 1\n    return count\n\n\n"], "responses": ["```python\ndef odd_Equivalent(s: str, n: int) -> int:\n    L = len(s)\n    n = n % L  # Normalize rotations\n\n    count = 0\n    for i in range(n + 1):  # including 0 rotations (original string)\n        rotated = s[i:] + s[:i]\n        if rotated[-1] == '1':\n            count += 1\n    return count\n```"], "prompt_tokens": [937], "completion_tokens": [878], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_109_odd_Equivalent"}
{"name": "mbpp_95_Find_Min_Length", "language": "Python3", "prompt": "from typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a python function to find the length of the smallest list in a list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Min_Length", "test": "def check(candidate):\n    assert candidate([[1], [1, 2]]) == 1\n    assert candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2\n    assert candidate([[3, 3, 3], [4, 4, 4, 4]]) == 3\n\ndef test_check():\n    check(Find_Min_Length)\n\ntest_check()\n", "sample_io": ["assert Find_Min_Length([[1], [1, 2]]) == 1"], "source_codes": ["\nfrom typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> int:\n    if not lst:\n        return 0\n    return min(len(sublist) for sublist in lst)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> int:\n    if not lst:\n        return 0\n    return min(len(sublist) for sublist in lst)\n```"], "prompt_tokens": [435], "completion_tokens": [336], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_95_Find_Min_Length"}
{"name": "mbpp_399_bitwise_xor", "language": "Python3", "prompt": "from typing import Tuple\n\ndef bitwise_xor(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "bitwise_xor", "test": "def check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n    assert candidate((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\n    assert candidate((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)\n\ndef test_check():\n    check(bitwise_xor)\n\ntest_check()\n", "sample_io": ["assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)"], "source_codes": ["\nfrom typing import Tuple\n\ndef bitwise_xor(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    return result\n\n# Example usage:\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (4, 3, 2, 1)\nprint(bitwise_xor(test_tup1, test_tup2))\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef bitwise_xor(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    return result\n\n# Example usage:\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (4, 3, 2, 1)\nprint(bitwise_xor(test_tup1, test_tup2))\n```"], "prompt_tokens": [537], "completion_tokens": [493], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_399_bitwise_xor"}
{"name": "mbpp_641_is_nonagonal", "language": "Python3", "prompt": "def is_nonagonal(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth nonagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_nonagonal", "test": "def check(candidate):\n    assert candidate(10) == 325\n    assert candidate(15) == 750\n    assert candidate(18) == 1089\n\ndef test_check():\n    check(is_nonagonal)\n\ntest_check()\n", "sample_io": ["assert is_nonagonal(10) == 325"], "source_codes": ["\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Find the nth nonagonal number.\n\n    Parameters:\n    n (int): The position of the nonagonal number to find (n > 0).\n\n    Returns:\n    int: The nth nonagonal number.\n    \"\"\"\n    return n * (7 * n - 5) // 2\n\n\n"], "responses": ["```python\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Find the nth nonagonal number.\n\n    Parameters:\n    n (int): The position of the nonagonal number to find (n > 0).\n\n    Returns:\n    int: The nth nonagonal number.\n    \"\"\"\n    return n * (7 * n - 5) // 2\n```"], "prompt_tokens": [486], "completion_tokens": [449], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_641_is_nonagonal"}
{"name": "mbpp_59_is_octagonal", "language": "Python3", "prompt": "def is_octagonal(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth octagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_octagonal", "test": "def check(candidate):\n    assert candidate(5) == 65\n    assert candidate(10) == 280\n    assert candidate(15) == 645\n\ndef test_check():\n    check(is_octagonal)\n\ntest_check()\n", "sample_io": ["assert is_octagonal(5) == 65"], "source_codes": ["\ndef is_octagonal(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return n * (3 * n - 2)\n\n\n"], "responses": ["```python\ndef is_octagonal(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return n * (3 * n - 2)\n```"], "prompt_tokens": [421], "completion_tokens": [349], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_59_is_octagonal"}
